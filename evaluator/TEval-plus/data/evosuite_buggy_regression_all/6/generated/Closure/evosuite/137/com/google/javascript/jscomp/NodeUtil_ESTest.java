/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:06:02 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.EvaluatorException;
import com.google.javascript.rhino.FunctionNode;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.ScriptOrFnNode;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.testing.EmptyScope;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
      
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(122, node0.getType());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      Node node1 = NodeUtil.newVarNode("", node0);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(99);
      boolean boolean0 = NodeUtil.isValidPropertyName("");
      NodeUtil.getInfoForNameNode(node0);
      boolean boolean1 = NodeUtil.isHoistedFunctionDeclaration(node1);
      assertEquals(118, node1.getType());
      assertTrue(node0.hasOneChild());
      assertEquals(122, node0.getType());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = NodeUtil.isValidPropertyName("Infinity");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(436);
      boolean boolean0 = NodeUtil.isValidPropertyName("L&|mNMT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      Node node1 = NodeUtil.newVarNode("", node0);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      NodeUtil.isSimpleOperatorType(1);
      NodeUtil.isAssign(node1);
      NodeUtil.isFunctionDeclaration(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionAnonymous(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = Node.newString("=RGB=<", 90, 90);
      Node node1 = new Node(90, node0, node0, 47, 186);
      node1.setOptionalArg(true);
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node1);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = Node.newString(92, "rsh", 92, 92);
      node0.getDirectives();
      NodeUtil.getLoopCodeBlock(node0);
      // Undeclared exception!
      try { 
        NodeUtil.isPrototypePropertyDeclaration((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setLineno(2);
      NodeUtil.precedence(31);
      NodeUtil.isFunction(node0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: NUMBER 0.0 2 of NUMBER 0.0 2
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(132);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      nodeUtil_MatchNodeType0.equals(linkedList0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      nodeUtil_MatchNodeType0.apply(node0);
      NodeUtil.isAssociative(33);
      NodeUtil.isValidPropertyName("|=w<^io");
      node0.getDirectives();
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      boolean boolean1 = NodeUtil.containsFunctionDeclaration(node0);
      assertTrue(boolean1 == boolean0);
      assertEquals(122, node0.getType());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Node node0 = new Node(65136);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      node0.setWasEmptyNode(true);
      boolean boolean0 = NodeUtil.isSimpleOperatorType((-1691));
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, (-1288));
      assertEquals(0, int0);
      
      boolean boolean1 = NodeUtil.isFunction(node0);
      assertEquals(122, node0.getType());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setLineno((-1129));
      node0.getDouble();
      Node node1 = Node.newString(2, "=RGB=<", 24, 2339);
      int int0 = NodeUtil.getNameReferenceCount(node0, "=RGB=<");
      assertEquals(0, int0);
      
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(node0);
      boolean boolean1 = NodeUtil.isControlStructure(node0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isLhs(node0, node0);
      boolean boolean3 = NodeUtil.isString(node1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = NodeUtil.isNew(node0);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = Node.newString(119, "", 119, 119);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(49);
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "N+W3s/|Tcd>KSQN2V", nodeUtil_MatchNodeType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(4);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionAnonymous(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      Node node1 = Node.newNumber((double) 1);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      boolean boolean1 = NodeUtil.isSimpleOperatorType(48);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isThis(node1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node0 = NodeUtil.newUndefinedNode();
      Node node1 = NodeUtil.newVarNode("", node0);
      Node node2 = new Node((-4901), node1, node1);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node2);
      assertEquals(118, node1.getType());
      assertTrue(node0.hasOneChild());
      assertEquals(122, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "";
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node0 = NodeUtil.newUndefinedNode();
      Node node1 = NodeUtil.newVarNode("", node0);
      Node node2 = new Node((-4901), node1, node1);
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("", linkedList0, node2, 2, 0);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(functionNode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      Node.newNumber((double) 1);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("NaN", linkedList0, node0, 32, 0);
      assertEquals(0, functionNode0.getCharno());
      assertEquals(32, functionNode0.getLineno());
      assertEquals("NaN", functionNode0.getFunctionName());
      
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(122, node0.getType());
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(63743);
      assertFalse(boolean0);
      
      String string0 = NodeUtil.opToStrNoFail(12);
      assertEquals("==", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Node node0 = Node.newNumber((-981.4762144), 65136, 65136);
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      NodeUtil.isAssociative(69);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(69);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      NodeUtil.isAssign(node0);
      NodeUtil.isExprCall(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // VOID does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      Node.newNumber((double) 1);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("NaN", linkedList0, node0, 32, 0);
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(functionNode0);
      boolean boolean1 = NodeUtil.isSwitchCase(functionNode0);
      assertEquals("NaN", functionNode0.getFunctionName());
      assertEquals(32, functionNode0.getLineno());
      assertFalse(boolean1 == boolean0);
      assertEquals(0, functionNode0.getCharno());
      
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(122, node0.getType());
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(63743);
      assertFalse(boolean2);
      
      String string0 = NodeUtil.opToStrNoFail(12);
      assertEquals("==", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      Node node1 = node0.cloneTree();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(109);
      nodeUtil_MatchNodeType0.equals(node1);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType1 = new NodeUtil.MatchNodeType(95);
      boolean boolean0 = NodeUtil.isNodeTypeReferenced(node0, 1, nodeUtil_MatchNodeType1);
      assertEquals(122, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      NodeUtil.copyNameAnnotations(node0, node0);
      String string0 = NodeUtil.opToStrNoFail(45);
      assertEquals("===", string0);
      
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertEquals(122, node0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(89);
      Node node1 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.isNodeTypeReferenced(node0, 20);
      Node node2 = NodeUtil.newQualifiedNameNode("2#2c4:SM$0D|1E.0", 20, 2);
      assertEquals(33, node2.getType());
      assertEquals(20, node2.getLineno());
      assertEquals(2, node2.getCharno());
      assertTrue(node2.isUnscopedQualifiedName());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      boolean boolean1 = NodeUtil.isSimpleOperatorType(18);
      assertTrue(boolean1);
      
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      boolean boolean2 = NodeUtil.isControlStructure(node1);
      assertEquals(122, node1.getType());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("ERROR", (Node) null);
      Node node1 = NodeUtil.newName("_", node0, "_");
      boolean boolean0 = NodeUtil.isAssignmentOp(node1);
      assertEquals(118, node0.getType());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = NodeUtil.precedence(25);
      assertEquals(12, int0);
      
      Node node0 = NodeUtil.newQualifiedNameNode("Infinity", (-1731932329), 25);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertEquals(38, node0.getType());
      assertFalse(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = (-1500);
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-1500));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=-1500> (type -1500)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(96);
      assertEquals("/=", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("LABEL", 116, 116);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        NodeUtil.getBooleanValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-literal value: NAME LABEL 116
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newString((-292), "MWV", (-292), 2826);
      Node node1 = NodeUtil.newUndefinedNode();
      node1.getAncestors();
      NodeUtil.canBeSideEffected(node1);
      NodeUtil.setDebugInformation(node0, node1, "g*");
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = (-1705);
      // Undeclared exception!
      try { 
        NodeUtil.newQualifiedNameNode((String) null, (Node) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(2405);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2405
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = NodeUtil.newUndefinedNode();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertFalse(boolean0);
      assertEquals(122, node0.getType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node0 = NodeUtil.newUndefinedNode();
      Node node1 = new Node((-4901), node0, node0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected NEW node, got VOID
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = Node.newNumber((-981.4762144), 65136, 65136);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NUMBER -981.4762144 65136 does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newString(0, "", 0, 0);
      NodeUtil.containsTypeInOuterScope(node0, 30);
      Node node1 = NodeUtil.newQualifiedNameNode("", 1195, 13);
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      NodeUtil.isEmptyBlock(node0);
      node0.setCharno((-444));
      NodeUtil.redeclareVarsInsideBranch(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(89);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      node1.getDirectives();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      NodeUtil.mayEffectMutableState(node1);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = NodeUtil.newUndefinedNode();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      boolean boolean1 = NodeUtil.isControlStructure(node0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isThis(node0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      NodeUtil.isVar(node0);
      NodeUtil.newUndefinedNode();
      node0.setLineno(1);
      try { 
        node0.getDouble();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // VOID 1 is not a number node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      boolean boolean0 = NodeUtil.isSimpleOperatorType(3477);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = Node.newNumber((-1948.07), (-978), 9);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeUtil.isPrototypeProperty(node0);
      Node node1 = NodeUtil.newExpr(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = new Node((-1), (-1), 536870912);
      node0.getDirectives();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node1 = new Node(13, node0, 1, 16);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = Node.newNumber(720.70996639959);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = Node.newString("-");
      Locale locale0 = Locale.KOREA;
      locale0.getUnicodeLocaleKeys();
      NodeUtil.isAssign(node0);
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("LABEL", 149, 149);
      NodeUtil.isGetProp(node0);
      NodeUtil.isLiteralValue(node0);
      node0.getDirectives();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      NodeUtil.isLiteralValue(node0);
      node0.getDirectives();
      Node node1 = NodeUtil.newUndefinedNode();
      NodeUtil.isGet(node1);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType(4);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = new Node((-1129), 2349, 116);
      boolean boolean0 = NodeUtil.isLabelName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber((double) 35);
      node1.setLineno(2);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("delete", linkedList0, node0, 32, 7);
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(functionNode0);
      boolean boolean1 = NodeUtil.isThis(functionNode0);
      assertFalse(boolean1 == boolean0);
      
      NodeUtil.redeclareVarsInsideBranch(functionNode0);
      assertEquals(7, functionNode0.getCharno());
      assertEquals("delete", functionNode0.getFunctionName());
      assertEquals(32, functionNode0.getLineno());
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean2 = NodeUtil.isAssociative(35);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      boolean boolean1 = NodeUtil.isThis(node0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isAssign(node0);
      assertTrue(boolean2 == boolean0);
      assertEquals(122, node0.getType());
      assertFalse(boolean2);
      
      NodeUtil.isAssign(node0);
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(122, node0.getType());
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = NodeUtil.getBooleanValue(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(96);
      nodeUtil_MatchNodeType0.equals("DIV");
      Node node0 = new Node(116);
      // Undeclared exception!
      try { 
        NodeUtil.getBooleanValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-literal value: BREAK
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("LABEL", 116, 116);
      boolean boolean0 = NodeUtil.isLatin("LABEL");
      boolean boolean1 = NodeUtil.isLiteralValue(node0);
      node0.getDirectives();
      Node node1 = Node.newString("&&");
      Locale locale0 = Locale.KOREA;
      locale0.getUnicodeLocaleKeys();
      boolean boolean2 = NodeUtil.isNameReferenced(node0, "LABEL");
      assertTrue(boolean2 == boolean0);
      assertEquals(116, node0.getLineno());
      assertEquals(116, node0.getCharno());
      
      Node node2 = NodeUtil.newName("&&", node1);
      boolean boolean3 = NodeUtil.isAssign(node2);
      assertTrue(boolean3 == boolean1);
      assertTrue(node2.isQualifiedName());
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newString("#N5J,Tl=2w1%q", 120, 86);
      Node node1 = NodeUtil.newName("#N5J,Tl=2w1%q", node0);
      Node node2 = new Node(86, node1, node1);
      boolean boolean0 = NodeUtil.isLhs(node2, node1);
      assertEquals(120, node1.getLineno());
      assertEquals(38, node1.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setLineno(2);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      boolean boolean1 = NodeUtil.isString(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString("NaN");
      NodeUtil.isGetProp(node0);
      NodeUtil.isNew(node0);
      NodeUtil.canBeSideEffected(node0);
      NodeUtil.isExprCall(node0);
      NodeUtil.copyNameAnnotations(node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // STRING NaN does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NodeUtil.newUndefinedNode();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node0 = Node.newString("4'8]~@?y*mQ,oQO9");
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      Object object0 = new Object();
      linkedList1.removeFirstOccurrence(object0);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-972));
      Object object1 = new Object();
      Object object2 = new Object();
      nodeUtil_MatchNodeType0.equals(object2);
      String string0 = NodeUtil.opToStrNoFail(10);
      assertEquals("^", string0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning("4'8]~@?y*mQ,oQO9", "4'8]~@?y*mQ,oQO9", 47, "4'8]~@?y*mQ,oQO9", 4095);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(1);
      boolean boolean1 = NodeUtil.isControlStructure(node0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isImmutableValue(node0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean0 = NodeUtil.isSimpleOperatorType(44);
      Object object0 = new Object();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      boolean boolean1 = NodeUtil.isEmptyBlock(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("");
      Node node0 = Node.newString(864, "Qhwc'~}Cb_y");
      boolean boolean1 = NodeUtil.isAnonymousFunction(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = Node.newNumber((-2249.232));
      boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected CALL node, got VOID
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = NodeUtil.newUndefinedNode();
      node0.getAncestors();
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      boolean boolean1 = NodeUtil.isExprCall(node0);
      assertFalse(boolean1);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      boolean boolean2 = NodeUtil.isFunctionObjectCall(node0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setLineno((-1129));
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      boolean boolean1 = NodeUtil.isSimpleOperatorType(725);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isCall(node0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = NodeUtil.newUndefinedNode();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      boolean boolean0 = NodeUtil.isCall(node0);
      boolean boolean1 = NodeUtil.containsCall(node0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = NodeUtil.isObjectCallMethod(node0, "NaN");
      NodeUtil.isGetProp(node0);
      boolean boolean3 = NodeUtil.isForIn(node0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      Node node1 = Node.newNumber((double) 15);
      NodeUtil.isForIn(node0);
      node1.getDirectives();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType(4);
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = Node.newString("Poe\"FbV2pNE3m &4?%L");
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, set0);
      boolean boolean1 = NodeUtil.isAssign(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      boolean boolean0 = NodeUtil.isSimpleOperatorType((-1129));
      assertFalse(boolean0);
      
      Node node0 = Node.newString((-1129), "|=", 1756, (-1129));
      boolean boolean1 = NodeUtil.isGetProp(node0);
      boolean boolean2 = NodeUtil.isImmutableValue(node0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      NodeUtil.newUndefinedNode();
      Node node0 = Node.newString(34, "", 49, 22);
      Node node1 = new Node((-4901), node0, node0);
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("", linkedList0, node1, 2, 19);
      assertEquals(2, functionNode0.getLineno());
      assertEquals(19, functionNode0.getCharno());
      assertEquals("", functionNode0.getFunctionName());
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType((-1691));
      boolean boolean1 = NodeUtil.isValidPropertyName("");
      boolean boolean2 = NodeUtil.isLiteralValue(node1);
      assertTrue(boolean2 == boolean0);
      
      node0.getDirectives();
      boolean boolean3 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      EmptyScope emptyScope0 = new EmptyScope();
      emptyScope0.getTypeOfThis();
      Node node0 = new Node(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = Node.newString("D;1~W\r7h<:E&,", 1437, 1437);
      NodeUtil.redeclareVarsInsideBranch(node0);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((byte)19);
      NodeUtil.mayEffectMutableState(node0);
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(89);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = new Node(42, node0, node0, node1);
      Node.tokenToName(100);
      Object object0 = new Object();
      boolean boolean0 = NodeUtil.isPrototypeProperty(node2);
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      boolean boolean1 = NodeUtil.isHoistedFunctionDeclaration(node1);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isStatement(node1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node.newNumber(0.0);
      Node node0 = Node.newNumber((double) 35);
      node0.setLineno(2);
      Node node1 = NodeUtil.newQualifiedNameNode("Z-u)5IKGh6=;", 30, 6);
      assertEquals(38, node1.getType());
      assertEquals(6, node1.getCharno());
      assertEquals(30, node1.getLineno());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
      assertFalse(boolean0);
      
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      String string0 = NodeUtil.opToStrNoFail(25);
      assertEquals("%", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = Node.newString("D;1~W\r7h<:E&,", 1437, 1437);
      NodeUtil.redeclareVarsInsideBranch(node0);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      boolean boolean1 = NodeUtil.isObjectCallMethod(node0, "D;1~W\r7h<:E&,");
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isImmutableValue(node0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      boolean boolean0 = NodeUtil.isThis(node0);
      boolean boolean1 = NodeUtil.getBooleanValue(node0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = NodeUtil.isLiteralValue(node0);
      Node node1 = new Node(2, node0);
      node1.getDirectives();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      boolean boolean3 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newString("bPUN", 110, 110);
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, ".?e:w%MO", ".?e:w%MO", (-2675), (-3010));
      Node node0 = Node.newNumber((double) 0);
      Node node1 = NodeUtil.newName("4'8]~@?y*mQ,oQO9", node0, ".?e:w%MO");
      NodeUtil.canBeSideEffected(node1);
      NodeUtil.isValidPropertyName("NaN");
      node1.getDirectives();
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NUMBER 0.0 does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = NodeUtil.newUndefinedNode();
      NodeUtil.canBeSideEffected(node0);
      NodeUtil.isConstantName(node0);
      NodeUtil.copyNameAnnotations(node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 8: SETNAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString("D;1~W\r7h<:E&,", 1437, 1437);
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(node0);
      boolean boolean1 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node1 = new Node(4, node0, node0);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node2 = new Node(7, node1, node1, (-1132), 47);
      boolean boolean2 = NodeUtil.isLiteralValue(node2);
      assertFalse(boolean2);
      
      node1.getDirectives();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      boolean boolean3 = NodeUtil.mayEffectMutableState(node2);
      assertFalse(boolean3 == boolean1);
      
      boolean boolean4 = NodeUtil.isSwitchCase(node0);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = new Node(89);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning((String) null, (String) null, 101, (String) null, 2);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-1));
      Node node0 = Node.newString((-1), "%$Jo@");
      boolean boolean0 = NodeUtil.isTryFinallyNode(node0, node0);
      boolean boolean1 = NodeUtil.referencesThis(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newString("Poe\"FbV2pNE3m &4?%L");
      NodeUtil.isLiteralValue(node0);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      jSTypeRegistry0.createObjectType((ObjectType) functionType0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.add((JSType) functionType0);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList1);
      NodeUtil.nodeTypeMayHaveSideEffects(node1);
      NodeUtil.isFunctionObjectApply(node0);
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(89);
      JSType[] jSTypeArray0 = new JSType[0];
      NodeUtil.newUndefinedNode();
      Object object0 = new Object();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(0);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      boolean boolean1 = NodeUtil.isPrototypeProperty(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      boolean boolean0 = NodeUtil.isGet(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = new Node(89);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      simpleErrorReporter0.warning((String) null, (String) null, 101, "zncek&w6K.", 117);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node1 = Node.newString((-3259), "=RGB=<", 1237, 127);
      Node node2 = NodeUtil.newUndefinedNode();
      node1.getAncestors();
      NodeUtil.isTryFinallyNode(node2, node2);
      node1.getJSDocInfo();
      Node node3 = Node.newString(15, "zncek&w6K.", 1, 2);
      Node node4 = new Node(8, node2, node1, node2, node3, 3, 17);
      node4.setJSDocInfo((JSDocInfo) null);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(2);
      NodeUtil.isNodeTypeReferenced(node4, 39);
      NodeUtil.mayEffectMutableState(node4);
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setLineno((-1129));
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("=RGB=<", linkedList0, node0, 21, 93);
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(functionNode0);
      boolean boolean1 = NodeUtil.isSwitchCase(functionNode0);
      assertFalse(boolean1 == boolean0);
      
      NodeUtil.redeclareVarsInsideBranch(functionNode0);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      linkedList1.removeFirstOccurrence("=RGB=<");
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "", "R3i &rN3s(${iFx", 8, 28);
      namedType0.getReferencedType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("R3i &rN3s(${iFx", namedType0);
      EnumType enumType1 = jSTypeRegistry0.createEnumType("R3i &rN3s(${iFx", enumType0);
      Set<String> set0 = enumType1.getElements();
      boolean boolean2 = NodeUtil.isValidDefineValue(node0, set0);
      LinkedList<Node> linkedList2 = new LinkedList<Node>();
      NodeUtil.newFunctionNode("Named type with empty name component", linkedList0, functionNode0, (-1362), 21);
      boolean boolean3 = NodeUtil.isCall(functionNode0);
      assertFalse(boolean3 == boolean2);
      
      NodeUtil.getInfoForNameNode(functionNode0);
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertEquals(93, functionNode0.getCharno());
      assertEquals(21, functionNode0.getLineno());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = Node.newNumber((-20.993215854090558));
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("=RGB=<", linkedList0, node0, 21, 93);
      NodeUtil.containsFunctionDeclaration(functionNode0);
      NodeUtil.isSwitchCase(functionNode0);
      NodeUtil.redeclareVarsInsideBranch(functionNode0);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      LinkedList<Node> linkedList2 = new LinkedList<Node>();
      NodeUtil.isSimpleOperatorType(17);
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionDeclaration(functionNode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = Node.newNumber(14.193576616629652);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      boolean boolean0 = NodeUtil.isSimpleOperatorType(101);
      boolean boolean1 = NodeUtil.getBooleanValue(node0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.detachChildren();
      node0.setLineno(2);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      boolean boolean0 = NodeUtil.isSimpleOperatorType(79);
      boolean boolean1 = NodeUtil.isValidPropertyName("by!|7V9nQj4uohj]");
      assertTrue(boolean1 == boolean0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      String string0 = NodeUtil.opToStrNoFail(21);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = NodeUtil.newUndefinedNode();
      node0.getAncestors();
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      boolean boolean1 = NodeUtil.isLiteralValue(node0);
      assertFalse(boolean1 == boolean0);
      
      node0.getDirectives();
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      String string0 = NodeUtil.opToStrNoFail(23);
      assertEquals("*", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isVarArgs());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      Node node1 = Node.newNumber((double) 1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertNotNull(node1);
      
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isVarArgs());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getLineno());
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(48);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isThis(node1);
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      
      boolean boolean3 = NodeUtil.isLoopStructure(node1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newString("NaN");
      NodeUtil.isGetProp(node0);
      NodeUtil.isNew(node0);
      node0.putBooleanProp(1671, false);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-1291));
      Node node1 = new Node(32, node0, node0, node0, node0, 49, 31);
      nodeUtil_MatchNodeType0.equals(node1);
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchNodeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Node.newNumber(0.0);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node0 = Node.newString("4'8]~@?y*mQ,oQO9");
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      Object object0 = new Object();
      boolean boolean0 = NodeUtil.isSimpleOperatorType(16);
      boolean boolean1 = NodeUtil.isVarDeclaration(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = Node.newString(92, "rsh", 92, 92);
      Node node1 = new Node(92, node0, (-1464), (-1));
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = Node.newString(92, "rsh", 92, 92);
      Node node1 = new Node(92, node0, (-1464), (-1));
      node1.cloneTree();
      NodeUtil.nodeTypeMayHaveSideEffects(node1);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = NodeUtil.newUndefinedNode();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence(node0);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(30);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 30: NEW
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      String string0 = "is_constant_name";
      Node node0 = Node.newNumber(639.80290536);
      Node node1 = NodeUtil.newName("is_constant_name", node0);
      Node node2 = NodeUtil.newQualifiedNameNode("com.google.common.base.CharMatcher", node1, "Infinity");
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("", linkedList0, node2, 4095, (-416));
      NodeUtil.getLoopCodeBlock(functionNode0);
      // Undeclared exception!
      try { 
        NodeUtil.getBooleanValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setLineno(43);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("=RGB=<", linkedList0, node0, 21, 93);
      NodeUtil.containsFunctionDeclaration(functionNode0);
      NodeUtil.isSwitchCase(functionNode0);
      NodeUtil.redeclareVarsInsideBranch(functionNode0);
      NodeUtil.isNodeTypeReferenced(functionNode0, (-2121));
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      node0.removeFirstChild();
      Node.newString(39, "=RGB=<", 27, 5);
      NodeUtil.getNameReferenceCount(functionNode0, "=RGB=<");
      Node node1 = null;
      try {
        node1 = new Node(1, (Node) null, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("LAB5GEL", 97, 97);
      NodeUtil.isLatin("LAB5GEL");
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(17);
      Object object0 = new Object();
      Object object1 = new Object();
      NodeUtil.isNameReferenced(node0, (String) null, nodeUtil_MatchNodeType0);
      Object object2 = new Object();
      nodeUtil_MatchNodeType0.equals("LAB5GEL");
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 1: EOL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = new Node(89);
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      Node node1 = NodeUtil.newQualifiedNameNode("Z-u)5IKGh6=", 20, 28);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      boolean boolean1 = NodeUtil.isSimpleOperatorType(18);
      assertTrue(boolean1);
      
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      boolean boolean2 = NodeUtil.isValidDefineValue(node1, set0);
      boolean boolean3 = NodeUtil.isAssign(node1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = NodeUtil.isStatementBlock(node1);
      assertEquals(28, node1.getCharno());
      assertEquals(38, node1.getType());
      assertEquals(20, node1.getLineno());
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("LABEL", 116, 116);
      boolean boolean0 = NodeUtil.isLatin("LABEL");
      boolean boolean1 = NodeUtil.isVar(node0);
      assertFalse(boolean1 == boolean0);
      
      Node node1 = NodeUtil.newUndefinedNode();
      boolean boolean2 = NodeUtil.isSwitchCase(node1);
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertEquals(116, node0.getCharno());
      assertEquals(38, node0.getType());
      assertEquals(116, node0.getLineno());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      boolean boolean3 = NodeUtil.isSimpleOperatorType(0);
      assertTrue(boolean3 == boolean2);
      
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      linkedList1.add(node1);
      String string0 = NodeUtil.opToStrNoFail(27);
      assertEquals("~", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = new Node(89);
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node2 = new Node(6, node0, node0, node1);
      NodeUtil.isVar(node2);
      Node node3 = NodeUtil.newUndefinedNode();
      node2.getAncestors();
      NodeUtil.canBeSideEffected(node3);
      NodeUtil.isExprCall(node3);
      NodeUtil.isLhs(node3, node1);
      NodeUtil.isGetProp(node3);
      NodeUtil.isFunctionAnonymous(node0);
      Node node4 = null;
      try {
        node4 = new Node(16, node2, node2, node0, node3, 138, 1883);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = Node.newString(121, "", 306, 306);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(37);
      nodeUtil_MatchNodeType0.apply(node0);
      NodeUtil.isSimpleOperatorType(112);
      // Undeclared exception!
      try { 
        NodeUtil.isValidPropertyName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.TokenStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = NodeUtil.newUndefinedNode();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("", linkedList1, node0, 39, 116);
      NodeUtil.containsFunctionDeclaration(node0);
      NodeUtil.isSwitchCase(node0);
      NodeUtil.redeclareVarsInsideBranch(functionNode0);
      LinkedList<JSType> linkedList2 = new LinkedList<JSType>();
      Node node1 = Node.newString(126, "utul:*9~|S4`n.dx", 49, 4);
      NodeUtil.isSimpleOperatorType(15);
      NodeUtil.isValidPropertyName("]}ekv{[8jGb8*<_j");
      NodeUtil.isLhs(node1, node1);
      Node node2 = NodeUtil.newName("com.google.common.collect.AbstractMultimap$WrappedCollection", node0, (String) null);
      // Undeclared exception!
      try { 
        NodeUtil.getBooleanValue(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-literal value: NAME com.google.common.collect.AbstractMultimap$WrappedCollection
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setLineno((-1129));
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      linkedList0.spliterator();
      linkedList0.addLast(node0);
      Node.newNumber((-1916.8247502176));
      // Undeclared exception!
      try { 
        NodeUtil.newFunctionNode("=RGB=<", linkedList0, node0, 21, 93);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setLineno((-1129));
      node0.getDouble();
      Node node1 = Node.newString(2, "=RGB=<", 24, 2339);
      int int0 = NodeUtil.getNameReferenceCount(node0, "=RGB=<");
      assertEquals(0, int0);
      
      NodeUtil.mayHaveSideEffects(node0);
      boolean boolean0 = NodeUtil.isSimpleOperatorType(94);
      boolean boolean1 = NodeUtil.isValidPropertyName("u3+Lcsp&GK0");
      boolean boolean2 = NodeUtil.isLiteralValue(node1);
      assertTrue(boolean2 == boolean0);
      
      node0.getDirectives();
      boolean boolean3 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(65);
      assertFalse(boolean0);
      
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setLineno((-1129));
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      linkedList0.removeFirstOccurrence("=RGB=<");
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(37);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 37: CALL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      node0.setLineno((-1129));
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("=RGB=<", linkedList0, node0, 21, 114);
      NodeUtil.containsFunctionDeclaration(functionNode0);
      NodeUtil.isSwitchCase(functionNode0);
      NodeUtil.redeclareVarsInsideBranch(functionNode0);
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      NodeUtil.isSimpleOperatorType(32);
      linkedList0.add((Node) functionNode0);
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(2497);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2497
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Node node0 = NodeUtil.newUndefinedNode();
      node0.toStringTree();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      NodeUtil.isSimpleOperatorType(8287);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      Node node1 = Node.newNumber((double) 35);
      node1.setLineno(2);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      boolean boolean1 = NodeUtil.isSimpleOperatorType(114);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isString(node0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      NodeUtil.isSimpleOperatorType(76);
      NodeUtil.isValidPropertyName("{\":/Cy_m[9qY eM");
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      NodeUtil.isLhs(node0, node0);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected NEW node, got LP
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = Node.newString((-594), "=RGB=<");
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertEquals((-594), node0.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      Node node1 = new Node(114, node0, node0, node0, node0, 17, 98);
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertEquals((-594), node0.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(17, node1.getLineno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasOneChild());
      assertTrue(node1.hasChildren());
      assertEquals(114, node1.getType());
      assertFalse(node1.isVarArgs());
      assertEquals(98, node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertNotNull(node1);
      
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertEquals((-594), node0.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(17);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = nodeUtil_MatchNodeType0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean2 = nodeUtil_MatchNodeType0.equals(object1);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(object1, object0);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(42);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 42: THIS
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(91);
      assertFalse(boolean0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean1 = NodeUtil.isAssociative((-4686));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = NodeUtil.isLatin("undefined");
      assertTrue(boolean0);
      
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(122, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertNotNull(node0);
      
      Node node1 = Node.newString("undefined");
      assertFalse(node1.equals((Object)node0));
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(40, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertNotNull(node1);
      
      Node node2 = NodeUtil.newQualifiedNameNode("undefined", 48, 431);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node2, node1);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(node2.hasChildren());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isVarArgs());
      assertEquals(431, node2.getCharno());
      assertFalse(node2.isNoSideEffectsCall());
      assertEquals(48, node2.getLineno());
      assertTrue(node2.isUnscopedQualifiedName());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasOneChild());
      assertEquals(38, node2.getType());
      assertFalse(node2.wasEmptyNode());
      assertTrue(node2.isQualifiedName());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isSyntheticBlock());
      assertNotNull(node2);
      
      boolean boolean1 = NodeUtil.isLiteralValue(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(node2, node1);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(node2.hasChildren());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isVarArgs());
      assertEquals(431, node2.getCharno());
      assertFalse(node2.isNoSideEffectsCall());
      assertEquals(48, node2.getLineno());
      assertTrue(node2.isUnscopedQualifiedName());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasOneChild());
      assertEquals(38, node2.getType());
      assertFalse(node2.wasEmptyNode());
      assertTrue(node2.isQualifiedName());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isSyntheticBlock());
      
      Set<String> set0 = node1.getDirectives();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertNotSame(node1, node2);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(40, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertNull(set0);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter1);
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(jSTypeRegistry0);
      
      // Undeclared exception!
      try { 
        Charset.forName("com.google.javascript.rhino.jstype.NoObjectType$GreatestSupertypeVisitor");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // com.google.javascript.rhino.jstype.NoObjectType$GreatestSupertypeVisitor
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      simpleErrorReporter0.warning("]}ekv{[8jGb8*<_j", "]}ekv{[8jGb8*<_j", 92, "2#2c4:SM$0D|1E.0", 633);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, linkedList0.size());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node0);
      
      Set<ObjectType> set0 = jSTypeRegistry0.getTypesWithProperty("4'8]~@?y*mQ,oQO9");
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      
      Node node1 = NodeUtil.newName("]}ekv{[8jGb8*<_j", node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, linkedList0.size());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(38, node1.getType());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isQualifiedName());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertNotNull(node1);
      
      simpleErrorReporter0.warning("2#2c4:SM$0D|1E.0", "]}ekv{[8jGb8*<_j", 78, "2#2c4:SM$0D|1E.0", 114);
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, linkedList0.size());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(38, node1.getType());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isQualifiedName());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      
      // Undeclared exception!
      try { 
        NodeUtil.isLabelName(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("LABEL", 149, 149);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(38, node0.getType());
      assertEquals(149, node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(149, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isLatin("LABEL");
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isGetProp(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(38, node0.getType());
      assertEquals(149, node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(149, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      
      boolean boolean2 = NodeUtil.isLiteralValue(node0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(38, node0.getType());
      assertEquals(149, node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(149, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      
      Set<String> set0 = node0.getDirectives();
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(38, node0.getType());
      assertEquals(149, node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(149, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertNull(set0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean3 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(38, node0.getType());
      assertEquals(149, node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(149, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      Node node1 = Node.newNumber((double) 39);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertNotNull(node1);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node1));
      
      node1.setOptionalArg(true);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.isOptionalArg());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      
      boolean boolean0 = NodeUtil.isAssign(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      
      String string0 = NodeUtil.getStringValue(node0);
      assertFalse(node0.equals((Object)node1));
      assertEquals("0", string0);
      assertNotSame(node0, node1);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertNotNull(string0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(10);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(41);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(122, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Node node1 = Node.newNumber((double) 30, 105, 8298);
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(39, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(105, node1.getLineno());
      assertFalse(node1.wasEmptyNode());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(4095, node1.getCharno());
      assertNotNull(node1);
      
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(122, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(36);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 36: SETELEM
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(132);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = new Node(132);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(132, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(27);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isValidPropertyName("HWy+({lEHy?zm");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Node node1 = new Node(44, node0, node0, node0, node0, 5, 40);
      assertFalse(node1.equals((Object)node0));
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(132, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(5, node1.getLineno());
      assertFalse(node1.wasEmptyNode());
      assertEquals(40, node1.getCharno());
      assertEquals(44, node1.getType());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertNotNull(node1);
      
      Node node2 = NodeUtil.getLoopCodeBlock(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(132, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(5, node1.getLineno());
      assertFalse(node1.wasEmptyNode());
      assertEquals(40, node1.getCharno());
      assertEquals(44, node1.getType());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertNull(node2);
      
      Node node3 = NodeUtil.getLoopCodeBlock(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(132, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(5, node1.getLineno());
      assertFalse(node1.wasEmptyNode());
      assertEquals(40, node1.getCharno());
      assertEquals(44, node1.getType());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertNull(node3);
      
      // Undeclared exception!
      try { 
        NodeUtil.isPrototypePropertyDeclaration((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("LABEL", 106, 106);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(106, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(106, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isQualifiedName());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isName(node0);
      assertTrue(boolean0);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(106, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(106, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isQualifiedName());
      
      // Undeclared exception!
      try { 
        NodeUtil.getBooleanValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-literal value: NAME LABEL 106
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("LABEL", 116, 116);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals(116, node0.getCharno());
      assertEquals(38, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isQualifiedName());
      assertEquals(116, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertFalse(boolean0);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals(116, node0.getCharno());
      assertEquals(38, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.isQualifiedName());
      assertEquals(116, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node(89);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertFalse(node0.isOptionalArg());
      assertEquals(89, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertFalse(boolean0);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertFalse(node0.isOptionalArg());
      assertEquals(89, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      
      Node node1 = NodeUtil.newQualifiedNameNode("Z-u)5IKGh6=;", 20, 28);
      assertFalse(node1.equals((Object)node0));
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.isQualifiedName());
      assertEquals(20, node1.getLineno());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertEquals(38, node1.getType());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.wasEmptyNode());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertNotNull(node1);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(18);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(node1));
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(69);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 69: REF_SPECIAL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = new Node(96, 96, 96);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertEquals(96, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(96, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(96, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("s~!MU/'0'Xf", linkedList0, node0, 15, 46);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertEquals(96, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(96, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(96, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, linkedList0.size());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertNull(functionNode0.getSourceName());
      assertEquals(15, functionNode0.getLineno());
      assertFalse(functionNode0.hasOneChild());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals(0, functionNode0.getFunctionCount());
      assertFalse(functionNode0.isVarArgs());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isQuotedString());
      assertFalse(functionNode0.isSyntheticBlock());
      assertEquals(0, functionNode0.getFunctionType());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.isQualifiedName());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals("s~!MU/'0'Xf", functionNode0.getFunctionName());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(46, functionNode0.getCharno());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertTrue(functionNode0.hasChildren());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertNotNull(functionNode0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(functionNode0);
      assertTrue(boolean0);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertEquals(96, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(96, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(96, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, linkedList0.size());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertNull(functionNode0.getSourceName());
      assertEquals(15, functionNode0.getLineno());
      assertFalse(functionNode0.hasOneChild());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals(0, functionNode0.getFunctionCount());
      assertFalse(functionNode0.isVarArgs());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isQuotedString());
      assertFalse(functionNode0.isSyntheticBlock());
      assertEquals(0, functionNode0.getFunctionType());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.isQualifiedName());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals("s~!MU/'0'Xf", functionNode0.getFunctionName());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(46, functionNode0.getCharno());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertTrue(functionNode0.hasChildren());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean1 = NodeUtil.isSwitchCase(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertEquals(96, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(96, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(96, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      
      NodeUtil.redeclareVarsInsideBranch(functionNode0);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertEquals(96, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(96, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(96, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, linkedList0.size());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertNull(functionNode0.getSourceName());
      assertEquals(15, functionNode0.getLineno());
      assertFalse(functionNode0.hasOneChild());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals(0, functionNode0.getFunctionCount());
      assertFalse(functionNode0.isVarArgs());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isQuotedString());
      assertFalse(functionNode0.isSyntheticBlock());
      assertEquals(0, functionNode0.getFunctionType());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.isQualifiedName());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals("s~!MU/'0'Xf", functionNode0.getFunctionName());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(46, functionNode0.getCharno());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertTrue(functionNode0.hasChildren());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(linkedList0.contains(node0));
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Node node1 = Node.newString(0, "%", 46, 99);
      assertFalse(node1.equals((Object)node0));
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(46, node1.getLineno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(99, node1.getCharno());
      assertEquals(0, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasMoreThanOneChild());
      assertNotNull(node1);
      
      boolean boolean2 = NodeUtil.isVarArgsFunction(functionNode0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertEquals(96, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(96, node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(96, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, linkedList0.size());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertNull(functionNode0.getSourceName());
      assertEquals(15, functionNode0.getLineno());
      assertFalse(functionNode0.hasOneChild());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals(0, functionNode0.getFunctionCount());
      assertFalse(functionNode0.isVarArgs());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isQuotedString());
      assertFalse(functionNode0.isSyntheticBlock());
      assertEquals(0, functionNode0.getFunctionType());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.isQualifiedName());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals("s~!MU/'0'Xf", functionNode0.getFunctionName());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(46, functionNode0.getCharno());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertTrue(functionNode0.hasChildren());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(linkedList0.contains(node1));
      
      boolean boolean3 = NodeUtil.isValidPropertyName("\"dK='5TR");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      Set<String> set0 = node1.getDirectives();
      assertFalse(node1.equals((Object)node0));
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(46, node1.getLineno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(99, node1.getCharno());
      assertEquals(0, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasMoreThanOneChild());
      assertNull(set0);
      
      // Undeclared exception!
      try { 
        NodeUtil.isAnonymousFunction(functionNode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(132);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Node node0 = Node.newString(1571, "HWy+({lEHy?zm", 132, (-79));
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-1), node0.getCharno());
      assertEquals(1571, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertNotNull(node0);
      
      boolean boolean1 = NodeUtil.isValidPropertyName("HWy+({lEHy?zm");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("7d;W3PKuibq%c.[~9Y", linkedList0, node0, 17, 16);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals((-1), node0.getCharno());
      assertEquals(1571, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, linkedList0.size());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals(3, functionNode0.getChildCount());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(17, functionNode0.getLineno());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertNull(functionNode0.getSourceName());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertEquals("7d;W3PKuibq%c.[~9Y", functionNode0.getFunctionName());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.wasEmptyNode());
      assertTrue(functionNode0.hasChildren());
      assertEquals(16, functionNode0.getCharno());
      assertFalse(functionNode0.isVarArgs());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertNotNull(functionNode0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean2 = NodeUtil.isFunction(functionNode0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals((-1), node0.getCharno());
      assertEquals(1571, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, linkedList0.size());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals(3, functionNode0.getChildCount());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(17, functionNode0.getLineno());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertNull(functionNode0.getSourceName());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertEquals("7d;W3PKuibq%c.[~9Y", functionNode0.getFunctionName());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.wasEmptyNode());
      assertTrue(functionNode0.hasChildren());
      assertEquals(16, functionNode0.getCharno());
      assertFalse(functionNode0.isVarArgs());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertFalse(linkedList0.contains(node0));
      
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(functionNode0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1571
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(122, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isVar(node0);
      assertFalse(boolean0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(122, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      
      Node node1 = NodeUtil.newUndefinedNode();
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVarArgs());
      assertEquals(122, node1.getType());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertNotNull(node1);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(109);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isValidPropertyName("EQUALS");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Node node2 = new Node(404);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertEquals(404, node2.getType());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasChildren());
      assertEquals((-1), node2.getLineno());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVarArgs());
      assertNotNull(node2);
      
      Set<String> set0 = node0.getDirectives();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(122, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNull(set0);
      
      Node node3 = NodeUtil.getLoopCodeBlock(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(122, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNull(node3);
      
      Node node4 = NodeUtil.getLoopCodeBlock(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.hasOneChild());
      assertEquals(404, node2.getType());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasChildren());
      assertEquals((-1), node2.getLineno());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isVarArgs());
      assertNull(node4);
      
      boolean boolean3 = NodeUtil.isPrototypePropertyDeclaration(node1);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVarArgs());
      assertEquals(122, node1.getType());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newNumber(14.193576616629652);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isLatin("2#2c4:SM$0D|1E.0");
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isVar(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      
      Node node1 = NodeUtil.newUndefinedNode();
      assertFalse(node1.equals((Object)node0));
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(122, node1.getType());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getCharno());
      assertNotNull(node1);
      
      boolean boolean2 = NodeUtil.isSwitchCase(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      
      NodeUtil.redeclareVarsInsideBranch(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(122, node1.getType());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getCharno());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean3 = NodeUtil.isSimpleOperatorType(161);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(node0));
      
      boolean boolean4 = linkedList1.add(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(122, node1.getType());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getCharno());
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(node1));
      assertFalse(linkedList1.contains(node0));
      
      String string0 = NodeUtil.opToStrNoFail(46);
      assertEquals("!==", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(42);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isValidPropertyName("EQUALS");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Node node1 = new Node(108);
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertEquals(108, node1.getType());
      assertNotNull(node1);
      
      Set<String> set0 = node0.getDirectives();
      assertFalse(node0.equals((Object)node1));
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertNull(set0);
      
      Node node2 = NodeUtil.getLoopCodeBlock(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertEquals(108, node1.getType());
      assertNull(node2);
      
      // Undeclared exception!
      try { 
        NodeUtil.getLoopCodeBlock((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertNotNull(node0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      node0.setLineno((-1129));
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(0);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      boolean boolean1 = nodeUtil_MatchNodeType0.equals("=RGB=<");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 114: DO
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = Node.newNumber((-20.993215854090558));
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertNotNull(node0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(17);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isSwitchCase(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      node0.setWasEmptyNode(false);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      
      Node node1 = Node.newNumber(1014.97990542289, 19, 86);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(39, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(19, node1.getLineno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isQuotedString());
      assertEquals(86, node1.getCharno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertNotNull(node1);
      
      node0.setLineno((-1129));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(36);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isThis(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(node0, node1);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node0);
      
      Node node1 = Node.newNumber((double) 1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasMoreThanOneChild());
      assertNotNull(node1);
      
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(63743);
      assertFalse(boolean0);
      
      String string0 = NodeUtil.opToStrNoFail(12);
      assertEquals("==", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(122, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node1 = Node.newString("4'8]~@?y*mQ,oQO9");
      assertFalse(node1.equals((Object)node0));
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals(40, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertNotNull(node1);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(38);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 38: NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.BOTH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(122, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      node0.setLineno((-1721));
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.BOTH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(122, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(106);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = nodeUtil_MatchNodeType0.equals(object0);
      assertFalse(boolean0);
      
      boolean boolean1 = nodeUtil_MatchNodeType0.equals(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.BOTH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(122, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      
      String string0 = NodeUtil.opToStrNoFail(28);
      assertEquals("+", string0);
      assertNotNull(string0);
      
      boolean boolean2 = NodeUtil.isExprCall(node0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.BOTH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(122, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node0);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node_AncestorIterable0);
      
      simpleErrorReporter0.warning("limit is negative", "limit is negative", 21, "limit is negative", 27);
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(29);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Node node1 = new Node(13, node0, node0, 1, 2);
      assertFalse(node1.equals((Object)node0));
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasOneChild());
      assertEquals(13, node1.getType());
      assertEquals(1, node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(2, node1.getCharno());
      assertNotNull(node1);
      
      boolean boolean0 = nodeUtil_MatchNodeType0.equals(simpleErrorReporter0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(116);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 116: BREAK
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = new Node(89);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(89, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(86);
      assertFalse(boolean0);
      
      node0.setLineno(1);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(89, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Node node1 = NodeUtil.getPrototypeClassName(node0);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(89, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertNull(node1);
      
      boolean boolean1 = nodeUtil_MatchNodeType0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = NodeUtil.getSourceName(node0);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(89, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        NodeUtil.isExprCall((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertNotNull(node0);
      
      node0.setLineno((-1129));
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("=RGB=<", linkedList0, node0, 21, 114);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isQuotedString());
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals(0, functionNode0.getRegexpCount());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(21, functionNode0.getLineno());
      assertFalse(functionNode0.isVarArgs());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(114, functionNode0.getCharno());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(105, functionNode0.getType());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(0, functionNode0.getFunctionCount());
      assertNull(functionNode0.getSourceName());
      assertTrue(functionNode0.hasChildren());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertNotNull(functionNode0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(functionNode0);
      assertTrue(boolean0);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isQuotedString());
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals(0, functionNode0.getRegexpCount());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(21, functionNode0.getLineno());
      assertFalse(functionNode0.isVarArgs());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(114, functionNode0.getCharno());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(105, functionNode0.getType());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(0, functionNode0.getFunctionCount());
      assertNull(functionNode0.getSourceName());
      assertTrue(functionNode0.hasChildren());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean1 = NodeUtil.isSwitchCase(functionNode0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isQuotedString());
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals(0, functionNode0.getRegexpCount());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(21, functionNode0.getLineno());
      assertFalse(functionNode0.isVarArgs());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(114, functionNode0.getCharno());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(105, functionNode0.getType());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(0, functionNode0.getFunctionCount());
      assertNull(functionNode0.getSourceName());
      assertTrue(functionNode0.hasChildren());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertFalse(linkedList0.contains(node0));
      
      NodeUtil.redeclareVarsInsideBranch(functionNode0);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isQuotedString());
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals(0, functionNode0.getRegexpCount());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(21, functionNode0.getLineno());
      assertFalse(functionNode0.isVarArgs());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(114, functionNode0.getCharno());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(105, functionNode0.getType());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(0, functionNode0.getFunctionCount());
      assertNull(functionNode0.getSourceName());
      assertTrue(functionNode0.hasChildren());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertFalse(linkedList0.contains(node0));
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(32);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = linkedList0.add((Node) functionNode0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(1, linkedList0.size());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isQuotedString());
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals(0, functionNode0.getRegexpCount());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(21, functionNode0.getLineno());
      assertFalse(functionNode0.isVarArgs());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(114, functionNode0.getCharno());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(105, functionNode0.getType());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(0, functionNode0.getFunctionCount());
      assertNull(functionNode0.getSourceName());
      assertTrue(functionNode0.hasChildren());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertFalse(linkedList0.contains(node0));
      
      String string0 = NodeUtil.opToStrNoFail(100);
      assertEquals("||", string0);
      assertNotNull(string0);
      
      boolean boolean4 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newVarNode("", node0);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(118, node1.getType());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
      assertNotNull(node1);
      
      Node node2 = new Node((-4901), node1, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(118, node1.getType());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
      assertEquals((-4901), node2.getType());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isVarArgs());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.wasEmptyNode());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isQualifiedName());
      assertTrue(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getCharno());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSyntheticBlock());
      assertNotNull(node2);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType((-1691));
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isValidPropertyName("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isLiteralValue(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(118, node1.getType());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
      assertEquals((-4901), node2.getType());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isVarArgs());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.wasEmptyNode());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isQualifiedName());
      assertTrue(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getCharno());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSyntheticBlock());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean3 = NodeUtil.isSimpleOperatorType(9);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      boolean boolean4 = NodeUtil.isValidPropertyName("");
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      boolean boolean5 = NodeUtil.isLiteralValue(node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      
      Set<String> set0 = node1.getDirectives();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(118, node1.getType());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
      assertNull(set0);
      
      boolean boolean6 = NodeUtil.isValidDefineValue(node0, (Set<String>) null);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(122, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      Node node1 = Node.newNumber((double) 1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertEquals(39, node1.getType());
      assertNotNull(node1);
      
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(122, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isUnscopedQualifiedName());
      
      String string0 = node1.toStringTree();
      assertFalse(node1.equals((Object)node0));
      assertEquals("NUMBER 1.0\n", string0);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertEquals(39, node1.getType());
      assertNotNull(string0);
      
      node0.copyInformationFrom(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(122, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertEquals(39, node1.getType());
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(120);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-1047));
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = nodeUtil_MatchNodeType0.equals(object0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(boolean0);
      assertNotSame(object0, object1);
      
      int int0 = 121;
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(121);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 121: FINALLY
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = Node.newString(81, ".?e:w%MO", 81, 81);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(81, node0.getType());
      assertEquals(81, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals(81, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertFalse(boolean0);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(81, node0.getType());
      assertEquals(81, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals(81, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      
      boolean boolean1 = NodeUtil.isThis(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(81, node0.getType());
      assertEquals(81, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals(81, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      
      boolean boolean2 = NodeUtil.isAssign(node0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(81, node0.getType());
      assertEquals(81, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals(81, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(81, node0.getType());
      assertEquals(81, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals(81, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("LABEL", 116, 116);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(116, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(38, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isQualifiedName());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(116, node0.getLineno());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isLatin("LABEL");
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isLiteralValue(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(116, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(38, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isQualifiedName());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(116, node0.getLineno());
      
      Set<String> set0 = node0.getDirectives();
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(116, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(38, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isQualifiedName());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(116, node0.getLineno());
      assertNull(set0);
      
      Node node1 = Node.newString("&&");
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertEquals(40, node1.getType());
      assertNotNull(node1);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Node node2 = new Node(96, node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(116, node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(38, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isQualifiedName());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(116, node0.getLineno());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertEquals(40, node1.getType());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isNoSideEffectsCall());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertEquals(96, node2.getType());
      assertTrue(node2.hasChildren());
      assertEquals((-1), node2.getLineno());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isUnscopedQualifiedName());
      assertNotNull(node2);
      
      String string0 = node1.toStringTree();
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals("STRING &&\n", string0);
      assertNotSame(node1, node0);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertEquals(40, node1.getType());
      assertNotNull(string0);
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(119);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = NodeUtil.isControlStructure(node1);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertNotSame(node1, node0);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertEquals(40, node1.getType());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      node0.setLineno((-1129));
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("=RGB=<", linkedList0, node0, 21, 114);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, linkedList0.size());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertTrue(functionNode0.hasChildren());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(114, functionNode0.getCharno());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertNull(functionNode0.getSourceName());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals(21, functionNode0.getLineno());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals(0, functionNode0.getFunctionCount());
      assertFalse(functionNode0.hasOneChild());
      assertFalse(functionNode0.isQuotedString());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(functionNode0.isVarArgs());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.requiresActivation());
      assertNotNull(functionNode0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(functionNode0);
      assertTrue(boolean0);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, linkedList0.size());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertTrue(functionNode0.hasChildren());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(114, functionNode0.getCharno());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertNull(functionNode0.getSourceName());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals(21, functionNode0.getLineno());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals(0, functionNode0.getFunctionCount());
      assertFalse(functionNode0.hasOneChild());
      assertFalse(functionNode0.isQuotedString());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(functionNode0.isVarArgs());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean1 = NodeUtil.isSwitchCase(functionNode0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, linkedList0.size());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertTrue(functionNode0.hasChildren());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(114, functionNode0.getCharno());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertNull(functionNode0.getSourceName());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals(21, functionNode0.getLineno());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals(0, functionNode0.getFunctionCount());
      assertFalse(functionNode0.hasOneChild());
      assertFalse(functionNode0.isQuotedString());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(functionNode0.isVarArgs());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(7);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = NodeUtil.isValidPropertyName("ENUM_NEXT");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      boolean boolean4 = NodeUtil.isLiteralValue(node0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      
      Node node1 = NodeUtil.getFnParameters(functionNode0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, linkedList0.size());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertTrue(functionNode0.hasChildren());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(114, functionNode0.getCharno());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertNull(functionNode0.getSourceName());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals(21, functionNode0.getLineno());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals(0, functionNode0.getFunctionCount());
      assertFalse(functionNode0.hasOneChild());
      assertFalse(functionNode0.isQuotedString());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(functionNode0.isVarArgs());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(83, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertEquals(114, node1.getCharno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(21, node1.getLineno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertNotNull(node1);
      assertFalse(linkedList0.contains(node0));
      
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, functionNode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: FUNCTION =RGB=< 21 of NUMBER 0.0
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(84);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = new Node(89);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(89, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
      assertEquals(83, node1.getType());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertNotNull(node1);
      assertEquals(0, jSTypeArray0.length);
      
      Node node2 = new Node(6, node0, node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(89, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
      assertEquals(83, node1.getType());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node2.isSyntheticBlock());
      assertEquals(2, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isQualifiedName());
      assertEquals(6, node2.getType());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getCharno());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isOptionalArg());
      assertNotNull(node2);
      assertEquals(0, jSTypeArray0.length);
      
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(89, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(29);
      assertTrue(boolean0);
      
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(node0));
      
      boolean boolean1 = linkedList1.add(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(89, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(node0));
      assertFalse(linkedList1.contains(node2));
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(1988);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1988
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      Node node1 = Node.newString("4'8]~@?y*mQ,oQO9");
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertFalse(node1.wasEmptyNode());
      assertEquals(40, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertNotNull(node1);
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList1.removeFirstOccurrence(object0);
      assertFalse(boolean0);
      assertEquals(0, linkedList1.size());
      
      String string0 = NodeUtil.opToStrNoFail(95);
      assertEquals("*=", string0);
      assertNotNull(string0);
      
      boolean boolean1 = NodeUtil.isEmptyBlock(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      node0.setLineno((-4116));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("", linkedList0, node0, (-582), 2);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, linkedList0.size());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertEquals(0, functionNode0.getParamCount());
      assertNull(functionNode0.getSourceName());
      assertFalse(functionNode0.isVarArgs());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals((-1), functionNode0.getCharno());
      assertFalse(functionNode0.wasEmptyNode());
      assertFalse(functionNode0.isSyntheticBlock());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.requiresActivation());
      assertEquals((-1), functionNode0.getLineno());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals(3, functionNode0.getChildCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertTrue(functionNode0.hasChildren());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals("", functionNode0.getFunctionName());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(105, functionNode0.getType());
      assertEquals(0, functionNode0.getRegexpCount());
      assertFalse(functionNode0.hasOneChild());
      assertNotNull(functionNode0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(node0);
      assertFalse(boolean0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      
      NodeUtil.redeclareVarsInsideBranch(functionNode0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, linkedList0.size());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertEquals(0, functionNode0.getParamCount());
      assertNull(functionNode0.getSourceName());
      assertFalse(functionNode0.isVarArgs());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals((-1), functionNode0.getCharno());
      assertFalse(functionNode0.wasEmptyNode());
      assertFalse(functionNode0.isSyntheticBlock());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.requiresActivation());
      assertEquals((-1), functionNode0.getLineno());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals(3, functionNode0.getChildCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertTrue(functionNode0.hasChildren());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals("", functionNode0.getFunctionName());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(105, functionNode0.getType());
      assertEquals(0, functionNode0.getRegexpCount());
      assertFalse(functionNode0.hasOneChild());
      assertFalse(linkedList0.contains(node0));
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "=RGB=<", "'x]NmW", 48, 5459);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isAllType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isFunctionType());
      assertTrue(namedType0.isNominalType());
      assertEquals("=RGB=<", namedType0.getReferenceName());
      assertFalse(namedType0.isEmptyType());
      assertFalse(namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertEquals("=RGB=<", namedType0.toString());
      assertTrue(namedType0.isNamedType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNullType());
      assertNotNull(namedType0);
      
      UnknownType unknownType0 = (UnknownType)namedType0.getReferencedType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isAllType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isFunctionType());
      assertTrue(namedType0.isNominalType());
      assertEquals("=RGB=<", namedType0.getReferenceName());
      assertFalse(namedType0.isEmptyType());
      assertFalse(namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertEquals("=RGB=<", namedType0.toString());
      assertTrue(namedType0.isNamedType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNullType());
      assertTrue(unknownType0.isObject());
      assertEquals("?", unknownType0.toString());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.isUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isEmptyType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isNullType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertNotNull(unknownType0);
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType("", namedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isAllType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isFunctionType());
      assertTrue(namedType0.isNominalType());
      assertEquals("=RGB=<", namedType0.getReferenceName());
      assertFalse(namedType0.isEmptyType());
      assertFalse(namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertEquals("=RGB=<", namedType0.toString());
      assertTrue(namedType0.isNamedType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNullType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isStringValueType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isNamedType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertTrue(enumType0.isEnumType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isInterface());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isEmptyType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isUnionType());
      assertNotNull(enumType0);
      
      EnumType enumType1 = jSTypeRegistry0.createEnumType("", namedType0);
      assertFalse(enumType1.equals((Object)enumType0));
      assertNotSame(enumType1, enumType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isAllType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isFunctionType());
      assertTrue(namedType0.isNominalType());
      assertEquals("=RGB=<", namedType0.getReferenceName());
      assertFalse(namedType0.isEmptyType());
      assertFalse(namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertEquals("=RGB=<", namedType0.toString());
      assertTrue(namedType0.isNamedType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNullType());
      assertFalse(enumType1.isCheckedUnknownType());
      assertFalse(enumType1.isEnumElementType());
      assertTrue(enumType1.isObject());
      assertFalse(enumType1.isFunctionPrototypeType());
      assertFalse(enumType1.isVoidType());
      assertFalse(enumType1.isNoType());
      assertFalse(enumType1.isStringValueType());
      assertFalse(enumType1.isNoObjectType());
      assertFalse(enumType1.isNominalType());
      assertFalse(enumType1.isEmptyType());
      assertFalse(enumType1.isNullType());
      assertFalse(enumType1.isConstructor());
      assertFalse(enumType1.isRecordType());
      assertFalse(enumType1.isUnionType());
      assertFalse(enumType1.isBooleanValueType());
      assertFalse(enumType1.isNumberValueType());
      assertFalse(enumType1.isResolved());
      assertFalse(enumType1.isOrdinaryFunction());
      assertFalse(enumType1.isFunctionType());
      assertFalse(enumType1.isInterface());
      assertTrue(enumType1.matchesStringContext());
      assertFalse(enumType1.matchesNumberContext());
      assertFalse(enumType1.isAllType());
      assertTrue(enumType1.matchesObjectContext());
      assertFalse(enumType1.isTemplateType());
      assertTrue(enumType1.isEnumType());
      assertFalse(enumType1.isNamedType());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertNotNull(enumType1);
      
      Set<String> set0 = enumType1.getElements();
      assertFalse(enumType1.equals((Object)enumType0));
      assertNotSame(enumType1, enumType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isAllType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isFunctionType());
      assertTrue(namedType0.isNominalType());
      assertEquals("=RGB=<", namedType0.getReferenceName());
      assertFalse(namedType0.isEmptyType());
      assertFalse(namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertEquals("=RGB=<", namedType0.toString());
      assertTrue(namedType0.isNamedType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNullType());
      assertFalse(enumType1.isCheckedUnknownType());
      assertFalse(enumType1.isEnumElementType());
      assertTrue(enumType1.isObject());
      assertFalse(enumType1.isFunctionPrototypeType());
      assertFalse(enumType1.isVoidType());
      assertFalse(enumType1.isNoType());
      assertFalse(enumType1.isStringValueType());
      assertFalse(enumType1.isNoObjectType());
      assertFalse(enumType1.isNominalType());
      assertFalse(enumType1.isEmptyType());
      assertFalse(enumType1.isNullType());
      assertFalse(enumType1.isConstructor());
      assertFalse(enumType1.isRecordType());
      assertFalse(enumType1.isUnionType());
      assertFalse(enumType1.isBooleanValueType());
      assertFalse(enumType1.isNumberValueType());
      assertFalse(enumType1.isResolved());
      assertFalse(enumType1.isOrdinaryFunction());
      assertFalse(enumType1.isFunctionType());
      assertFalse(enumType1.isInterface());
      assertTrue(enumType1.matchesStringContext());
      assertFalse(enumType1.matchesNumberContext());
      assertFalse(enumType1.isAllType());
      assertTrue(enumType1.matchesObjectContext());
      assertFalse(enumType1.isTemplateType());
      assertTrue(enumType1.isEnumType());
      assertFalse(enumType1.isNamedType());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("'x]NmW"));
      
      boolean boolean1 = NodeUtil.isValidDefineValue(functionNode0, set0);
      assertFalse(enumType1.equals((Object)enumType0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(enumType1, enumType0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, linkedList0.size());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertEquals(0, functionNode0.getParamCount());
      assertNull(functionNode0.getSourceName());
      assertFalse(functionNode0.isVarArgs());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals((-1), functionNode0.getCharno());
      assertFalse(functionNode0.wasEmptyNode());
      assertFalse(functionNode0.isSyntheticBlock());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.requiresActivation());
      assertEquals((-1), functionNode0.getLineno());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals(3, functionNode0.getChildCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertTrue(functionNode0.hasChildren());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals("", functionNode0.getFunctionName());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(105, functionNode0.getType());
      assertEquals(0, functionNode0.getRegexpCount());
      assertFalse(functionNode0.hasOneChild());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isAllType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isFunctionType());
      assertTrue(namedType0.isNominalType());
      assertEquals("=RGB=<", namedType0.getReferenceName());
      assertFalse(namedType0.isEmptyType());
      assertFalse(namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isBooleanValueType());
      assertEquals("=RGB=<", namedType0.toString());
      assertTrue(namedType0.isNamedType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNullType());
      assertFalse(enumType1.isCheckedUnknownType());
      assertFalse(enumType1.isEnumElementType());
      assertTrue(enumType1.isObject());
      assertFalse(enumType1.isFunctionPrototypeType());
      assertFalse(enumType1.isVoidType());
      assertFalse(enumType1.isNoType());
      assertFalse(enumType1.isStringValueType());
      assertFalse(enumType1.isNoObjectType());
      assertFalse(enumType1.isNominalType());
      assertFalse(enumType1.isEmptyType());
      assertFalse(enumType1.isNullType());
      assertFalse(enumType1.isConstructor());
      assertFalse(enumType1.isRecordType());
      assertFalse(enumType1.isUnionType());
      assertFalse(enumType1.isBooleanValueType());
      assertFalse(enumType1.isNumberValueType());
      assertFalse(enumType1.isResolved());
      assertFalse(enumType1.isOrdinaryFunction());
      assertFalse(enumType1.isFunctionType());
      assertFalse(enumType1.isInterface());
      assertTrue(enumType1.matchesStringContext());
      assertFalse(enumType1.matchesNumberContext());
      assertFalse(enumType1.isAllType());
      assertTrue(enumType1.matchesObjectContext());
      assertFalse(enumType1.isTemplateType());
      assertTrue(enumType1.isEnumType());
      assertFalse(enumType1.isNamedType());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(linkedList0.contains(node0));
      assertFalse(set0.contains("'x]NmW"));
      
      LinkedList<Node> linkedList2 = new LinkedList<Node>();
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      assertFalse(linkedList2.contains(node0));
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(117);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newQualifiedNameNode("Ej][UsD", 27, 103);
      assertFalse(node1.equals((Object)node0));
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals(103, node1.getCharno());
      assertEquals(38, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(27, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertNotNull(node1);
      
      String string0 = node0.toStringTree();
      assertFalse(node0.equals((Object)node1));
      assertEquals("LP\n", string0);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertNotNull(string0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(node1));
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(35);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isFunctionDeclaration(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals(103, node1.getCharno());
      assertEquals(38, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(27, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      
      boolean boolean2 = NodeUtil.isLiteralValue(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals(103, node1.getCharno());
      assertEquals(38, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(27, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node(89);
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertEquals(89, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(62);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 62: RETURN_RESULT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertEquals(122, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newVarNode("", node0);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertEquals(122, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(118, node1.getType());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getCharno());
      assertNotNull(node1);
      
      Node node2 = new Node((-4901), node1, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertEquals(122, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(118, node1.getType());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.wasEmptyNode());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isNoSideEffectsCall());
      assertEquals((-4901), node2.getType());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.hasChildren());
      assertNotNull(node2);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType((-1691));
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isLiteralValue(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertEquals(122, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(118, node1.getType());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.wasEmptyNode());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isNoSideEffectsCall());
      assertEquals((-4901), node2.getType());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.hasChildren());
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(42);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = NodeUtil.isValidPropertyName("");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = NodeUtil.isLiteralValue(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertEquals(122, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(118, node1.getType());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.wasEmptyNode());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isNoSideEffectsCall());
      assertEquals((-4901), node2.getType());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.hasChildren());
      
      boolean boolean5 = NodeUtil.isForIn(node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertEquals(122, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      
      Node node3 = new Node(26, node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertEquals(122, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(118, node1.getType());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.wasEmptyNode());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isNoSideEffectsCall());
      assertEquals((-4901), node2.getType());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.hasChildren());
      assertFalse(node3.isVarArgs());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isSyntheticBlock());
      assertFalse(node3.isOptionalArg());
      assertEquals(26, node3.getType());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.wasEmptyNode());
      assertEquals((-1), node3.getLineno());
      assertTrue(node3.hasChildren());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.isUnscopedQualifiedName());
      assertNotNull(node3);
      
      Node node4 = Node.newString(29, "");
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node2));
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isSyntheticBlock());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isVarArgs());
      assertFalse(node4.hasChildren());
      assertFalse(node4.wasEmptyNode());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isNoSideEffectsCall());
      assertFalse(node4.isQuotedString());
      assertFalse(node4.isOptionalArg());
      assertFalse(node4.hasOneChild());
      assertEquals(29, node4.getType());
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isUnscopedQualifiedName());
      assertFalse(node4.isQualifiedName());
      assertNotNull(node4);
      
      boolean boolean6 = NodeUtil.mayEffectMutableState(node3);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertNotSame(node3, node2);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertEquals(122, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(118, node1.getType());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.wasEmptyNode());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isNoSideEffectsCall());
      assertEquals((-4901), node2.getType());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.hasChildren());
      assertFalse(node3.isVarArgs());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isSyntheticBlock());
      assertFalse(node3.isOptionalArg());
      assertEquals(26, node3.getType());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.wasEmptyNode());
      assertEquals((-1), node3.getLineno());
      assertTrue(node3.hasChildren());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.isUnscopedQualifiedName());
      
      boolean boolean7 = NodeUtil.isValidDefineValue(node3, (Set<String>) null);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node4));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertNotSame(node3, node2);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertEquals(122, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(118, node1.getType());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.wasEmptyNode());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isNoSideEffectsCall());
      assertEquals((-4901), node2.getType());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.hasChildren());
      assertFalse(node3.isVarArgs());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isSyntheticBlock());
      assertFalse(node3.isOptionalArg());
      assertEquals(26, node3.getType());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.wasEmptyNode());
      assertEquals((-1), node3.getLineno());
      assertTrue(node3.hasChildren());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      node0.setLineno(101);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertEquals(101, node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      
      double double0 = node0.getDouble();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertEquals(101, node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      
      Set<String> set0 = node0.getDirectives();
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertEquals(101, node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertNull(set0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(26);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isThis(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertEquals(101, node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertNotNull(node0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      Node node1 = Node.newString("");
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.LEFT);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.BOTH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals(40, node1.getType());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isSyntheticBlock());
      assertNotNull(node1);
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Node.tokenToName(17);
      assertEquals("ge", string0);
      assertNotNull(string0);
      
      Node node2 = Node.newString("ge");
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node2, node1);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(40, node2.getType());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertNotNull(node2);
      
      boolean boolean0 = linkedList1.removeFirstOccurrence((Object) null);
      assertFalse(boolean0);
      assertEquals(0, linkedList1.size());
      
      String string1 = NodeUtil.opToStrNoFail(91);
      assertFalse(string1.equals((Object)string0));
      assertEquals(">>=", string1);
      assertNotNull(string1);
      
      boolean boolean1 = NodeUtil.isEmptyBlock(node1);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node1, node2);
      assertEquals(1, Node.LEFT);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.BOTH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals(40, node1.getType());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isSyntheticBlock());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertEquals(122, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newVarNode("", node0);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.BOTH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertEquals(122, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertEquals(118, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasOneChild());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertNotNull(node1);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(23);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isLiteralValue(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.BOTH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertEquals(122, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertEquals(118, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasOneChild());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 2: ENTERWITH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(122, node0.getType());
      assertNotNull(node0);
      
      Node node1 = new Node(42, node0, node0, node0, 17, 15);
      assertFalse(node1.equals((Object)node0));
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(122, node0.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertEquals(15, node1.getCharno());
      assertTrue(node1.hasOneChild());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isOptionalArg());
      assertEquals(42, node1.getType());
      assertEquals(17, node1.getLineno());
      assertFalse(node1.isQuotedString());
      assertNotNull(node1);
      
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(122, node0.getType());
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(48);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isThis(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(122, node0.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertEquals(15, node1.getCharno());
      assertTrue(node1.hasOneChild());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isOptionalArg());
      assertEquals(42, node1.getType());
      assertEquals(17, node1.getLineno());
      assertFalse(node1.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), node0.getCharno());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      node0.setLineno(3);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(0, node0.getCharno());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(3, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      
      Node node1 = new Node(27, node0, node0, node0, node0, 1, 4095);
      assertFalse(node1.equals((Object)node0));
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(0, node0.getCharno());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(3, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(4095, node1.getCharno());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(27, node1.getType());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertNotNull(node1);
      
      Node node2 = NodeUtil.getLoopCodeBlock(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(0, node0.getCharno());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(3, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(4095, node1.getCharno());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(27, node1.getType());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertNull(node2);
      
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(0, node0.getCharno());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(3, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(4095, node1.getCharno());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(27, node1.getType());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertNotNull(jSTypeRegistry0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(17);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = nodeUtil_MatchNodeType0.equals("L7HJ__^e ^T");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = NodeUtil.opToStrNoFail(17);
      assertEquals(">=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = new Node(89);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertEquals(89, node0.getType());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      node0.setLineno(89);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(89, node0.getType());
      assertEquals(0, node0.getCharno());
      assertEquals(89, node0.getLineno());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(89, node0.getType());
      assertEquals(0, node0.getCharno());
      assertEquals(89, node0.getLineno());
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(43);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isSwitchCase(node0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(89, node0.getType());
      assertEquals(0, node0.getCharno());
      assertEquals(89, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(122, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertNotNull(node0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(49);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isValidPropertyName("4'8]~@?y*mQ,oQO9");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isLiteralValue(node0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(122, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      
      boolean boolean3 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(122, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = new Node(89);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(89, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasOneChild());
      assertEquals(83, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertNotNull(node1);
      assertEquals(0, jSTypeArray0.length);
      
      Node node2 = new Node(6, node0, node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(89, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasOneChild());
      assertEquals(83, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getLineno());
      assertEquals(2, node2.getChildCount());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isOptionalArg());
      assertTrue(node2.hasMoreThanOneChild());
      assertEquals(6, node2.getType());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isNoSideEffectsCall());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isVarArgs());
      assertNotNull(node2);
      assertEquals(0, jSTypeArray0.length);
      
      boolean boolean0 = NodeUtil.isVar(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(boolean0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(89, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasOneChild());
      assertEquals(83, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getLineno());
      assertEquals(2, node2.getChildCount());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isOptionalArg());
      assertTrue(node2.hasMoreThanOneChild());
      assertEquals(6, node2.getType());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isNoSideEffectsCall());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isVarArgs());
      assertEquals(0, jSTypeArray0.length);
      
      Node node3 = NodeUtil.newUndefinedNode();
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.wasEmptyNode());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isSyntheticBlock());
      assertEquals(122, node3.getType());
      assertTrue(node3.hasChildren());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isVarArgs());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isQualifiedName());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.isQuotedString());
      assertNotNull(node3);
      
      String string0 = NodeUtil.getSourceName(node0);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(89, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNull(string0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = NodeUtil.isNameReferenced(node1, "Infinity", nodeUtil_MatchNodeType0);
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasOneChild());
      assertEquals(83, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(0, jSTypeArray0.length);
      
      Node[] nodeArray0 = new Node[1];
      Node node4 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertNotSame(node4, node2);
      assertNotSame(node4, node0);
      assertNotSame(node4, node1);
      assertNotSame(node4, node3);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals((-1), node4.getCharno());
      assertFalse(node4.isUnscopedQualifiedName());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isQuotedString());
      assertFalse(node4.isSyntheticBlock());
      assertFalse(node4.isQualifiedName());
      assertFalse(node4.isVarArgs());
      assertEquals(83, node4.getType());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isOptionalArg());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.hasChildren());
      assertFalse(node4.wasEmptyNode());
      assertFalse(node4.isNoSideEffectsCall());
      assertNotNull(node4);
      assertEquals(0, jSTypeArray0.length);
      
      nodeArray0[0] = node4;
      Node node5 = new Node(1, nodeArray0);
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node1));
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, node5.getType());
      assertFalse(node5.isUnscopedQualifiedName());
      assertEquals(0, node5.getCharno());
      assertFalse(node5.isOptionalArg());
      assertFalse(node5.isNoSideEffectsCall());
      assertFalse(node5.wasEmptyNode());
      assertTrue(node5.hasOneChild());
      assertEquals(1, node5.getChildCount());
      assertFalse(node5.isVarArgs());
      assertFalse(node5.hasMoreThanOneChild());
      assertTrue(node5.hasChildren());
      assertEquals(0, node5.getLineno());
      assertFalse(node5.isSyntheticBlock());
      assertFalse(node5.isQuotedString());
      assertFalse(node5.isQualifiedName());
      assertNotNull(node5);
      assertEquals(1, nodeArray0.length);
      
      String string1 = node5.toString(false, false, false);
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node1));
      assertEquals("EOL", string1);
      assertNotSame(node5, node0);
      assertNotSame(node5, node2);
      assertNotSame(node5, node4);
      assertNotSame(node5, node3);
      assertNotSame(node5, node1);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, node5.getType());
      assertFalse(node5.isUnscopedQualifiedName());
      assertEquals(0, node5.getCharno());
      assertFalse(node5.isOptionalArg());
      assertFalse(node5.isNoSideEffectsCall());
      assertFalse(node5.wasEmptyNode());
      assertTrue(node5.hasOneChild());
      assertEquals(1, node5.getChildCount());
      assertFalse(node5.isVarArgs());
      assertFalse(node5.hasMoreThanOneChild());
      assertTrue(node5.hasChildren());
      assertEquals(0, node5.getLineno());
      assertFalse(node5.isSyntheticBlock());
      assertFalse(node5.isQuotedString());
      assertFalse(node5.isQualifiedName());
      assertNotNull(string1);
      assertEquals(1, nodeArray0.length);
      
      boolean boolean2 = nodeUtil_MatchNodeType0.equals(node5);
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(node5, node0);
      assertNotSame(node5, node2);
      assertNotSame(node5, node4);
      assertNotSame(node5, node3);
      assertNotSame(node5, node1);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, node5.getType());
      assertFalse(node5.isUnscopedQualifiedName());
      assertEquals(0, node5.getCharno());
      assertFalse(node5.isOptionalArg());
      assertFalse(node5.isNoSideEffectsCall());
      assertFalse(node5.wasEmptyNode());
      assertTrue(node5.hasOneChild());
      assertEquals(1, node5.getChildCount());
      assertFalse(node5.isVarArgs());
      assertFalse(node5.hasMoreThanOneChild());
      assertTrue(node5.hasChildren());
      assertEquals(0, node5.getLineno());
      assertFalse(node5.isSyntheticBlock());
      assertFalse(node5.isQuotedString());
      assertFalse(node5.isQualifiedName());
      assertEquals(1, nodeArray0.length);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(108);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 108: IF
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertNotNull(node0);
      
      node0.setLineno(22);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      Node node1 = NodeUtil.newName("$\"W1", node0, "Or(");
      assertFalse(node1.equals((Object)node0));
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertEquals(0, node1.getCharno());
      assertEquals(38, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertEquals(22, node1.getLineno());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertNotNull(node1);
      
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("2#2c4:SM$0D|1E.0", linkedList0, node1, 23, 44);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertEquals(0, linkedList0.size());
      assertEquals(0, node1.getCharno());
      assertEquals(38, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertEquals(22, node1.getLineno());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(105, functionNode0.getType());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.isSyntheticBlock());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertEquals("2#2c4:SM$0D|1E.0", functionNode0.getFunctionName());
      assertFalse(functionNode0.isQuotedString());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(3, functionNode0.getChildCount());
      assertTrue(functionNode0.hasChildren());
      assertEquals(0, functionNode0.getFunctionCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertEquals(23, functionNode0.getLineno());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertNull(functionNode0.getSourceName());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertEquals(0, functionNode0.getParamCount());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals(44, functionNode0.getCharno());
      assertFalse(functionNode0.isVarArgs());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertNotNull(functionNode0);
      assertFalse(linkedList0.contains(node1));
      
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(functionNode0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertEquals(0, linkedList0.size());
      assertEquals(0, node1.getCharno());
      assertEquals(38, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertEquals(22, node1.getLineno());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(105, functionNode0.getType());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.isSyntheticBlock());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertEquals("2#2c4:SM$0D|1E.0", functionNode0.getFunctionName());
      assertFalse(functionNode0.isQuotedString());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(3, functionNode0.getChildCount());
      assertTrue(functionNode0.hasChildren());
      assertEquals(0, functionNode0.getFunctionCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertEquals(23, functionNode0.getLineno());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertNull(functionNode0.getSourceName());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertEquals(0, functionNode0.getParamCount());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals(44, functionNode0.getCharno());
      assertFalse(functionNode0.isVarArgs());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertFalse(linkedList0.contains(node1));
      
      boolean boolean1 = NodeUtil.isSwitchCase(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean2 = NodeUtil.isVarDeclaration(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertEquals(0, node1.getCharno());
      assertEquals(38, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertEquals(22, node1.getLineno());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      
      node1.setOptionalArg(false);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertEquals(0, node1.getCharno());
      assertEquals(38, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertEquals(22, node1.getLineno());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      boolean boolean3 = NodeUtil.mayEffectMutableState(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      
      boolean boolean4 = NodeUtil.isSwitchCase(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertEquals(0, node1.getCharno());
      assertEquals(38, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertEquals(22, node1.getLineno());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      
      boolean boolean5 = NodeUtil.isEmptyBlock(functionNode0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean5);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertEquals(0, linkedList0.size());
      assertEquals(0, node1.getCharno());
      assertEquals(38, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertEquals(22, node1.getLineno());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(105, functionNode0.getType());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.isSyntheticBlock());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertEquals("2#2c4:SM$0D|1E.0", functionNode0.getFunctionName());
      assertFalse(functionNode0.isQuotedString());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(3, functionNode0.getChildCount());
      assertTrue(functionNode0.hasChildren());
      assertEquals(0, functionNode0.getFunctionCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertEquals(23, functionNode0.getLineno());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertNull(functionNode0.getSourceName());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertEquals(0, functionNode0.getParamCount());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals(44, functionNode0.getCharno());
      assertFalse(functionNode0.isVarArgs());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertFalse(linkedList0.contains(node1));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, linkedList0.size());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertNotNull(node0);
      
      Node node1 = new Node(141, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, linkedList0.size());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertEquals(141, node1.getType());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertNotNull(node1);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(38);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node0, node1);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, linkedList0.size());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      Node node2 = NodeUtil.newExpr(node1);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, linkedList0.size());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertEquals(141, node1.getType());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.wasEmptyNode());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSyntheticBlock());
      assertEquals(1, node2.getChildCount());
      assertEquals((-1), node2.getLineno());
      assertEquals(130, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertTrue(node2.hasChildren());
      assertNotNull(node2);
      
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(30);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isValidPropertyName("Math");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(4134);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Set<String> set0 = node0.getDirectives();
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertNull(set0);
      
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertNull(node1);
      
      boolean boolean3 = NodeUtil.isLiteralValue(node0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      
      // Undeclared exception!
      try { 
        NodeUtil.isAnonymousFunction((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(122, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(81);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 81: LC
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      double double0 = node0.getDouble();
      assertEquals(0.0, double0, 0.01);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      
      Node node1 = Node.newString(2, "=RGB=<", 24, 2339);
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(2, node1.getType());
      assertFalse(node1.isVarArgs());
      assertEquals(2339, node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals(24, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertNotNull(node1);
      
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      
      boolean boolean1 = NodeUtil.isGetProp(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node2 = new Node(113, node0, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getLineno());
      assertEquals(113, node2.getType());
      assertTrue(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isNoSideEffectsCall());
      assertTrue(node2.hasOneChild());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isOptionalArg());
      assertNotNull(node2);
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(22);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = NodeUtil.isControlStructure(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getLineno());
      assertEquals(113, node2.getType());
      assertTrue(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isNoSideEffectsCall());
      assertTrue(node2.hasOneChild());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertNotNull(node0);
      
      node0.setLineno((-1129));
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      
      double double0 = node0.getDouble();
      assertEquals(0.0, double0, 0.01);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      
      Set<String> set0 = node0.getDirectives();
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertNull(set0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("&&", linkedList0, node0, 153, 259);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, linkedList0.size());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals(153, functionNode0.getLineno());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isVarArgs());
      assertFalse(functionNode0.isOptionalArg());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertEquals(3, functionNode0.getChildCount());
      assertTrue(functionNode0.hasChildren());
      assertEquals(259, functionNode0.getCharno());
      assertEquals(0, functionNode0.getRegexpCount());
      assertFalse(functionNode0.requiresActivation());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(functionNode0.isQuotedString());
      assertNull(functionNode0.getSourceName());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals("&&", functionNode0.getFunctionName());
      assertEquals(0, functionNode0.getFunctionCount());
      assertNotNull(functionNode0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(46);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = NodeUtil.isThis(node0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertNotNull(node0);
      
      node0.setLineno((-1129));
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("=RGB=<", linkedList0, node0, 21, 114);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(0, linkedList0.size());
      assertFalse(functionNode0.wasEmptyNode());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.requiresActivation());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertTrue(functionNode0.hasChildren());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals(114, functionNode0.getCharno());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals(0, functionNode0.getParamCount());
      assertNull(functionNode0.getSourceName());
      assertEquals(0, functionNode0.getFunctionCount());
      assertFalse(functionNode0.isVarArgs());
      assertFalse(functionNode0.isQuotedString());
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(21, functionNode0.getLineno());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertNotNull(functionNode0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(functionNode0);
      assertTrue(boolean0);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(0, linkedList0.size());
      assertFalse(functionNode0.wasEmptyNode());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.requiresActivation());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertTrue(functionNode0.hasChildren());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals(114, functionNode0.getCharno());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals(0, functionNode0.getParamCount());
      assertNull(functionNode0.getSourceName());
      assertEquals(0, functionNode0.getFunctionCount());
      assertFalse(functionNode0.isVarArgs());
      assertFalse(functionNode0.isQuotedString());
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(21, functionNode0.getLineno());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean1 = NodeUtil.isSwitchCase(functionNode0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(0, linkedList0.size());
      assertFalse(functionNode0.wasEmptyNode());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.requiresActivation());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertTrue(functionNode0.hasChildren());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals(114, functionNode0.getCharno());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals(0, functionNode0.getParamCount());
      assertNull(functionNode0.getSourceName());
      assertEquals(0, functionNode0.getFunctionCount());
      assertFalse(functionNode0.isVarArgs());
      assertFalse(functionNode0.isQuotedString());
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(21, functionNode0.getLineno());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(linkedList0.contains(node0));
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LinkedList<Node> linkedList2 = new LinkedList<Node>();
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      assertFalse(linkedList2.contains(node0));
      
      String string0 = NodeUtil.opToStrNoFail(27);
      assertEquals("~", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Node node0 = new Node(89);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(89, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(86);
      assertFalse(boolean0);
      
      Node node1 = NodeUtil.newQualifiedNameNode("[.e", 48, 18);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(2, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertEquals(18, node1.getCharno());
      assertTrue(node1.hasMoreThanOneChild());
      assertEquals(48, node1.getLineno());
      assertTrue(node1.isQualifiedName());
      assertEquals(33, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertNotNull(node1);
      
      String string0 = node1.toStringTree();
      assertFalse(node1.equals((Object)node0));
      assertEquals("GETPROP 48\n    NAME [ 48\n    STRING e 48\n", string0);
      assertNotSame(node1, node0);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(2, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertEquals(18, node1.getCharno());
      assertTrue(node1.hasMoreThanOneChild());
      assertEquals(48, node1.getLineno());
      assertTrue(node1.isQualifiedName());
      assertEquals(33, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertNotNull(string0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(33);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = node1.hasSideEffects();
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(node1, node0);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(2, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertEquals(18, node1.getCharno());
      assertTrue(node1.hasMoreThanOneChild());
      assertEquals(48, node1.getLineno());
      assertTrue(node1.isQualifiedName());
      assertEquals(33, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(node0));
      
      String string1 = NodeUtil.opToStrNoFail(13);
      assertFalse(string1.equals((Object)string0));
      assertEquals("!=", string1);
      assertNotNull(string1);
      
      boolean boolean3 = NodeUtil.isValidPropertyName("GETPROP 48\n    NAME [ 48\n    STRING e 48\n");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(83, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = jSTypeRegistry1.createRecordType(hashMap0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNullType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isEmptyType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertNotNull(recordType0);
      
      FunctionType functionType0 = (FunctionType)jSTypeRegistry1.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) recordType0, (List<JSType>) linkedList0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, linkedList0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNullType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isEmptyType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isEmptyType());
      assertEquals(0, functionType0.getMaxArguments());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNamedType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertNotNull(functionType0);
      
      JSType jSType0 = hashMap0.remove((Object) functionType0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, linkedList0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNullType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isEmptyType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isEmptyType());
      assertEquals(0, functionType0.getMaxArguments());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isNamedType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.hasCachedValues());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertNull(jSType0);
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)recordType0.getImplicitPrototype();
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNullType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isEmptyType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isEmptyType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isEnumType());
      assertNotNull(instanceObjectType0);
      
      JSType.TypePair jSType_TypePair0 = instanceObjectType0.getTypesUnderEquality(recordType0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNullType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isEmptyType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isEmptyType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isEnumType());
      assertNotNull(jSType_TypePair0);
      
      boolean boolean0 = linkedList0.removeFirstOccurrence(instanceObjectType0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(boolean0);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, linkedList0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNullType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isEmptyType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isNumberValueType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNamedType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isEmptyType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isEnumType());
      
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(node1, node0);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVarArgs());
      assertEquals(83, node1.getType());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertNotNull(node1);
      
      node1.addChildrenToBack(node0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(83, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVarArgs());
      assertEquals(83, node1.getType());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      
      boolean boolean1 = NodeUtil.isObjectLitKey(node0, node0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(node0, node1);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(83, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      
      Node node2 = NodeUtil.getLoopCodeBlock(node1);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(node1, node0);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVarArgs());
      assertEquals(83, node1.getType());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertNull(node2);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(101);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      boolean boolean2 = nodeUtil_MatchNodeType0.equals("Named type with empty name component");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = NodeUtil.opToStrNoFail(18);
      assertEquals("<<", string0);
      assertNotNull(string0);
      
      boolean boolean3 = NodeUtil.isExprCall(node0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(node0, node1);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(83, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(83, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newName("2#2c4:SM$0D|1E.0", node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(83, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertEquals(38, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.isUnscopedQualifiedName());
      assertNotNull(node1);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(node1));
      
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("2#2c4:SM$0D|1E.0", linkedList1, node0, 96, (-3074));
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(83, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, linkedList1.size());
      assertFalse(functionNode0.hasOneChild());
      assertEquals("2#2c4:SM$0D|1E.0", functionNode0.getFunctionName());
      assertFalse(functionNode0.isOptionalArg());
      assertNull(functionNode0.getSourceName());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.isVarArgs());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertFalse(functionNode0.isQuotedString());
      assertEquals((-1), functionNode0.getCharno());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(105, functionNode0.getType());
      assertEquals(0, functionNode0.getParamCount());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertEquals((-1), functionNode0.getLineno());
      assertEquals(0, functionNode0.getRegexpCount());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(3, functionNode0.getChildCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertTrue(functionNode0.hasChildren());
      assertNotNull(functionNode0);
      assertFalse(linkedList1.contains(node1));
      
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(node1);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(83, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertEquals(38, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.isUnscopedQualifiedName());
      
      boolean boolean1 = NodeUtil.isSwitchCase(node1);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(83, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertEquals(38, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.isUnscopedQualifiedName());
      
      NodeUtil.redeclareVarsInsideBranch(node1);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(83, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertEquals(38, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.isUnscopedQualifiedName());
      
      LinkedList<JSType> linkedList2 = new LinkedList<JSType>();
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      boolean boolean2 = NodeUtil.isVarDeclaration(functionNode0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(linkedList0, linkedList2);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(83, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, linkedList1.size());
      assertFalse(functionNode0.hasOneChild());
      assertEquals("2#2c4:SM$0D|1E.0", functionNode0.getFunctionName());
      assertFalse(functionNode0.isOptionalArg());
      assertNull(functionNode0.getSourceName());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.isVarArgs());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertFalse(functionNode0.isQuotedString());
      assertEquals((-1), functionNode0.getCharno());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(105, functionNode0.getType());
      assertEquals(0, functionNode0.getParamCount());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertEquals((-1), functionNode0.getLineno());
      assertEquals(0, functionNode0.getRegexpCount());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(3, functionNode0.getChildCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertTrue(functionNode0.hasChildren());
      assertFalse(linkedList1.contains(node1));
      
      boolean boolean3 = linkedList1.add(node0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(linkedList0, linkedList2);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(83, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(node1));
      assertTrue(linkedList1.contains(node0));
      
      String string0 = NodeUtil.opToStrNoFail(20);
      assertEquals(">>>", string0);
      assertNotNull(string0);
      
      boolean boolean4 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean4);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(linkedList0, linkedList2);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(83, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertEquals(38, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.isUnscopedQualifiedName());
      
      String string1 = NodeUtil.getStringValue(functionNode0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(linkedList0, linkedList2);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(83, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertEquals(1, linkedList1.size());
      assertFalse(functionNode0.hasOneChild());
      assertEquals("2#2c4:SM$0D|1E.0", functionNode0.getFunctionName());
      assertFalse(functionNode0.isOptionalArg());
      assertNull(functionNode0.getSourceName());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.isVarArgs());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertFalse(functionNode0.isQuotedString());
      assertEquals((-1), functionNode0.getCharno());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(105, functionNode0.getType());
      assertEquals(0, functionNode0.getParamCount());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertEquals((-1), functionNode0.getLineno());
      assertEquals(0, functionNode0.getRegexpCount());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(3, functionNode0.getChildCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertTrue(functionNode0.hasChildren());
      assertNull(string1);
      assertFalse(linkedList1.contains(node1));
      assertTrue(linkedList1.contains(node0));
      
      boolean boolean5 = NodeUtil.isLoopStructure(node0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean5);
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(linkedList0, linkedList2);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(83, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      Node node1 = Node.newNumber((double) 39);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      assertNotNull(node1);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      node0.setOptionalArg(true);
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      
      boolean boolean0 = NodeUtil.isAssign(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertNotSame(node1, node0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      
      String string0 = NodeUtil.getStringValue(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals("39", string0);
      assertNotSame(node1, node0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      assertNotNull(string0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(49);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = new Node(89, 89, 89);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(89, node0.getType());
      assertFalse(node0.isVarArgs());
      assertEquals(89, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(89, node0.getLineno());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newUndefinedNode();
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertEquals(122, node1.getType());
      assertNotNull(node1);
      
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(89, node0.getType());
      assertFalse(node0.isVarArgs());
      assertEquals(89, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(89, node0.getLineno());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      node1.setOptionalArg(true);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.isOptionalArg());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertEquals(122, node1.getType());
      
      boolean boolean1 = NodeUtil.isAssign(node1);
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node1, node0);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.isOptionalArg());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertEquals(122, node1.getType());
      
      String string0 = NodeUtil.getStringValue(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals("undefined", string0);
      assertNotSame(node1, node0);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.isOptionalArg());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertEquals(122, node1.getType());
      assertNotNull(string0);
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(40);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertEquals(83, node0.getType());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newQualifiedNameNode("Ej][UsD", 27, 103);
      assertFalse(node1.equals((Object)node0));
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.wasEmptyNode());
      assertEquals(38, node1.getType());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(103, node1.getCharno());
      assertEquals(27, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertNotNull(node1);
      
      String string0 = node0.toStringTree();
      assertFalse(node0.equals((Object)node1));
      assertEquals("LP\n", string0);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertEquals(83, node0.getType());
      assertNotNull(string0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      JSType jSType0 = emptyScope0.getTypeOfThis();
      assertNull(jSType0);
      
      boolean boolean0 = NodeUtil.isGet(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.wasEmptyNode());
      assertEquals(38, node1.getType());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(103, node1.getCharno());
      assertEquals(27, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      
      boolean boolean1 = NodeUtil.isValidPropertyName("m");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = NodeUtil.isLiteralValue(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertEquals(83, node0.getType());
      
      Set<String> set0 = node1.getDirectives();
      assertFalse(node1.equals((Object)node0));
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.wasEmptyNode());
      assertEquals(38, node1.getType());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(103, node1.getCharno());
      assertEquals(27, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertNull(set0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean3 = NodeUtil.isForIn(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertEquals(83, node0.getType());
      
      Node node2 = new Node(45, node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.wasEmptyNode());
      assertEquals(38, node1.getType());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(103, node1.getCharno());
      assertEquals(27, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertEquals(45, node2.getType());
      assertTrue(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.wasEmptyNode());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getLineno());
      assertNotNull(node2);
      
      boolean boolean4 = NodeUtil.mayEffectMutableState(node2);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      assertNotSame(node2, node0);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.wasEmptyNode());
      assertEquals(38, node1.getType());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(103, node1.getCharno());
      assertEquals(27, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertEquals(45, node2.getType());
      assertTrue(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.wasEmptyNode());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getLineno());
      
      boolean boolean5 = NodeUtil.isTryFinallyNode(node0, node0);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(boolean5);
      assertNotSame(node0, node2);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertEquals(83, node0.getType());
      
      boolean boolean6 = NodeUtil.isControlStructure(node1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(boolean6);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.wasEmptyNode());
      assertEquals(38, node1.getType());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(103, node1.getCharno());
      assertEquals(27, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      
      boolean boolean7 = NodeUtil.isThis(node1);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean1);
      assertTrue(boolean7 == boolean5);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(boolean7);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.wasEmptyNode());
      assertEquals(38, node1.getType());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(103, node1.getCharno());
      assertEquals(27, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      
      // Undeclared exception!
      try { 
        NodeUtil.getBooleanValue(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-literal value: NAME Ej][UsD 27
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newVarNode("", node0);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertNotNull(node1);
      
      Node node2 = new Node(101, node1, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertTrue(node2.hasOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.wasEmptyNode());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertEquals(101, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isUnscopedQualifiedName());
      assertNotNull(node2);
      
      boolean boolean0 = NodeUtil.isValidPropertyName("Ej][UsD");
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isLiteralValue(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertTrue(node2.hasOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.wasEmptyNode());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertEquals(101, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isUnscopedQualifiedName());
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(118);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = NodeUtil.isValidPropertyName("AnU0AZ.vvI");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = NodeUtil.isLiteralValue(node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals((-1), node1.getCharno());
      
      boolean boolean5 = NodeUtil.isForIn(node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals((-1), node1.getCharno());
      
      node1.putBooleanProp(9, false);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals((-1), node1.getCharno());
      
      node1.setOptionalArg(true);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertTrue(node1.isOptionalArg());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals((-1), node1.getCharno());
      
      boolean boolean6 = NodeUtil.isAssign(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertTrue(node1.isOptionalArg());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertTrue(node2.hasOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.wasEmptyNode());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertEquals(101, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isUnscopedQualifiedName());
      
      String string0 = NodeUtil.getStringValue(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertTrue(node1.isOptionalArg());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertTrue(node2.hasOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.wasEmptyNode());
      assertEquals(1, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertEquals(101, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isUnscopedQualifiedName());
      assertNull(string0);
      
      boolean boolean7 = NodeUtil.isSimpleOperatorType(2153);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      String string0 = node0.toString(true, true, true);
      assertEquals("NUMBER 0.0", string0);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertNotNull(string0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(144);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Node node1 = new Node(112, node0, node0, (-1924), 3362);
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertEquals(112, node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertNotNull(node1);
      
      boolean boolean0 = nodeUtil_MatchNodeType0.equals(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertEquals(112, node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(106);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 106: EXPORT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Node node0 = new Node(89);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.BOTH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(89, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(13);
      assertTrue(boolean0);
      
      Node node1 = NodeUtil.newQualifiedNameNode("[.e", 48, 18);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertTrue(node1.isQualifiedName());
      assertTrue(node1.hasMoreThanOneChild());
      assertEquals(48, node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isOptionalArg());
      assertEquals(18, node1.getCharno());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertEquals(2, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertEquals(33, node1.getType());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertNotNull(node1);
      
      String string0 = node1.toStringTree();
      assertFalse(node1.equals((Object)node0));
      assertEquals("GETPROP 48\n    NAME [ 48\n    STRING e 48\n", string0);
      assertNotSame(node1, node0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertTrue(node1.isQualifiedName());
      assertTrue(node1.hasMoreThanOneChild());
      assertEquals(48, node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isOptionalArg());
      assertEquals(18, node1.getCharno());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertEquals(2, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertEquals(33, node1.getType());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertNotNull(string0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      Node node2 = Node.newString(3677, "L}Bf~bc[r'^'axnw", (-2), 36);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertFalse(node2.hasChildren());
      assertFalse(node2.isSyntheticBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.hasOneChild());
      assertEquals(3677, node2.getType());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.wasEmptyNode());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertNotNull(node2);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(28);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = NodeUtil.isValidPropertyName("Infinity");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        NodeUtil.getBooleanValue(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Non-literal value: ASSIGN_BITAND
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      node0.setLineno((-4116));
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(node0);
      assertFalse(boolean0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType1 = new NodeUtil.MatchNodeType((-1161));
      assertFalse(nodeUtil_MatchNodeType1.equals((Object)nodeUtil_MatchNodeType0));
      assertNotNull(nodeUtil_MatchNodeType1);
      
      boolean boolean1 = nodeUtil_MatchNodeType1.equals(linkedList0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(nodeUtil_MatchNodeType1.equals((Object)nodeUtil_MatchNodeType0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(nodeUtil_MatchNodeType1, nodeUtil_MatchNodeType0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(83);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 83: LP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Node node0 = new Node(89);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(89, node0.getType());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertFalse(boolean0);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(89, node0.getType());
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(18);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Node node0 = Node.newString(92, "rsh", 92, 92);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(92, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(92, node0.getType());
      assertEquals(92, node0.getLineno());
      assertNotNull(node0);
      
      Node node1 = new Node(92, node0, (-1464), (-1));
      assertFalse(node1.equals((Object)node0));
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(92, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(92, node0.getType());
      assertEquals(92, node0.getLineno());
      assertEquals(92, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.wasEmptyNode());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasOneChild());
      assertNotNull(node1);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(21);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isGet(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(92, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(92, node0.getType());
      assertEquals(92, node0.getLineno());
      assertEquals(92, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.wasEmptyNode());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Node node0 = new Node(89);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertEquals(89, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = NodeUtil.isGetProp(node0);
      assertFalse(boolean0);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertEquals(89, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(48);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType1 = new NodeUtil.MatchNodeType(191);
      assertFalse(nodeUtil_MatchNodeType1.equals((Object)nodeUtil_MatchNodeType0));
      assertNotNull(nodeUtil_MatchNodeType1);
      
      boolean boolean1 = nodeUtil_MatchNodeType0.equals(object0);
      assertFalse(nodeUtil_MatchNodeType0.equals((Object)nodeUtil_MatchNodeType1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(nodeUtil_MatchNodeType0, nodeUtil_MatchNodeType1);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 48: BINDNAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = NodeUtil.newQualifiedNameNode("2#2c4:SM$0D|1E.0", 2877, 94);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(2877, node0.getLineno());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isQualifiedName());
      assertEquals(94, node0.getCharno());
      assertEquals(33, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      JSType jSType0 = node0.getJSType();
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(2877, node0.getLineno());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isQualifiedName());
      assertEquals(94, node0.getCharno());
      assertEquals(33, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isUnscopedQualifiedName());
      assertNull(jSType0);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertNotSame(simpleErrorReporter0, simpleErrorReporter1);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isFunctionType());
      assertNotNull(recordType0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(88);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected NEW node, got GETPROP
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Node node0 = NodeUtil.newQualifiedNameNode("LABEL", 116, 116);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.isOptionalArg());
      assertEquals(116, node0.getCharno());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals(38, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.isQualifiedName());
      assertEquals(116, node0.getLineno());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertFalse(boolean0);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.isOptionalArg());
      assertEquals(116, node0.getCharno());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals(38, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.isQualifiedName());
      assertEquals(116, node0.getLineno());
      
      Node node1 = NodeUtil.newUndefinedNode();
      assertFalse(node1.equals((Object)node0));
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isOptionalArg());
      assertEquals(122, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertNotNull(node1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Node node2 = Node.newString(103, "Infinity", 5, 4);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node2, node0);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isQuotedString());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.wasEmptyNode());
      assertEquals(103, node2.getType());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(4, node2.getCharno());
      assertEquals(5, node2.getLineno());
      assertFalse(node2.isVarArgs());
      assertNotNull(node2);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(6);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isValidPropertyName("Infinity");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Set<String> set0 = node2.getDirectives();
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node2, node0);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isQuotedString());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.wasEmptyNode());
      assertEquals(103, node2.getType());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(4, node2.getCharno());
      assertEquals(5, node2.getLineno());
      assertFalse(node2.isVarArgs());
      assertNull(set0);
      
      String string0 = NodeUtil.getStringValue(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals("LABEL", string0);
      assertNotSame(node0, node2);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.isOptionalArg());
      assertEquals(116, node0.getCharno());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals(38, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.isQualifiedName());
      assertEquals(116, node0.getLineno());
      assertNotNull(string0);
      
      boolean boolean3 = NodeUtil.isLoopStructure(node1);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isOptionalArg());
      assertEquals(122, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      Node node1 = Node.newNumber((double) 15);
      assertFalse(node1.equals((Object)node0));
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertNotNull(node1);
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSType jSType0 = node0.getJSType();
      assertFalse(node0.equals((Object)node1));
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertNull(jSType0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isEmptyType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isResolved());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isBooleanValueType());
      assertNotNull(recordType0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(110);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected NEW node, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      Node node1 = new Node(6);
      assertFalse(node1.equals((Object)node0));
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertFalse(node1.wasEmptyNode());
      assertEquals(6, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertNotNull(node1);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(14);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isValidPropertyName("NaN");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Node node2 = new Node(49);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isSyntheticBlock());
      assertEquals(0, node2.getChildCount());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isQuotedString());
      assertEquals(49, node2.getType());
      assertFalse(node2.isUnscopedQualifiedName());
      assertNotNull(node2);
      
      Set<String> set0 = node1.getDirectives();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertFalse(node1.wasEmptyNode());
      assertEquals(6, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertNull(set0);
      
      Node node3 = NodeUtil.getLoopCodeBlock(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isSyntheticBlock());
      assertEquals(0, node2.getChildCount());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isQuotedString());
      assertEquals(49, node2.getType());
      assertFalse(node2.isUnscopedQualifiedName());
      assertNull(node3);
      
      boolean boolean2 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertNotNull(node0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isLatin("4'8]~7?y*mQ,oQO9");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Node node1 = NodeUtil.newUndefinedNode();
      assertFalse(node1.equals((Object)node0));
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isOptionalArg());
      assertEquals(122, node1.getType());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertNotNull(node1);
      
      Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
      assertFalse(node1.equals((Object)node0));
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isOptionalArg());
      assertEquals(122, node1.getType());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertNotNull(node_AncestorIterable0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean2 = linkedList0.removeFirstOccurrence("4'8]~7?y*mQ,oQO9");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(43);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 43: FALSE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Node node0 = Node.newString(92, "rsh", 92, 92);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertEquals(92, node0.getType());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals(92, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(92, node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertNotNull(node0);
      
      Node node1 = new Node(110, node0, node0, node0, node0, 23, 41);
      assertFalse(node1.equals((Object)node0));
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertEquals(92, node0.getType());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals(92, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(92, node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals(23, node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(110, node1.getType());
      assertTrue(node1.hasChildren());
      assertEquals(41, node1.getCharno());
      assertFalse(node1.isVarArgs());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.hasOneChild());
      assertNotNull(node1);
      
      node0.addChildrenToBack(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertEquals(92, node0.getType());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(92, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(92, node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals(23, node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(110, node1.getType());
      assertTrue(node1.hasChildren());
      assertEquals(41, node1.getCharno());
      assertFalse(node1.isVarArgs());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.hasOneChild());
      
      boolean boolean0 = NodeUtil.isObjectLitKey(node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertEquals(92, node0.getType());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(92, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(92, node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals(23, node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(110, node1.getType());
      assertTrue(node1.hasChildren());
      assertEquals(41, node1.getCharno());
      assertFalse(node1.isVarArgs());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.hasOneChild());
      
      Node node2 = NodeUtil.getLoopCodeBlock(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertEquals(92, node0.getType());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(92, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(92, node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals(23, node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(110, node1.getType());
      assertTrue(node1.hasChildren());
      assertEquals(41, node1.getCharno());
      assertFalse(node1.isVarArgs());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.hasOneChild());
      assertNull(node2);
      
      Node node3 = Node.newString(65136, "Infinity", 41, 0);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertNotSame(node3, node0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node3.wasEmptyNode());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals(0, node3.getChildCount());
      assertEquals(65136, node3.getType());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.isNoSideEffectsCall());
      assertEquals(41, node3.getLineno());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.isVarArgs());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isSyntheticBlock());
      assertEquals(0, node3.getCharno());
      assertNotNull(node3);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(115);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Set<String> set0 = node1.getDirectives();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertNotSame(node0, node3);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertEquals(92, node0.getType());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(92, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(92, node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals(23, node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(110, node1.getType());
      assertTrue(node1.hasChildren());
      assertEquals(41, node1.getCharno());
      assertFalse(node1.isVarArgs());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.hasOneChild());
      assertNull(set0);
      
      Node node4 = NodeUtil.getLoopCodeBlock(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertNotSame(node0, node3);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertEquals(92, node0.getType());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(92, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(92, node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals(23, node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(110, node1.getType());
      assertTrue(node1.hasChildren());
      assertEquals(41, node1.getCharno());
      assertFalse(node1.isVarArgs());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.hasOneChild());
      assertNull(node4);
      
      boolean boolean2 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(node0, node3);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertEquals(92, node0.getType());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(92, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(92, node0.getCharno());
      assertFalse(node0.isQualifiedName());
      
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isLatin("4'8]~7?y*mQ,oQO9");
      assertTrue(boolean0);
      
      Node node1 = NodeUtil.newUndefinedNode();
      assertFalse(node1.equals((Object)node0));
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(122, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertNotNull(node1);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(9);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = NodeUtil.isNameReferenced(node1, "9da3*Ov[czLAyDF@", nodeUtil_MatchNodeType0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(122, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      boolean boolean2 = nodeUtil_MatchNodeType0.equals(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(65);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 65: GET_REF
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(12);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(792);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Node node1 = new Node(44, node0, (-1), 102);
      assertFalse(node1.equals((Object)node0));
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(44, node1.getType());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertNotNull(node1);
      
      // Undeclared exception!
      try { 
        node1.addChildToFront(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = Node.newNumber(2161.371047821);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newUndefinedNode();
      assertFalse(node1.equals((Object)node0));
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertEquals(122, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertNotNull(node1);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node2 = Node.newString("]}ekv{[8jGb8*<_j");
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertFalse(node2.wasEmptyNode());
      assertEquals((-1), node2.getCharno());
      assertEquals(40, node2.getType());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isOptionalArg());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isSyntheticBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.hasMoreThanOneChild());
      assertNotNull(node2);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertNotNull(jSTypeRegistry0);
      
      String string0 = NodeUtil.opToStrNoFail(24);
      assertEquals("/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isThis(node0);
      assertFalse(boolean0);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(node0));
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(13);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(132);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = nodeUtil_MatchNodeType0.equals(linkedList0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(62);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      Node node1 = Node.newNumber((double) 35);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertEquals(39, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertNotNull(node1);
      
      node1.setLineno(2);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(node1.isVarArgs());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertEquals(39, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      node0.setOptionalArg(true);
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      
      boolean boolean0 = NodeUtil.isAssign(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      
      String string0 = NodeUtil.getStringValue(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals("35", string0);
      assertNotSame(node1, node0);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(node1.isVarArgs());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertEquals(39, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      assertNotNull(string0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(107);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      simpleErrorReporter0.warning("]}ekv{[8jGb8*<_j", "]}ekv{[8jGb8*<_j", 92, "2#2c4:SM$0D|1E.0", 633);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(86);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType1 = new NodeUtil.MatchNodeType(100);
      assertFalse(nodeUtil_MatchNodeType1.equals((Object)nodeUtil_MatchNodeType0));
      assertNotNull(nodeUtil_MatchNodeType1);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry1, "arraylit", "i{$", (-240), 86);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isVoidType());
      assertEquals("arraylit", namedType0.getReferenceName());
      assertEquals("arraylit", namedType0.toString());
      assertFalse(namedType0.hasCachedValues());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isEmptyType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNullType());
      assertTrue(namedType0.isNamedType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isAllType());
      assertNotNull(namedType0);
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType("i{$", namedType0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isVoidType());
      assertEquals("arraylit", namedType0.getReferenceName());
      assertEquals("arraylit", namedType0.toString());
      assertFalse(namedType0.hasCachedValues());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isEmptyType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNullType());
      assertTrue(namedType0.isNamedType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isEmptyType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isRecordType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNamedType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNullType());
      assertTrue(enumType0.isObject());
      assertNotNull(enumType0);
      
      FunctionType functionType0 = enumType0.getConstructor();
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isVoidType());
      assertEquals("arraylit", namedType0.getReferenceName());
      assertEquals("arraylit", namedType0.toString());
      assertFalse(namedType0.hasCachedValues());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isEmptyType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNullType());
      assertTrue(namedType0.isNamedType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isEmptyType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isRecordType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNamedType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNullType());
      assertTrue(enumType0.isObject());
      assertNull(functionType0);
      
      FunctionType functionType1 = jSTypeRegistry1.createFunctionType((JSType) null, (List<JSType>) linkedList0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, linkedList0.size());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isConstructor());
      assertTrue(functionType1.isObject());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isCheckedUnknownType());
      assertEquals(0, functionType1.getMaxArguments());
      assertFalse(functionType1.isNamedType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isEmptyType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isNominalType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isBooleanValueType());
      assertNull(functionType1.getTemplateTypeName());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isRecordType());
      assertNotNull(functionType1);
      
      boolean boolean1 = nodeUtil_MatchNodeType1.equals(functionType1);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertFalse(nodeUtil_MatchNodeType1.equals((Object)nodeUtil_MatchNodeType0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertNotSame(nodeUtil_MatchNodeType1, nodeUtil_MatchNodeType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, linkedList0.size());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isConstructor());
      assertTrue(functionType1.isObject());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isNumberValueType());
      assertFalse(functionType1.isStringValueType());
      assertFalse(functionType1.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertFalse(functionType1.hasCachedValues());
      assertFalse(functionType1.isCheckedUnknownType());
      assertEquals(0, functionType1.getMaxArguments());
      assertFalse(functionType1.isNamedType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isEmptyType());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isNominalType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isEnumElementType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isBooleanValueType());
      assertNull(functionType1.getTemplateTypeName());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isResolved());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isRecordType());
      
      String string0 = NodeUtil.opToStrNoFail(92);
      assertEquals(">>>=", string0);
      assertNotNull(string0);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(83, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertNotNull(node0);
      
      Node node1 = new Node(76, node0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(83, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertEquals(76, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertNotNull(node1);
      
      Node node2 = Node.newString("Unknown class name", 22, 36);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.hasChildren());
      assertEquals(36, node2.getCharno());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertEquals(0, node2.getChildCount());
      assertEquals(40, node2.getType());
      assertEquals(22, node2.getLineno());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isUnscopedQualifiedName());
      assertNotNull(node2);
      
      boolean boolean2 = NodeUtil.isExprCall(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.hasChildren());
      assertEquals(36, node2.getCharno());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertEquals(0, node2.getChildCount());
      assertEquals(40, node2.getType());
      assertEquals(22, node2.getLineno());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(122, node0.getType());
      assertNotNull(node0);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(122, node0.getType());
      assertNotNull(node_AncestorIterable0);
      
      simpleErrorReporter0.warning("limit is negative", "limit is negative", 21, "limit is negative", 27);
      Node node1 = new Node(466, 1, 47);
      assertFalse(node1.equals((Object)node0));
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertEquals(47, node1.getCharno());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(1, node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertEquals(466, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertNotNull(node1);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(4095);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = nodeUtil_MatchNodeType0.equals(object1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean0);
      assertNotSame(object1, object0);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 49: THROW
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = new Node(89);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertEquals(89, node0.getType());
      assertNotNull(node0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(83, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertNotNull(node1);
      assertEquals(0, jSTypeArray0.length);
      
      EvaluatorException evaluatorException0 = simpleErrorReporter0.runtimeError("W(@jNDOY", ">>>=", 19, "W(@jNDOY", 3013);
      assertEquals(3013, evaluatorException0.columnNumber());
      assertEquals(">>>=", evaluatorException0.sourceName());
      assertEquals("W(@jNDOY", evaluatorException0.lineSource());
      assertEquals(19, evaluatorException0.lineNumber());
      assertNotNull(evaluatorException0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      SimpleErrorReporter simpleErrorReporter2 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter2.equals((Object)simpleErrorReporter0));
      assertFalse(simpleErrorReporter2.equals((Object)simpleErrorReporter1));
      assertNotNull(simpleErrorReporter2);
      
      JSTypeRegistry jSTypeRegistry2 = new JSTypeRegistry(simpleErrorReporter2);
      assertFalse(simpleErrorReporter2.equals((Object)simpleErrorReporter0));
      assertFalse(simpleErrorReporter2.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry0));
      assertFalse(jSTypeRegistry2.equals((Object)jSTypeRegistry1));
      assertNotNull(jSTypeRegistry2);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-4096));
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertEquals(89, node0.getType());
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(33);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 33: GETPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      simpleErrorReporter0.warning("]}ekv{[8jGb8*<_j", "]}ekv{[8jGb8*<_j", 92, "2#2c4:SM$0D|1E.0", 633);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(86);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType1 = new NodeUtil.MatchNodeType(100);
      assertFalse(nodeUtil_MatchNodeType1.equals((Object)nodeUtil_MatchNodeType0));
      assertNotNull(nodeUtil_MatchNodeType1);
      
      Node node0 = Node.newString("NaN");
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertEquals(40, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertNotNull(node0);
      
      boolean boolean1 = linkedList0.removeFirstOccurrence((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      
      String string0 = NodeUtil.opToStrNoFail(22);
      assertEquals("-", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertNotNull(node0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      String string0 = node0.toString(true, true, true);
      assertEquals("NUMBER 0.0", string0);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertNotNull(string0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(144);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Set<String> set0 = node0.getDirectives();
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertNull(set0);
      
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      
      node0.putBooleanProp(112, false);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      
      Node node1 = new Node(0, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasChildren());
      assertEquals(0, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertNotNull(node1);
      
      boolean boolean1 = NodeUtil.isAssign(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasChildren());
      assertEquals(0, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      
      String string1 = NodeUtil.getStringValue(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasChildren());
      assertEquals(0, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertNull(string1);
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(78);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      node0.setLineno((-1129));
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      node0.setLineno(120);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(120, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(24);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      boolean boolean0 = nodeUtil_MatchNodeType0.equals((Object) null);
      assertFalse(boolean0);
      
      String string0 = NodeUtil.opToStrNoFail(93);
      assertEquals("+=", string0);
      assertNotNull(string0);
      
      boolean boolean1 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(120, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      Node node1 = Node.newString(49, "wnSS;Ar1aT{r! lyCN", 0, 1647);
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(49, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(1647, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertNotNull(node1);
      
      Node node2 = Node.newString(".?e:w%MO", 126, 47);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node2, node1);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, node2.getType());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isSyntheticBlock());
      assertEquals(126, node2.getLineno());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isOptionalArg());
      assertEquals(47, node2.getCharno());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertNotNull(node2);
      
      String string0 = node0.checkTreeEquals(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals("Node tree inequality:\nTree1:\nLP\n\n\nTree2:\nSTRING .?e:w%MO 126\n", string0);
      assertNotSame(node2, node1);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(40, node2.getType());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isSyntheticBlock());
      assertEquals(126, node2.getLineno());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isOptionalArg());
      assertEquals(47, node2.getCharno());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertNotNull(string0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(2274);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = NodeUtil.getBooleanValue(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertTrue(boolean0);
      assertNotSame(node2, node1);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, node2.getType());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isSyntheticBlock());
      assertEquals(126, node2.getLineno());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isOptionalArg());
      assertEquals(47, node2.getCharno());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      
      boolean boolean1 = NodeUtil.containsCall(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      
      Node node3 = Node.newNumber((double) 4);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node3.isUnscopedQualifiedName());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.isQualifiedName());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isSyntheticBlock());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isVarArgs());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.hasChildren());
      assertFalse(node3.wasEmptyNode());
      assertEquals(39, node3.getType());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.hasOneChild());
      assertNotNull(node3);
      
      boolean boolean2 = NodeUtil.isCall(node3);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node3.isUnscopedQualifiedName());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.isQualifiedName());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isSyntheticBlock());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isVarArgs());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.hasChildren());
      assertFalse(node3.wasEmptyNode());
      assertEquals(39, node3.getType());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.hasOneChild());
      
      boolean boolean3 = NodeUtil.isObjectLitKey(node3, node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals(83, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node3.isUnscopedQualifiedName());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.isQualifiedName());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isSyntheticBlock());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isVarArgs());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.hasChildren());
      assertFalse(node3.wasEmptyNode());
      assertEquals(39, node3.getType());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Node node0 = Node.newString(92, "rsh", 92, 92);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(92, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(92, node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasOneChild());
      assertEquals(92, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      Node node1 = new Node(92, node0, (-1464), (-1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(92, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(92, node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasOneChild());
      assertEquals(92, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertEquals(92, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertNotNull(node1);
      
      boolean boolean0 = NodeUtil.isString(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(92, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(92, node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasOneChild());
      assertEquals(92, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(111);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      Node node1 = new Node(6);
      assertFalse(node1.equals((Object)node0));
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertEquals(6, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertNotNull(node1);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(14);
      assertTrue(boolean0);
      
      String string0 = "NaN";
      boolean boolean1 = NodeUtil.isValidPropertyName("NaN");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Node node2 = new Node(49);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isVarArgs());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertEquals(49, node2.getType());
      assertNotNull(node2);
      
      Set<String> set0 = node1.getDirectives();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertEquals(6, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertNull(set0);
      
      Node node3 = Node.newString("NaN");
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(node3.hasMoreThanOneChild());
      assertEquals(40, node3.getType());
      assertFalse(node3.isSyntheticBlock());
      assertFalse(node3.wasEmptyNode());
      assertFalse(node3.isQualifiedName());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isVarArgs());
      assertEquals((-1), node3.getCharno());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.hasOneChild());
      assertNotNull(node3);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Node node4 = NodeUtil.getLoopCodeBlock(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node3));
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isVarArgs());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertEquals(49, node2.getType());
      assertNull(node4);
      
      boolean boolean2 = NodeUtil.isValidDefineValue(node1, (Set<String>) null);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertEquals(6, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      
      String string1 = Node.tokenToName(29);
      assertFalse(string1.equals((Object)string0));
      assertEquals("neg", string1);
      assertNotNull(string1);
      
      boolean boolean3 = NodeUtil.isAssign(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node3));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isVarArgs());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertEquals(49, node2.getType());
      
      String string2 = NodeUtil.opToStr(87);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("|=", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        NodeUtil.isExpressionNode((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Node node0 = Node.newString(92, "rsh", 92, 92);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertEquals(92, node0.getCharno());
      assertEquals(92, node0.getType());
      assertEquals(92, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(24);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(122, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      boolean boolean0 = jSTypeRegistry0.isForwardDeclaredType("`/");
      assertFalse(boolean0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      LinkedHashSet<JSType> linkedHashSet1 = new LinkedHashSet<JSType>(linkedHashSet0);
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertNotNull(linkedHashSet1);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>(linkedHashSet1);
      assertTrue(linkedHashSet0.equals((Object)linkedHashSet1));
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertTrue(linkedHashSet0.equals((Object)linkedHashSet1));
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(linkedHashSet0, linkedHashSet1);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertNotSame(node1, node0);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertEquals(0, linkedList0.size());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(83, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertNotNull(node1);
      
      String string0 = node0.toStringTree();
      assertFalse(node0.equals((Object)node1));
      assertEquals("VOID\n    NUMBER 0.0\n", string0);
      assertNotSame(node0, node1);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(122, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertNotNull(string0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(34);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isControlStructure(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(node0, node1);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(122, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      
      boolean boolean3 = NodeUtil.isImmutableValue(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertNotSame(node0, node1);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(122, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      simpleErrorReporter0.warning("]}ekv{[8jGb8*<_j", "]}ekv{[8jGb8*<_j", 92, "2#2c4:SM$0D|1E.0", 633);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Node node0 = new Node(133, 1677, 633);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(1677, node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertEquals(633, node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(133, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertNotNull(node0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(121);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      Node node1 = Node.newNumber((double) 15);
      assertFalse(node1.equals((Object)node0));
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertNotNull(node1);
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSType jSType0 = node0.getJSType();
      assertFalse(node0.equals((Object)node1));
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertNull(jSType0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isEmptyType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoObjectType());
      assertNotNull(recordType0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node2, node0);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isVarArgs());
      assertEquals(83, node2.getType());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSyntheticBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isQualifiedName());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.hasOneChild());
      assertNotNull(node2);
      
      node0.addChildrenToBack(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals(2, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(0, linkedList0.size());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isVarArgs());
      assertEquals(83, node2.getType());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSyntheticBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isQualifiedName());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.hasOneChild());
      
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node2, node0);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isVarArgs());
      assertEquals(83, node2.getType());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSyntheticBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isQualifiedName());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.hasOneChild());
      assertNull(jSDocInfo0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Node node3 = Node.newNumber((-683.8180597939763), 2, 32);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertNotSame(node3, node1);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertFalse(node3.isVarArgs());
      assertEquals(2, node3.getLineno());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isNoSideEffectsCall());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.hasOneChild());
      assertEquals(32, node3.getCharno());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.wasEmptyNode());
      assertEquals(39, node3.getType());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isSyntheticBlock());
      assertNotNull(node3);
      
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(boolean0);
      assertNotSame(node0, node2);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals(2, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      
      String string0 = NodeUtil.opToStrNoFail(26);
      assertEquals("!", string0);
      assertNotNull(string0);
      
      boolean boolean1 = NodeUtil.isString(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(boolean1);
      assertNotSame(node0, node2);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals(2, node0.getChildCount());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      node0.setLineno((-1129));
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      node0.setLineno(120);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(120, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(12);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      boolean boolean0 = nodeUtil_MatchNodeType0.equals(node0);
      assertFalse(boolean0);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(120, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      
      String string0 = NodeUtil.opToStrNoFail(14);
      assertEquals("<", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertNotNull(node0);
      
      node0.setLineno((-1129));
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertFalse(boolean0);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      
      boolean boolean1 = NodeUtil.isExprCall(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      
      NodeUtil.copyNameAnnotations(node0, node0);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      
      String string0 = NodeUtil.opToStrNoFail(88);
      assertEquals("^=", string0);
      assertNotNull(string0);
      
      boolean boolean2 = NodeUtil.isAssign(node0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertNotNull(node0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Node node1 = Node.newNumber(0.0, 23, 82);
      assertFalse(node1.equals((Object)node0));
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertFalse(node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(23, node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOptionalArg());
      assertEquals(82, node1.getCharno());
      assertNotNull(node1);
      
      boolean boolean0 = NodeUtil.isVarDeclaration(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(75);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 75: REF_NAME
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newVarNode("", node0);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertEquals(118, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertNotNull(node1);
      
      boolean boolean0 = NodeUtil.isLiteralValue(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(122, node0.getType());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertEquals(118, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(21);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = NodeUtil.isValidPropertyName("");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(41);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 41: NULL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(122, node0.getType());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(122, node0.getType());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertNotNull(node_AncestorIterable0);
      
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(122, node0.getType());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      
      boolean boolean1 = NodeUtil.isLhs(node0, node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(122, node0.getType());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      
      boolean boolean2 = NodeUtil.isAssociative(2288);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Node node1 = Node.newString("|", 47, 6);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertEquals(40, node1.getType());
      assertEquals(47, node1.getLineno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(6, node1.getCharno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertNotNull(node1);
      
      boolean boolean3 = NodeUtil.isObjectLitKey(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(122, node0.getType());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertEquals(40, node1.getType());
      assertEquals(47, node1.getLineno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(6, node1.getCharno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      
      boolean boolean4 = NodeUtil.isHoistedFunctionDeclaration(node1);
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertEquals(40, node1.getType());
      assertEquals(47, node1.getLineno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(6, node1.getCharno());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      simpleErrorReporter0.warning("GXQ0r7YZ1_^E;bg@", "===", 83, "===", 43);
      JSType[] jSTypeArray0 = new JSType[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals(122, node0.getType());
      assertNotNull(node0);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(115);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 115: FOR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = NodeUtil.isLabelName((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>(linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(80);
      assertFalse(boolean0);
      
      Node node0 = new Node(117, 117, (-2303));
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertEquals(117, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Node node1 = new Node(1437, node0, node0, node0, node0, 21, (-3059));
      assertFalse(node1.equals((Object)node0));
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertEquals(117, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1437, node1.getType());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOptionalArg());
      assertNotNull(node1);
      
      boolean boolean2 = NodeUtil.isVarDeclaration(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertEquals(117, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1437, node1.getType());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(132);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = nodeUtil_MatchNodeType0.equals(linkedList0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 120: CATCH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      node0.setLineno((-1129));
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("=RGB=<", linkedList0, node0, 21, 93);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(1, Node.LEFT);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, linkedList0.size());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(0, functionNode0.getParamCount());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertFalse(functionNode0.isVarArgs());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(0, functionNode0.getRegexpCount());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(21, functionNode0.getLineno());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertEquals(0, functionNode0.getFunctionType());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertTrue(functionNode0.hasChildren());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.requiresActivation());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(93, functionNode0.getCharno());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isOptionalArg());
      assertNull(functionNode0.getSourceName());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertNotNull(functionNode0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(functionNode0);
      assertTrue(boolean0);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(1, Node.LEFT);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, linkedList0.size());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(0, functionNode0.getParamCount());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertFalse(functionNode0.isVarArgs());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(0, functionNode0.getRegexpCount());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(21, functionNode0.getLineno());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertEquals(0, functionNode0.getFunctionType());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertTrue(functionNode0.hasChildren());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.requiresActivation());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(93, functionNode0.getCharno());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isOptionalArg());
      assertNull(functionNode0.getSourceName());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean1 = NodeUtil.isSwitchCase(functionNode0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(1, Node.LEFT);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, linkedList0.size());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(0, functionNode0.getParamCount());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertFalse(functionNode0.isVarArgs());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(0, functionNode0.getRegexpCount());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(21, functionNode0.getLineno());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertEquals(0, functionNode0.getFunctionType());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertTrue(functionNode0.hasChildren());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.requiresActivation());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(93, functionNode0.getCharno());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isOptionalArg());
      assertNull(functionNode0.getSourceName());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      NodeUtil.redeclareVarsInsideBranch(functionNode0);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(1, Node.LEFT);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, linkedList0.size());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(0, functionNode0.getParamCount());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertFalse(functionNode0.isVarArgs());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(0, functionNode0.getRegexpCount());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(21, functionNode0.getLineno());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertEquals(0, functionNode0.getFunctionType());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertTrue(functionNode0.hasChildren());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.requiresActivation());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(93, functionNode0.getCharno());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isOptionalArg());
      assertNull(functionNode0.getSourceName());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertFalse(linkedList0.contains(node0));
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      LinkedList<JSType> linkedList2 = new LinkedList<JSType>();
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(31);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 31: DELPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(103);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = nodeUtil_MatchNodeType0.equals((Object) null);
      assertFalse(boolean0);
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      assertNotNull(node0);
      
      boolean boolean1 = nodeUtil_MatchNodeType0.apply(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(103);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = NodeUtil.isValidPropertyName("|=w<^io");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = NodeUtil.isLiteralValue(node0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
      
      boolean boolean5 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(83, node0.getType());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = new Node(89);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(89, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSType[] jSTypeArray0 = new JSType[0];
      Node node1 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertEquals(83, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertNotNull(node1);
      assertEquals(0, jSTypeArray0.length);
      
      Node node2 = new Node(9, node0, node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(89, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertEquals(83, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertEquals(2, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.wasEmptyNode());
      assertEquals(9, node2.getType());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertTrue(node2.hasMoreThanOneChild());
      assertNotNull(node2);
      assertEquals(0, jSTypeArray0.length);
      
      boolean boolean0 = NodeUtil.isVar(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(boolean0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(89, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertEquals(83, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertEquals(2, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.wasEmptyNode());
      assertEquals(9, node2.getType());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertTrue(node2.hasMoreThanOneChild());
      assertEquals(0, jSTypeArray0.length);
      
      Node node3 = NodeUtil.newUndefinedNode();
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node3.isUnscopedQualifiedName());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.wasEmptyNode());
      assertTrue(node3.hasOneChild());
      assertEquals(1, node3.getChildCount());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isVarArgs());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isSyntheticBlock());
      assertEquals((-1), node3.getLineno());
      assertEquals(122, node3.getType());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.isQualifiedName());
      assertNotNull(node3);
      
      Node node4 = NodeUtil.newQualifiedNameNode("T$6r}SJ![+?)KC%w]M", 1002, 101);
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertFalse(node4.isVarArgs());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isNoSideEffectsCall());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isQuotedString());
      assertTrue(node4.isQualifiedName());
      assertEquals(1002, node4.getLineno());
      assertFalse(node4.isOptionalArg());
      assertTrue(node4.isUnscopedQualifiedName());
      assertFalse(node4.wasEmptyNode());
      assertEquals(38, node4.getType());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isSyntheticBlock());
      assertEquals(101, node4.getCharno());
      assertNotNull(node4);
      
      boolean boolean1 = NodeUtil.isCall(node1);
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertEquals(83, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, jSTypeArray0.length);
      
      Node node5 = Node.newString("&&");
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node1));
      assertNotSame(node5, node4);
      assertEquals(0, Node.BOTH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertFalse(node5.hasMoreThanOneChild());
      assertEquals(40, node5.getType());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isVarArgs());
      assertFalse(node5.hasChildren());
      assertFalse(node5.wasEmptyNode());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isNoSideEffectsCall());
      assertFalse(node5.isQuotedString());
      assertFalse(node5.isOptionalArg());
      assertFalse(node5.hasOneChild());
      assertEquals((-1), node5.getCharno());
      assertFalse(node5.isUnscopedQualifiedName());
      assertFalse(node5.isSyntheticBlock());
      assertFalse(node5.isQualifiedName());
      assertNotNull(node5);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("T$6r}SJ![+?)KC%w]M"));
      
      boolean boolean2 = NodeUtil.isValidDefineValue(node2, set0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node5));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node3);
      assertNotSame(node2, node0);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(89, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertEquals(83, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertEquals(2, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.wasEmptyNode());
      assertEquals(9, node2.getType());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertTrue(node2.hasMoreThanOneChild());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("T$6r}SJ![+?)KC%w]M"));
      assertEquals(0, jSTypeArray0.length);
      
      boolean boolean3 = NodeUtil.isAssign(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node4));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node5));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node3);
      assertNotSame(node2, node0);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(89, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertEquals(83, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertEquals(2, node2.getChildCount());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.wasEmptyNode());
      assertEquals(9, node2.getType());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertTrue(node2.hasMoreThanOneChild());
      assertEquals(0, jSTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Node node0 = new Node(89);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(89, node0.getType());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(86);
      assertFalse(boolean0);
      
      Node node1 = NodeUtil.newQualifiedNameNode("[.e", 48, 18);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertEquals(33, node1.getType());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.isQualifiedName());
      assertEquals(2, node1.getChildCount());
      assertEquals(48, node1.getLineno());
      assertFalse(node1.hasOneChild());
      assertEquals(18, node1.getCharno());
      assertTrue(node1.isUnscopedQualifiedName());
      assertNotNull(node1);
      
      String string0 = node1.toStringTree();
      assertFalse(node1.equals((Object)node0));
      assertEquals("GETPROP 48\n    NAME [ 48\n    STRING e 48\n", string0);
      assertNotSame(node1, node0);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertEquals(33, node1.getType());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.isQualifiedName());
      assertEquals(2, node1.getChildCount());
      assertEquals(48, node1.getLineno());
      assertFalse(node1.hasOneChild());
      assertEquals(18, node1.getCharno());
      assertTrue(node1.isUnscopedQualifiedName());
      assertNotNull(string0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node1));
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(33);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = NodeUtil.isFunctionDeclaration(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(node0, node1);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(89, node0.getType());
      
      boolean boolean3 = NodeUtil.isLiteralValue(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertNotSame(node0, node1);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(89, node0.getType());
      
      NodeUtil.redeclareVarsInsideBranch(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertEquals(33, node1.getType());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.isQualifiedName());
      assertEquals(2, node1.getChildCount());
      assertEquals(48, node1.getLineno());
      assertFalse(node1.hasOneChild());
      assertEquals(18, node1.getCharno());
      assertTrue(node1.isUnscopedQualifiedName());
      
      Node node2 = NodeUtil.getPrototypeClassName(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertEquals(33, node1.getType());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.isQualifiedName());
      assertEquals(2, node1.getChildCount());
      assertEquals(48, node1.getLineno());
      assertFalse(node1.hasOneChild());
      assertEquals(18, node1.getCharno());
      assertTrue(node1.isUnscopedQualifiedName());
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node0 = Node.newString("4'8]~@?y*mQ,oQO9");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList1.removeFirstOccurrence(object0);
      assertFalse(boolean0);
      assertEquals(0, linkedList1.size());
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-972));
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = nodeUtil_MatchNodeType0.equals(object1);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(object1, object0);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      String string0 = NodeUtil.opToStrNoFail(101);
      assertEquals("&&", string0);
      assertNotNull(string0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string1 = NodeUtil.opToStrNoFail(16);
      assertFalse(string1.equals((Object)string0));
      assertEquals(">", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int int0 = 92;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(92);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Node node0 = null;
      Node node1 = null;
      try {
        node1 = new Node(125, (Node) null, 307, (-986));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      String string0 = node0.toString(true, true, true);
      assertEquals("NUMBER 0.0", string0);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(string0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(2);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      boolean boolean0 = nodeUtil_MatchNodeType0.equals(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(boolean0);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(118);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 118: VAR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = new Node(89);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(89, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newUndefinedNode();
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-1), node1.getCharno());
      assertEquals(122, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertNotNull(node1);
      
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(89, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      
      boolean boolean1 = NodeUtil.containsFunctionDeclaration(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node0, node1);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(89, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      
      boolean boolean2 = NodeUtil.isSwitchCase(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(node0, node1);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(89, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      
      NodeUtil.redeclareVarsInsideBranch(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-1), node1.getCharno());
      assertEquals(122, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean3 = NodeUtil.isSimpleOperatorType(19);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(node0));
      
      boolean boolean4 = linkedList1.add(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      assertNotSame(node0, node1);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(89, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(node1));
      assertTrue(linkedList1.contains(node0));
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(2846);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 2846
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Node node0 = new Node(89);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(89, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(86);
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isValidPropertyName("EQUALS");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(98);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Set<String> set0 = node0.getDirectives();
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(89, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertNull(set0);
      
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(89, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertNull(node1);
      
      boolean boolean3 = NodeUtil.isLiteralValue(node0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(89, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(122, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newVarNode("", node0);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(122, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQualifiedName());
      assertEquals(118, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertNotNull(node1);
      
      Node node2 = new Node(101, node1, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(122, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQualifiedName());
      assertEquals(118, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.wasEmptyNode());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isVarArgs());
      assertEquals(101, node2.getType());
      assertTrue(node2.hasChildren());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertEquals((-1), node2.getCharno());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isQuotedString());
      assertNotNull(node2);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "p-b*", "NaN", 88, 84);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isResolved());
      assertTrue(namedType0.isNamedType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isBooleanValueType());
      assertEquals("p-b*", namedType0.getReferenceName());
      assertTrue(namedType0.hasReferenceName());
      assertTrue(namedType0.isNominalType());
      assertEquals("p-b*", namedType0.toString());
      assertFalse(namedType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isFunctionType());
      assertNotNull(namedType0);
      
      Node node3 = Node.newString("Uo(S`\bx");
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, node3.getType());
      assertEquals(0, node3.getChildCount());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.wasEmptyNode());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isVarArgs());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.isSyntheticBlock());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isQualifiedName());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isUnscopedQualifiedName());
      assertNotNull(node3);
      
      Set<String> set0 = node3.getDirectives();
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, node3.getType());
      assertEquals(0, node3.getChildCount());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.wasEmptyNode());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isVarArgs());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.isSyntheticBlock());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isQualifiedName());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isUnscopedQualifiedName());
      assertNull(set0);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(122, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertNotNull(node_AncestorIterable0);
      
      Node node4 = Node.newNumber((double) 49);
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(node4.isUnscopedQualifiedName());
      assertFalse(node4.wasEmptyNode());
      assertEquals((-1), node4.getCharno());
      assertEquals(39, node4.getType());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isOptionalArg());
      assertFalse(node4.isQuotedString());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isVarArgs());
      assertFalse(node4.isNoSideEffectsCall());
      assertFalse(node4.isQualifiedName());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isSyntheticBlock());
      assertEquals((-1), node4.getLineno());
      assertNotNull(node4);
      
      Node node5 = NodeUtil.newName("REGEXP_TYPE", node1, "directcall");
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node5.equals((Object)node0));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node2));
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node5, node3);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(122, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQualifiedName());
      assertEquals(118, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node5.isVarArgs());
      assertEquals((-1), node5.getLineno());
      assertFalse(node5.isQuotedString());
      assertFalse(node5.isSyntheticBlock());
      assertEquals((-1), node5.getCharno());
      assertTrue(node5.isQualifiedName());
      assertFalse(node5.hasOneChild());
      assertEquals(0, node5.getChildCount());
      assertTrue(node5.isUnscopedQualifiedName());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isOptionalArg());
      assertFalse(node5.isNoSideEffectsCall());
      assertEquals(38, node5.getType());
      assertFalse(node5.hasChildren());
      assertFalse(node5.wasEmptyNode());
      assertNotNull(node5);
      
      boolean boolean0 = NodeUtil.canBeSideEffected(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node5));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node4));
      assertTrue(boolean0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(122, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQualifiedName());
      assertEquals(118, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.wasEmptyNode());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isVarArgs());
      assertEquals(101, node2.getType());
      assertTrue(node2.hasChildren());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertEquals((-1), node2.getCharno());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isQuotedString());
      
      boolean boolean1 = NodeUtil.isExprCall(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(122, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQualifiedName());
      assertEquals(118, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      
      boolean boolean2 = NodeUtil.isAnonymousFunction(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node5));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(122, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      
      boolean boolean3 = NodeUtil.isPrototypePropertyDeclaration(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node5));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node5));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node4));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(122, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQualifiedName());
      assertEquals(118, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      Node node1 = Node.newNumber((double) 35);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertNotNull(node1);
      
      node1.setLineno(2);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQuotedString());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      Node node2 = node1.getAncestor(4);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQuotedString());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertNull(node2);
      
      node0.setOptionalArg(true);
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      
      boolean boolean0 = NodeUtil.isAssign(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      
      String string0 = NodeUtil.getStringValue(node1);
      assertFalse(node1.equals((Object)node0));
      assertEquals("35", string0);
      assertNotSame(node1, node0);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQuotedString());
      assertEquals(2, node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(119);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 119: WITH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Node node0 = Node.newNumber(27.379824660316334);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      node0.setLineno((-1129));
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(93);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Node node0 = new Node(89);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(89, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newVarNode("%k`CH:><5)]%3S8'", node0);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(89, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertNotNull(node1);
      
      Node node2 = new Node(25, node1, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(89, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertEquals(1, node2.getChildCount());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getCharno());
      assertEquals(25, node2.getType());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isUnscopedQualifiedName());
      assertNotNull(node2);
      
      boolean boolean0 = NodeUtil.isValidPropertyName("%k`CH:><5)]%3S8'");
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isLiteralValue(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(89, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertEquals(1, node2.getChildCount());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getCharno());
      assertEquals(25, node2.getType());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isUnscopedQualifiedName());
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType((-1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = NodeUtil.isValidPropertyName("%k`CH:><5)]%3S8'");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = NodeUtil.isLiteralValue(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(89, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertEquals(1, node2.getChildCount());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getCharno());
      assertEquals(25, node2.getType());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isUnscopedQualifiedName());
      
      boolean boolean5 = NodeUtil.isForIn(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(89, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertEquals(1, node2.getChildCount());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getCharno());
      assertEquals(25, node2.getType());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isUnscopedQualifiedName());
      
      node1.putBooleanProp(35, false);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(89, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals((-1), node1.getCharno());
      
      node2.setOptionalArg(false);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(89, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertEquals(1, node2.getChildCount());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getCharno());
      assertEquals(25, node2.getType());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isUnscopedQualifiedName());
      
      boolean boolean6 = NodeUtil.isAssign(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(89, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals(118, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertEquals(1, node2.getChildCount());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.hasChildren());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getCharno());
      assertEquals(25, node2.getType());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isUnscopedQualifiedName());
      
      Node node3 = Node.newString("`ao!cFC'%H");
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertFalse(node3.wasEmptyNode());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.hasOneChild());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.isOptionalArg());
      assertEquals(40, node3.getType());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.isVarArgs());
      assertFalse(node3.isSyntheticBlock());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isQualifiedName());
      assertNotNull(node3);
      
      String string0 = NodeUtil.getStringValue(node3);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertEquals("`ao!cFC'%H", string0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertFalse(node3.wasEmptyNode());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.hasOneChild());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.isOptionalArg());
      assertEquals(40, node3.getType());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.isVarArgs());
      assertFalse(node3.isSyntheticBlock());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.isQualifiedName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertNotNull(node0);
      
      node0.setLineno((-4116));
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(node0);
      assertFalse(boolean0);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(5);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      boolean boolean1 = nodeUtil_MatchNodeType0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = nodeUtil_MatchNodeType0.equals(node0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(35);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 35: GETELEM
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Node node0 = new Node(89);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(89, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(44);
      assertFalse(boolean0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(simpleErrorReporter0.equals((Object)simpleErrorReporter1));
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(15);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType1 = new NodeUtil.MatchNodeType(20);
      assertFalse(nodeUtil_MatchNodeType1.equals((Object)nodeUtil_MatchNodeType0));
      assertNotNull(nodeUtil_MatchNodeType1);
      
      boolean boolean1 = nodeUtil_MatchNodeType0.equals(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(nodeUtil_MatchNodeType0.equals((Object)nodeUtil_MatchNodeType1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(nodeUtil_MatchNodeType0, nodeUtil_MatchNodeType1);
      assertEquals(0, linkedList1.size());
      
      String string0 = NodeUtil.opToStrNoFail(90);
      assertEquals("<<=", string0);
      assertNotNull(string0);
      
      Node node1 = new Node(24, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(89, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(24, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertNotNull(node1);
      
      boolean boolean2 = NodeUtil.isExprCall(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(node0, node1);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(89, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(96);
      assertFalse(boolean0);
      
      Node node0 = Node.newString("@BYAxuqz5kT>g", 96, (-1648));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newExpr(node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getCharno());
      assertEquals(130, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertNotNull(node1);
      
      Node node2 = NodeUtil.newName("-", node1, (String) null);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getCharno());
      assertEquals(130, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSyntheticBlock());
      assertEquals(38, node2.getType());
      assertFalse(node2.hasChildren());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isNoSideEffectsCall());
      assertEquals(0, node2.getChildCount());
      assertTrue(node2.isUnscopedQualifiedName());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasOneChild());
      assertTrue(node2.isQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertNotNull(node2);
      
      NodeUtil.copyNameAnnotations(node2, node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getCharno());
      assertEquals(130, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSyntheticBlock());
      assertEquals(38, node2.getType());
      assertFalse(node2.hasChildren());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isNoSideEffectsCall());
      assertEquals(0, node2.getChildCount());
      assertTrue(node2.isUnscopedQualifiedName());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasOneChild());
      assertTrue(node2.isQualifiedName());
      assertEquals((-1), node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      String string0 = node0.toString(true, true, true);
      assertEquals("NUMBER 0.0", string0);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertNotNull(string0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(1739);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Node node1 = new Node((-1941), node0, node0, 42, 92);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertEquals((-1941), node1.getType());
      assertEquals(42, node1.getLineno());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(92, node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertNotNull(node1);
      
      boolean boolean0 = nodeUtil_MatchNodeType0.equals("NUMBER 0.0");
      assertFalse(boolean0);
      
      String string1 = NodeUtil.opToStrNoFail(32);
      assertFalse(string1.equals((Object)string0));
      assertEquals("typeof", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(122, node0.getType());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newVarNode("MyJ<z", node0);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(122, node0.getType());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertEquals(118, node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertNotNull(node1);
      
      boolean boolean0 = NodeUtil.isLiteralValue(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(122, node0.getType());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertEquals(118, node1.getType());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(10);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = NodeUtil.isValidPropertyName("void");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      SimpleErrorReporter simpleErrorReporter1 = new SimpleErrorReporter();
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertNotNull(simpleErrorReporter1);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter1);
      assertFalse(simpleErrorReporter1.equals((Object)simpleErrorReporter0));
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 2: ENTERWITH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newVarNode("", node0);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertEquals(118, node1.getType());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertNotNull(node1);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node2 = Node.newString("Infinity");
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node2.hasChildren());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isQuotedString());
      assertEquals(40, node2.getType());
      assertFalse(node2.wasEmptyNode());
      assertEquals((-1), node2.getCharno());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertNotNull(node2);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(44);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 44: TRUE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(103);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = nodeUtil_MatchNodeType0.equals((Object) null);
      assertFalse(boolean0);
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals(83, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      boolean boolean1 = nodeUtil_MatchNodeType0.apply(node0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals(83, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(103);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = NodeUtil.isValidPropertyName("|=w<^io");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(58);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 58: ENUM_INIT_VALUES
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = new Node(89);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertEquals(89, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newUndefinedNode();
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(122, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isUnscopedQualifiedName());
      assertNotNull(node1);
      
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertEquals(89, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-1215));
      assertNotNull(nodeUtil_MatchNodeType0);
      
      boolean boolean1 = nodeUtil_MatchNodeType0.apply(node1);
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node1, node0);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(122, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isUnscopedQualifiedName());
      
      boolean boolean2 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(node1, node0);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(122, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isUnscopedQualifiedName());
      
      boolean boolean3 = NodeUtil.isLabelName(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertNotSame(node0, node1);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertEquals(89, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      
      String string0 = NodeUtil.opToStrNoFail(89);
      assertEquals("&=", string0);
      assertNotNull(string0);
      
      boolean boolean4 = NodeUtil.isForIn(node1);
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      assertNotSame(node1, node0);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(122, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isUnscopedQualifiedName());
      
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(122, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newQualifiedNameNode("Infinity", 873, 49);
      assertFalse(node1.equals((Object)node0));
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertEquals(873, node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isUnscopedQualifiedName());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isVarArgs());
      assertEquals(49, node1.getCharno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertNotNull(node1);
      
      String string0 = node1.toStringTree();
      assertFalse(node1.equals((Object)node0));
      assertEquals("NAME Infinity 873\n", string0);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertEquals(873, node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isUnscopedQualifiedName());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isVarArgs());
      assertEquals(49, node1.getCharno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertNotNull(string0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node1));
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(20);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isFunctionDeclaration(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertEquals(873, node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isUnscopedQualifiedName());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isVarArgs());
      assertEquals(49, node1.getCharno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      
      boolean boolean2 = NodeUtil.isLiteralValue(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertEquals(873, node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isUnscopedQualifiedName());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isVarArgs());
      assertEquals(49, node1.getCharno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isQualifiedName());
      assertEquals(83, node0.getType());
      assertNotNull(node0);
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Node node1 = Node.newString("Ej][UsD");
      assertFalse(node1.equals((Object)node0));
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals(40, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertNotNull(node1);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      String string0 = NodeUtil.opToStrNoFail(11);
      assertEquals("&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertNotNull(node0);
      
      node0.setLineno(2);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals(2, node0.getLineno());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals(2, node0.getLineno());
      
      Node node1 = NodeUtil.newVarNode("=RGB=<", node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals(2, node0.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.hasOneChild());
      assertEquals(118, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertNotNull(node1);
      
      boolean boolean1 = NodeUtil.mayEffectMutableState(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals(2, node0.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.hasOneChild());
      assertEquals(118, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      
      boolean boolean2 = NodeUtil.isControlStructure(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals(2, node0.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.hasOneChild());
      assertEquals(118, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      
      Node node2 = NodeUtil.getLoopCodeBlock(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals(2, node0.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.hasOneChild());
      assertEquals(118, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertNull(node2);
      
      boolean boolean3 = NodeUtil.isLiteralValue(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals(2, node0.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.hasOneChild());
      assertEquals(118, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      
      boolean boolean4 = NodeUtil.isForIn(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertEquals(2, node0.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.hasOneChild());
      assertEquals(118, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(122, node0.getType());
      assertNotNull(node0);
      
      Node node1 = Node.newNumber((double) 15);
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, Node.BOTH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasChildren());
      assertEquals(39, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertNotNull(node1);
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSType jSType0 = node1.getJSType();
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, Node.BOTH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasChildren());
      assertEquals(39, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertNull(jSType0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isEnumElementType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNullType());
      assertTrue(recordType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isEmptyType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isResolved());
      assertNotNull(recordType0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(105);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected NEW node, got NUMBER
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(108);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Node node0 = new Node(116);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(116, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isLatin("LABEL");
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isLiteralValue(node0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(116, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      
      Set<String> set0 = node0.getDirectives();
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(116, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertNull(set0);
      
      Node node1 = Node.newString("&&");
      assertFalse(node1.equals((Object)node0));
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertEquals(40, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertNotNull(node1);
      
      boolean boolean2 = NodeUtil.isEmptyBlock(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(116, node0.getType());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      
      boolean boolean3 = NodeUtil.isString(node1);
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertEquals(40, node1.getType());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Node node0 = Node.newString(92, "rsh", 92, 92);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(92, node0.getCharno());
      assertEquals(92, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(92, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      Node node1 = new Node(110, node0, node0, node0, node0, 23, 41);
      assertFalse(node1.equals((Object)node0));
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(92, node0.getCharno());
      assertEquals(92, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertEquals(92, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(23, node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertEquals(41, node1.getCharno());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertEquals(110, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertNotNull(node1);
      
      node0.addChildrenToBack(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(92, node0.getCharno());
      assertEquals(92, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals(92, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(23, node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertEquals(41, node1.getCharno());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertEquals(110, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      
      boolean boolean0 = NodeUtil.isObjectLitKey(node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(92, node0.getCharno());
      assertEquals(92, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals(92, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(23, node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertEquals(41, node1.getCharno());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertEquals(110, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      
      Node node2 = NodeUtil.getLoopCodeBlock(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(92, node0.getCharno());
      assertEquals(92, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals(92, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(23, node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertEquals(41, node1.getCharno());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertEquals(110, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertNull(node2);
      
      Node node3 = Node.newString(65136, "Infinity", 41, 0);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertNotSame(node3, node0);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node3.isVarArgs());
      assertFalse(node3.hasChildren());
      assertEquals(65136, node3.getType());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.isQualifiedName());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isSyntheticBlock());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.wasEmptyNode());
      assertFalse(node3.isUnscopedQualifiedName());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isQuotedString());
      assertEquals(41, node3.getLineno());
      assertFalse(node3.isOptionalArg());
      assertNotNull(node3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Node node4 = Node.newNumber((double) 16, 46, 4);
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isQuotedString());
      assertFalse(node4.isNoSideEffectsCall());
      assertFalse(node4.isUnscopedQualifiedName());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isOptionalArg());
      assertEquals(46, node4.getLineno());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isSyntheticBlock());
      assertEquals(39, node4.getType());
      assertFalse(node4.wasEmptyNode());
      assertFalse(node4.isQualifiedName());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isVarArgs());
      assertEquals(4, node4.getCharno());
      assertNotNull(node4);
      
      boolean boolean1 = NodeUtil.isVarDeclaration(node4);
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isQuotedString());
      assertFalse(node4.isNoSideEffectsCall());
      assertFalse(node4.isUnscopedQualifiedName());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isOptionalArg());
      assertEquals(46, node4.getLineno());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isSyntheticBlock());
      assertEquals(39, node4.getType());
      assertFalse(node4.wasEmptyNode());
      assertFalse(node4.isQualifiedName());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isVarArgs());
      assertEquals(4, node4.getCharno());
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(103);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 103: DEC
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!\"+G;jqG|KT7d]*mvz");
      assertFalse(boolean0);
      
      EvaluatorException evaluatorException0 = simpleErrorReporter0.runtimeError("!\"+G;jqG|KT7d]*mvz", "!\"+G;jqG|KT7d]*mvz", 1910, "!\"+G;jqG|KT7d]*mvz", 5);
      assertEquals("!\"+G;jqG|KT7d]*mvz", evaluatorException0.lineSource());
      assertEquals(5, evaluatorException0.columnNumber());
      assertEquals(1910, evaluatorException0.lineNumber());
      assertEquals("!\"+G;jqG|KT7d]*mvz", evaluatorException0.sourceName());
      assertNotNull(evaluatorException0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(43);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(1488);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Node node0 = Node.newString(113, "!\"+G;jqG|KT7d]*mvz");
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals(113, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      Node node1 = new Node(110, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals(113, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertEquals(110, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertNotNull(node1);
      
      Set<String> set0 = node1.getDirectives();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals(113, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertEquals(110, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertNull(set0);
      
      Node node2 = NodeUtil.getLoopCodeBlock(node0);
      assertFalse(node0.equals((Object)node1));
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals(113, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertNull(node2);
      
      // Undeclared exception!
      try { 
        NodeUtil.isPrototypePropertyDeclaration((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertNotNull(node0);
      
      node0.setLineno((-1129));
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("=RGB=<", linkedList0, node0, 21, 114);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, linkedList0.size());
      assertFalse(functionNode0.isVarArgs());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals(114, functionNode0.getCharno());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertEquals(21, functionNode0.getLineno());
      assertNull(functionNode0.getSourceName());
      assertEquals(0, functionNode0.getRegexpCount());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(105, functionNode0.getType());
      assertTrue(functionNode0.hasChildren());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(3, functionNode0.getChildCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertNotNull(functionNode0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(functionNode0);
      assertTrue(boolean0);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, linkedList0.size());
      assertFalse(functionNode0.isVarArgs());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals(114, functionNode0.getCharno());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertEquals(21, functionNode0.getLineno());
      assertNull(functionNode0.getSourceName());
      assertEquals(0, functionNode0.getRegexpCount());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(105, functionNode0.getType());
      assertTrue(functionNode0.hasChildren());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(3, functionNode0.getChildCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean1 = NodeUtil.isSwitchCase(functionNode0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, linkedList0.size());
      assertFalse(functionNode0.isVarArgs());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals(114, functionNode0.getCharno());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertEquals(21, functionNode0.getLineno());
      assertNull(functionNode0.getSourceName());
      assertEquals(0, functionNode0.getRegexpCount());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(105, functionNode0.getType());
      assertTrue(functionNode0.hasChildren());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(3, functionNode0.getChildCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertFalse(linkedList0.contains(node0));
      
      NodeUtil.redeclareVarsInsideBranch(functionNode0);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.LEFT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, linkedList0.size());
      assertFalse(functionNode0.isVarArgs());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals(114, functionNode0.getCharno());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertEquals(21, functionNode0.getLineno());
      assertNull(functionNode0.getSourceName());
      assertEquals(0, functionNode0.getRegexpCount());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(105, functionNode0.getType());
      assertTrue(functionNode0.hasChildren());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(3, functionNode0.getChildCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertEquals("=RGB=<", functionNode0.getFunctionName());
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = NodeUtil.isValidPropertyName("com.google.common.base.CharMatcher");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(40);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 40: STRING
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      int int0 = 70;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(70);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 70: DEFAULTNAMESPACE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      Node node1 = Node.newNumber((double) 15);
      assertFalse(node1.equals((Object)node0));
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertNotNull(node1);
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSType jSType0 = node0.getJSType();
      assertFalse(node0.equals((Object)node1));
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNull(jSType0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isEmptyType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNamedType());
      assertNotNull(recordType0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node2 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node2, node0);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node2.isVarArgs());
      assertEquals(83, node2.getType());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertNotNull(node2);
      
      node0.addChildrenToBack(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(2, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, linkedList0.size());
      assertFalse(node2.isVarArgs());
      assertEquals(83, node2.getType());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node2, node0);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node2.isVarArgs());
      assertEquals(83, node2.getType());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      assertNull(jSDocInfo0);
      
      simpleErrorReporter0.warning("Not declared as a type name", "Array", 29, "F3(i4Zh/Ppj", 20);
      NodeUtil.redeclareVarsInsideBranch(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node2, node0);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node2.isVarArgs());
      assertEquals(83, node2.getType());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      
      node2.setOptionalArg(true);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node2, node0);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, linkedList0.size());
      assertTrue(node2.isOptionalArg());
      assertFalse(node2.isVarArgs());
      assertEquals(83, node2.getType());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      
      boolean boolean0 = NodeUtil.isAssign(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(boolean0);
      assertNotSame(node2, node0);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, linkedList0.size());
      assertTrue(node2.isOptionalArg());
      assertFalse(node2.isVarArgs());
      assertEquals(83, node2.getType());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals((-1), node2.getLineno());
      
      String string0 = NodeUtil.getStringValue(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals("undefined", string0);
      assertNotSame(node0, node2);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(2, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(string0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(61);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertNotNull(node0);
      
      node0.setLineno(22);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      Node node1 = new Node(31, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertEquals(31, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isQualifiedName());
      assertNotNull(node1);
      
      boolean boolean0 = NodeUtil.isValidPropertyName("Ej][UsD");
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isLiteralValue(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertEquals(31, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isQualifiedName());
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(44);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = NodeUtil.isValidPropertyName("Ej][UsD");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = NodeUtil.isLiteralValue(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      
      Node node2 = Node.newString("cABNeKp6Hg\"q0il &e");
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertFalse(node2.isSyntheticBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.wasEmptyNode());
      assertEquals(40, node2.getType());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertNotNull(node2);
      
      boolean boolean5 = NodeUtil.isForIn(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertFalse(node2.isSyntheticBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.wasEmptyNode());
      assertEquals(40, node2.getType());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      
      node0.putBooleanProp(20, false);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      
      node0.setOptionalArg(true);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isOptionalArg());
      
      boolean boolean6 = NodeUtil.isAssign(node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isOptionalArg());
      
      String string0 = NodeUtil.getStringValue(node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertEquals("0", string0);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isOptionalArg());
      assertNotNull(string0);
      
      boolean boolean7 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean0);
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean6);
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isOptionalArg());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertEquals(31, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isQualifiedName());
      
      boolean boolean8 = NodeUtil.isSwitchCase(node2);
      assertTrue(boolean8 == boolean0);
      assertFalse(boolean8 == boolean7);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean6);
      assertFalse(boolean8 == boolean4);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean5);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(boolean8);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertFalse(node2.isSyntheticBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.wasEmptyNode());
      assertEquals(40, node2.getType());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertNotNull(node0);
      
      Node node1 = Node.newNumber((double) 35);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertFalse(node1.hasChildren());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertFalse(node1.isNoSideEffectsCall());
      assertNotNull(node1);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(20);
      assertTrue(boolean0);
      
      boolean boolean1 = NodeUtil.isValidPropertyName("Ej][UsD");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(100);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Set<String> set0 = node0.getDirectives();
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertNull(set0);
      
      Node node2 = NodeUtil.getLoopCodeBlock(node0);
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasChildren());
      assertNull(node2);
      
      // Undeclared exception!
      try { 
        NodeUtil.isLiteralValue((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(122, node0.getType());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(44);
      assertFalse(boolean0);
      
      Node node1 = new Node(42, node0, 18, 9);
      assertFalse(node1.equals((Object)node0));
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(122, node0.getType());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(18, node1.getLineno());
      assertFalse(node1.wasEmptyNode());
      assertEquals(42, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(9, node1.getCharno());
      assertNotNull(node1);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node1));
      
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("ERROR", linkedList0, node1, 28, 17);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(122, node0.getType());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(18, node1.getLineno());
      assertFalse(node1.wasEmptyNode());
      assertEquals(42, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(9, node1.getCharno());
      assertEquals(0, linkedList0.size());
      assertFalse(functionNode0.isVarArgs());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getParamCount());
      assertFalse(functionNode0.wasEmptyNode());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertEquals("ERROR", functionNode0.getFunctionName());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(105, functionNode0.getType());
      assertEquals(0, functionNode0.getRegexpCount());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(17, functionNode0.getCharno());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertTrue(functionNode0.hasChildren());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(28, functionNode0.getLineno());
      assertFalse(functionNode0.isSyntheticBlock());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.requiresActivation());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertNull(functionNode0.getSourceName());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals((-1), functionNode0.getEndLineno());
      assertNotNull(functionNode0);
      assertFalse(linkedList0.contains(node1));
      
      boolean boolean1 = NodeUtil.containsFunctionDeclaration(functionNode0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(122, node0.getType());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(18, node1.getLineno());
      assertFalse(node1.wasEmptyNode());
      assertEquals(42, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(9, node1.getCharno());
      assertEquals(0, linkedList0.size());
      assertFalse(functionNode0.isVarArgs());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getParamCount());
      assertFalse(functionNode0.wasEmptyNode());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertEquals("ERROR", functionNode0.getFunctionName());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(105, functionNode0.getType());
      assertEquals(0, functionNode0.getRegexpCount());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(17, functionNode0.getCharno());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertTrue(functionNode0.hasChildren());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(28, functionNode0.getLineno());
      assertFalse(functionNode0.isSyntheticBlock());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.requiresActivation());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertNull(functionNode0.getSourceName());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(linkedList0.contains(node1));
      
      boolean boolean2 = NodeUtil.isSwitchCase(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(node0, node1);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(122, node0.getType());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      
      NodeUtil.redeclareVarsInsideBranch(functionNode0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(122, node0.getType());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(18, node1.getLineno());
      assertFalse(node1.wasEmptyNode());
      assertEquals(42, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(9, node1.getCharno());
      assertEquals(0, linkedList0.size());
      assertFalse(functionNode0.isVarArgs());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals(0, functionNode0.getFunctionCount());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getParamCount());
      assertFalse(functionNode0.wasEmptyNode());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertEquals("ERROR", functionNode0.getFunctionName());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(105, functionNode0.getType());
      assertEquals(0, functionNode0.getRegexpCount());
      assertFalse(functionNode0.hasOneChild());
      assertEquals(17, functionNode0.getCharno());
      assertEquals(3, functionNode0.getChildCount());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertTrue(functionNode0.hasChildren());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(28, functionNode0.getLineno());
      assertFalse(functionNode0.isSyntheticBlock());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertFalse(functionNode0.requiresActivation());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertNull(functionNode0.getSourceName());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(linkedList0.contains(node1));
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean3 = NodeUtil.isSimpleOperatorType(95);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = linkedList0.add(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      assertNotSame(node0, node1);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(122, node0.getType());
      assertFalse(node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(node0));
      assertFalse(linkedList0.contains(node1));
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(3828);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 3828
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 74: REF_NS_MEMBER
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-1047));
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = nodeUtil_MatchNodeType0.equals(object0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(boolean0);
      assertNotSame(object0, object1);
      
      int int0 = 109;
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(109);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 109: ELSE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      
      node0.setLineno((-1129));
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(node0));
      
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(11);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = NodeUtil.isSwitchCase(node0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = Node.newString(92, "rsh", 92, 92);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(92, node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasOneChild());
      assertEquals(92, node0.getCharno());
      assertEquals(92, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      Node node1 = new Node(110, node0, node0, node0, node0, 23, 41);
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(92, node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasOneChild());
      assertEquals(92, node0.getCharno());
      assertEquals(92, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals(110, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(41, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertEquals(23, node1.getLineno());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertNotNull(node1);
      
      node0.addChildrenToBack(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(92, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertEquals(92, node0.getCharno());
      assertEquals(92, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals(110, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(41, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertEquals(23, node1.getLineno());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      
      boolean boolean0 = NodeUtil.isObjectLitKey(node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean0);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(92, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertEquals(92, node0.getCharno());
      assertEquals(92, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals(110, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(41, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertEquals(23, node1.getLineno());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      
      Node node2 = NodeUtil.getLoopCodeBlock(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.BOTH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(92, node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertEquals(92, node0.getCharno());
      assertEquals(92, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals(110, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(41, node1.getCharno());
      assertTrue(node1.hasChildren());
      assertEquals(23, node1.getLineno());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isUnscopedQualifiedName());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isOptionalArg());
      assertNull(node2);
      
      Node node3 = Node.newString(65136, "Infinity", 41, 0);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertNotSame(node3, node0);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, node3.getCharno());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isSyntheticBlock());
      assertFalse(node3.isQualifiedName());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.isUnscopedQualifiedName());
      assertEquals(65136, node3.getType());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isOptionalArg());
      assertEquals(41, node3.getLineno());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.wasEmptyNode());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isVarArgs());
      assertNotNull(node3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Node node4 = Node.newString(97, " JEQ*");
      assertFalse(node4.equals((Object)node1));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertNotSame(node4, node3);
      assertNotSame(node4, node0);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertFalse(node4.isVarArgs());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isQualifiedName());
      assertEquals((-1), node4.getLineno());
      assertFalse(node4.isSyntheticBlock());
      assertEquals((-1), node4.getCharno());
      assertEquals(97, node4.getType());
      assertFalse(node4.isUnscopedQualifiedName());
      assertFalse(node4.hasMoreThanOneChild());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isQuotedString());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isNoSideEffectsCall());
      assertFalse(node4.wasEmptyNode());
      assertFalse(node4.isOptionalArg());
      assertNotNull(node4);
      
      // Undeclared exception!
      try { 
        NodeUtil.mayEffectMutableState(node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = Node.newNumber((-20.993215854090558));
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newUndefinedNode();
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(122, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertNotNull(node1);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node2 = Node.newString("n(");
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSyntheticBlock());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.wasEmptyNode());
      assertEquals(40, node2.getType());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.hasOneChild());
      assertNotNull(node2);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = NodeUtil.opToStrNoFail(86);
      assertEquals("=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "=RGB=<", "&", 127, 679);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNoObjectType());
      assertTrue(namedType0.isNamedType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isEmptyType());
      assertFalse(namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isVoidType());
      assertEquals("=RGB=<", namedType0.getReferenceName());
      assertFalse(namedType0.hasCachedValues());
      assertEquals("=RGB=<", namedType0.toString());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNativeObjectType());
      assertTrue(namedType0.isObject());
      assertTrue(namedType0.isNominalType());
      assertTrue(namedType0.hasReferenceName());
      assertNotNull(namedType0);
      
      UnknownType unknownType0 = (UnknownType)namedType0.getReferencedType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNoObjectType());
      assertTrue(namedType0.isNamedType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isEmptyType());
      assertFalse(namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isVoidType());
      assertEquals("=RGB=<", namedType0.getReferenceName());
      assertFalse(namedType0.hasCachedValues());
      assertEquals("=RGB=<", namedType0.toString());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNativeObjectType());
      assertTrue(namedType0.isObject());
      assertTrue(namedType0.isNominalType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isEnumType());
      assertEquals("?", unknownType0.toString());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEmptyType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isStringValueType());
      assertNotNull(unknownType0);
      
      boolean boolean0 = linkedList1.removeFirstOccurrence(unknownType0);
      assertFalse(boolean0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, linkedList1.size());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNoObjectType());
      assertTrue(namedType0.isNamedType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isEmptyType());
      assertFalse(namedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isVoidType());
      assertEquals("=RGB=<", namedType0.getReferenceName());
      assertFalse(namedType0.hasCachedValues());
      assertEquals("=RGB=<", namedType0.toString());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isNativeObjectType());
      assertTrue(namedType0.isObject());
      assertTrue(namedType0.isNominalType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNamedType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isEnumType());
      assertEquals("?", unknownType0.toString());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertEquals("?", unknownType0.getReferenceName());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isEmptyType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isInterface());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isStringValueType());
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(66);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 66: SET_REF
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertEquals(122, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      simpleErrorReporter0.error("A0BvXYm(", "e", 255, ")", 35);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      boolean boolean0 = jSTypeRegistry0.isForwardDeclaredType(">MaqE~\"\"7u");
      assertFalse(boolean0);
      
      LinkedList<JSType> linkedList1 = new LinkedList<JSType>(linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(node1, node0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isVarArgs());
      assertEquals(83, node1.getType());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertNotNull(node1);
      
      String string0 = node0.toStringTree();
      assertFalse(node0.equals((Object)node1));
      assertEquals("VOID\n    NUMBER 0.0\n", string0);
      assertNotSame(node0, node1);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertEquals(122, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(string0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(39);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isAssign(node0);
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(node0, node1);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getCharno());
      assertEquals(122, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      
      // Undeclared exception!
      try { 
        NodeUtil.isFunctionAnonymous(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertNotNull(node0);
      
      node0.setLineno(22);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = 'B';
      charArray0[2] = 'Q';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'@', 'B', 'Q'}, charArray0);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("@BQ", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      assertEquals(3, charArray0.length);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertArrayEquals(new char[] {'@', 'B', 'Q'}, charArray0);
      assertEquals("@BQ", stringWriter0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("@BQ", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.remaining());
      assertEquals("@BQ", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertEquals(3, charArray0.length);
      
      node0.appendStringTree(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertArrayEquals(new char[] {'@', 'B', 'Q'}, charArray0);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals("@BQNUMBER 0.0 22\n", stringWriter0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("@BQ", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.remaining());
      assertEquals("@BQNUMBER 0.0 22\n", stringWriter1.toString());
      assertEquals(3, charArray0.length);
      
      Node node1 = new Node(31, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.RIGHT);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isOptionalArg());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isQualifiedName());
      assertEquals(31, node1.getType());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      assertNotNull(node1);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-1810));
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = nodeUtil_MatchNodeType0.equals((Object) null);
      assertFalse(boolean0);
      
      String string0 = NodeUtil.opToStrNoFail(122);
      assertEquals("void", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        NodeUtil.getAssignedValue(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Node node0 = new Node(133, 1677, 633);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(133, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertEquals(633, node0.getCharno());
      assertEquals(1677, node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      Node node1 = new Node(2, node0, node0, node0, 120, 1453);
      assertFalse(node1.equals((Object)node0));
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.CASES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(133, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertEquals(633, node0.getCharno());
      assertEquals(1677, node0.getLineno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertEquals(2, node1.getType());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals(120, node1.getLineno());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1453, node1.getCharno());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.hasOneChild());
      assertNotNull(node1);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(102);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 102: INC
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = new Node(89);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertEquals(89, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertNotNull(node0);
      
      Node node1 = Node.newNumber((double) 89);
      assertFalse(node1.equals((Object)node0));
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(39, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertNotNull(node1);
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      JSType jSType0 = node1.getJSType();
      assertFalse(node1.equals((Object)node0));
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(39, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertNull(jSType0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isEmptyType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isAllType());
      assertNotNull(recordType0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(25);
      assertTrue(boolean0);
      
      Node node2 = new Node(0, node1, node0, node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.LEFT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(11, Node.USES_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.BOTH);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertEquals(89, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isVarArgs());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.wasEmptyNode());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isQualifiedName());
      assertTrue(node2.hasChildren());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getType());
      assertEquals((-1), node2.getCharno());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isSyntheticBlock());
      assertNotNull(node2);
      
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected NEW node, got EOF
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertNotNull(node_AncestorIterable0);
      
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertFalse(boolean0);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      
      boolean boolean1 = NodeUtil.isValidPropertyName(")");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(37);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Set<String> set0 = node0.getDirectives();
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertNull(set0);
      
      Node node1 = NodeUtil.newExpr(node0);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(130, node1.getType());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertNotNull(node1);
      
      Node node2 = NodeUtil.getLoopCodeBlock(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(130, node1.getType());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertNull(node2);
      
      boolean boolean3 = NodeUtil.isPrototypePropertyDeclaration(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(122, node0.getType());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(130, node1.getType());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // VOID does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = new Node(89);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(89, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertFalse(boolean0);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(89, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      
      Node node1 = NodeUtil.newQualifiedNameNode("Z-u)5IKGh6=;", 20, 28);
      assertFalse(node1.equals((Object)node0));
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(28, node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.isQualifiedName());
      assertEquals(20, node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertEquals(38, node1.getType());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertNotNull(node1);
      
      Node node2 = new Node((-3039), node0, node1, (-4814), (-1509));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.LEFT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(89, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isQuotedString());
      assertEquals(28, node1.getCharno());
      assertFalse(node1.hasOneChild());
      assertTrue(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.isQualifiedName());
      assertEquals(20, node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertEquals(38, node1.getType());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertTrue(node2.hasMoreThanOneChild());
      assertFalse(node2.wasEmptyNode());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertEquals((-3039), node2.getType());
      assertFalse(node2.hasOneChild());
      assertEquals(2, node2.getChildCount());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.hasChildren());
      assertNotNull(node2);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType((-661));
      assertNotNull(nodeUtil_MatchNodeType0);
      
      boolean boolean1 = nodeUtil_MatchNodeType0.equals("=RGB=<");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 34: SETPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertNotNull(node0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(98);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = nodeUtil_MatchNodeType0.equals(object0);
      assertFalse(boolean0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(87);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(103);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = nodeUtil_MatchNodeType0.equals((Object) null);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = nodeUtil_MatchNodeType0.equals(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(object3, object1);
      assertNotSame(object3, object2);
      assertNotSame(object3, object0);
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(78);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 78: SEMI
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(96);
      assertFalse(boolean0);
      
      Node node0 = Node.newString("@BYAxuqz5kTg", 96, (-1648));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newExpr(node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(130, node1.getType());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      assertNotNull(node1);
      
      Node node2 = new Node(84, 49, 11);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.RIGHT);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertFalse(node2.isQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQuotedString());
      assertEquals(84, node2.getType());
      assertEquals(49, node2.getLineno());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.hasChildren());
      assertFalse(node2.wasEmptyNode());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isVarArgs());
      assertEquals(11, node2.getCharno());
      assertNotNull(node2);
      
      boolean boolean1 = NodeUtil.isExpressionNode(node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(node1, node2);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals(40, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.hasChildren());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(130, node1.getType());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isQuotedString());
      
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertNotNull(node0);
      
      node0.setLineno(87);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(0, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(87, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(node0));
      
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("com.google.common.base.CharMatcher$12", linkedList1, node0, 30, 11);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(87, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(0, linkedList1.size());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals("com.google.common.base.CharMatcher$12", functionNode0.getFunctionName());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getFunctionCount());
      assertNull(functionNode0.getSourceName());
      assertFalse(functionNode0.isVarArgs());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isOptionalArg());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.requiresActivation());
      assertEquals(11, functionNode0.getCharno());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertEquals(3, functionNode0.getChildCount());
      assertFalse(functionNode0.wasEmptyNode());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(30, functionNode0.getLineno());
      assertTrue(functionNode0.hasChildren());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(functionNode0.hasOneChild());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(0, functionNode0.getRegexpCount());
      assertNotNull(functionNode0);
      assertFalse(linkedList1.contains(node0));
      
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(functionNode0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(87, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(0, linkedList1.size());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals("com.google.common.base.CharMatcher$12", functionNode0.getFunctionName());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getFunctionCount());
      assertNull(functionNode0.getSourceName());
      assertFalse(functionNode0.isVarArgs());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isOptionalArg());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.requiresActivation());
      assertEquals(11, functionNode0.getCharno());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertEquals(3, functionNode0.getChildCount());
      assertFalse(functionNode0.wasEmptyNode());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(30, functionNode0.getLineno());
      assertTrue(functionNode0.hasChildren());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(functionNode0.hasOneChild());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(0, functionNode0.getRegexpCount());
      assertFalse(linkedList1.contains(node0));
      
      boolean boolean1 = NodeUtil.isSwitchCase(functionNode0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(87, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(0, linkedList1.size());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals("com.google.common.base.CharMatcher$12", functionNode0.getFunctionName());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getFunctionCount());
      assertNull(functionNode0.getSourceName());
      assertFalse(functionNode0.isVarArgs());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isOptionalArg());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.requiresActivation());
      assertEquals(11, functionNode0.getCharno());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertEquals(3, functionNode0.getChildCount());
      assertFalse(functionNode0.wasEmptyNode());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(30, functionNode0.getLineno());
      assertTrue(functionNode0.hasChildren());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(functionNode0.hasOneChild());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(0, functionNode0.getRegexpCount());
      assertFalse(linkedList1.contains(node0));
      
      NodeUtil.redeclareVarsInsideBranch(functionNode0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(87, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(0, linkedList1.size());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals("com.google.common.base.CharMatcher$12", functionNode0.getFunctionName());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getFunctionCount());
      assertNull(functionNode0.getSourceName());
      assertFalse(functionNode0.isVarArgs());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isOptionalArg());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.requiresActivation());
      assertEquals(11, functionNode0.getCharno());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertEquals(3, functionNode0.getChildCount());
      assertFalse(functionNode0.wasEmptyNode());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(30, functionNode0.getLineno());
      assertTrue(functionNode0.hasChildren());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(functionNode0.hasOneChild());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(0, functionNode0.getRegexpCount());
      assertFalse(linkedList1.contains(node0));
      
      LinkedList<JSType> linkedList2 = new LinkedList<JSType>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      boolean boolean2 = NodeUtil.isSimpleOperatorType(68);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = linkedList1.add((Node) functionNode0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(87, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertEquals(1, linkedList1.size());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals("com.google.common.base.CharMatcher$12", functionNode0.getFunctionName());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getFunctionCount());
      assertNull(functionNode0.getSourceName());
      assertFalse(functionNode0.isVarArgs());
      assertEquals((-1), functionNode0.getEndLineno());
      assertFalse(functionNode0.isOptionalArg());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.requiresActivation());
      assertEquals(11, functionNode0.getCharno());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertFalse(functionNode0.isSyntheticBlock());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertEquals(3, functionNode0.getChildCount());
      assertFalse(functionNode0.wasEmptyNode());
      assertFalse(functionNode0.isQualifiedName());
      assertEquals(30, functionNode0.getLineno());
      assertTrue(functionNode0.hasChildren());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertFalse(functionNode0.hasOneChild());
      assertFalse(functionNode0.isQuotedString());
      assertEquals(0, functionNode0.getRegexpCount());
      assertFalse(linkedList1.contains(node0));
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(110);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 110: SWITCH
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = NodeUtil.isSimpleOperatorType(44);
      assertFalse(boolean0);
      
      Node node1 = new Node(42, node0, 18, 9);
      assertFalse(node1.equals((Object)node0));
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(42, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isVarArgs());
      assertEquals(9, node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertEquals(18, node1.getLineno());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isQuotedString());
      assertNotNull(node1);
      
      node0.addChildToFront(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(42, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isVarArgs());
      assertEquals(9, node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertEquals(18, node1.getLineno());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isQuotedString());
      
      boolean boolean1 = NodeUtil.isLiteralValue(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(42, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isVarArgs());
      assertEquals(9, node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertEquals(18, node1.getLineno());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isQuotedString());
      
      Node node2 = Node.newString(".0");
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(11, Node.USES_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isVarArgs());
      assertEquals((-1), node2.getLineno());
      assertEquals(40, node2.getType());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isOptionalArg());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.wasEmptyNode());
      assertNotNull(node2);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(".0"));
      
      boolean boolean2 = NodeUtil.isValidDefineValue(node1, set0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(42, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isVarArgs());
      assertEquals(9, node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertEquals(18, node1.getLineno());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isQuotedString());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(".0"));
      
      boolean boolean3 = NodeUtil.isAssign(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.BOTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(42, node1.getType());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isVarArgs());
      assertEquals(9, node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertEquals(18, node1.getLineno());
      assertTrue(node1.isQualifiedName());
      assertFalse(node1.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = new Node(89);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertEquals(89, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertNotNull(node0);
      
      boolean boolean0 = NodeUtil.isSwitchCase(node0);
      assertFalse(boolean0);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertEquals(89, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      
      Node node1 = new Node(30);
      assertFalse(node1.equals((Object)node0));
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.USES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(30, node1.getType());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.hasOneChild());
      assertNotNull(node1);
      
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertEquals(89, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(3026);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(node0));
      
      boolean boolean2 = linkedList1.add(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertNotSame(node0, node1);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertEquals(89, node0.getType());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasOneChild());
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(node0));
      assertFalse(linkedList1.contains(node1));
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(105);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 105: FUNCTION
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(52);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      String string0 = NodeUtil.opToStrNoFail(94);
      assertEquals("-=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      LinkedList<Node> linkedList1 = new LinkedList<Node>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(node0));
      
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(52);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = NodeUtil.isSwitchCase(node0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      
      boolean boolean3 = NodeUtil.isLabelName(node0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.USES_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(33, Node.NAME_PROP);
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      Node node1 = NodeUtil.newVarNode("", node0);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.hasOneChild());
      assertEquals(118, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertNotNull(node1);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(node0));
      
      Node node2 = NodeUtil.newName("by!|7V9nQj4uohj]", node1, ".prototype");
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.BOTH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.LEFT);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.hasOneChild());
      assertEquals(118, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isQuotedString());
      assertEquals((-1), node2.getLineno());
      assertTrue(node2.isUnscopedQualifiedName());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isSyntheticBlock());
      assertEquals((-1), node2.getCharno());
      assertTrue(node2.isQualifiedName());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(38, node2.getType());
      assertEquals(0, node2.getChildCount());
      assertNotNull(node2);
      
      FunctionNode functionNode0 = NodeUtil.newFunctionNode("prototype", linkedList0, node1, 311, 117);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(1, FunctionNode.FUNCTION_STATEMENT);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals((-2), ScriptOrFnNode.DUPLICATE_CONST);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, FunctionNode.FUNCTION_EXPRESSION);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(0, ScriptOrFnNode.DUPLICATE_VAR);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(3, FunctionNode.FUNCTION_EXPRESSION_STATEMENT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals((-1), ScriptOrFnNode.DUPLICATE_PARAMETER);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.hasOneChild());
      assertEquals(118, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, linkedList0.size());
      assertTrue(functionNode0.hasMoreThanOneChild());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals((-1), functionNode0.getEndLineno());
      assertEquals(105, functionNode0.getType());
      assertFalse(functionNode0.getIgnoreDynamicScope());
      assertFalse(functionNode0.wasEmptyNode());
      assertEquals(3, functionNode0.getChildCount());
      assertFalse(functionNode0.isNoSideEffectsCall());
      assertEquals("prototype", functionNode0.getFunctionName());
      assertFalse(functionNode0.isVarArgs());
      assertEquals(0, functionNode0.getEncodedSourceStart());
      assertEquals(117, functionNode0.getCharno());
      assertFalse(functionNode0.isQuotedString());
      assertFalse(functionNode0.isSyntheticBlock());
      assertEquals(0, functionNode0.getFunctionType());
      assertFalse(functionNode0.requiresActivation());
      assertFalse(functionNode0.isQualifiedName());
      assertFalse(functionNode0.isUnscopedQualifiedName());
      assertNull(functionNode0.getSourceName());
      assertFalse(functionNode0.hasOneChild());
      assertFalse(functionNode0.isOptionalArg());
      assertEquals(0, functionNode0.getFunctionCount());
      assertTrue(functionNode0.hasChildren());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals((-1), functionNode0.getBaseLineno());
      assertEquals(0, functionNode0.getParamAndVarCount());
      assertEquals(0, functionNode0.getEncodedSourceEnd());
      assertEquals(311, functionNode0.getLineno());
      assertNotNull(functionNode0);
      assertFalse(linkedList0.contains(node2));
      
      boolean boolean0 = NodeUtil.containsFunctionDeclaration(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(boolean0);
      assertNotSame(node0, node1);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      
      boolean boolean1 = NodeUtil.isSwitchCase(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(11, Node.USES_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertEquals(122, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.isUnscopedQualifiedName());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getCharno());
      assertTrue(node1.hasOneChild());
      assertEquals(118, node1.getType());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isQuotedString());
      assertEquals((-1), node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNoSideEffectsCall());
      
      // Undeclared exception!
      try { 
        NodeUtil.redeclareVarsInsideBranch(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node0);
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      JSType jSType0 = node0.getJSType();
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertNull(jSType0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotNull(jSTypeRegistry1);
      
      RecordType recordType0 = jSTypeRegistry1.createRecordType(hashMap0);
      assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
      assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isResolved());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isStringValueType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNamedType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isEmptyType());
      assertFalse(recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoType());
      assertNotNull(recordType0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node1 = jSTypeRegistry0.createParameters((List<JSType>) linkedList0);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(0, linkedList0.size());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(83, node1.getType());
      assertNotNull(node1);
      
      Node node2 = NodeUtil.newVarNode("Named type with empty name component", node1);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, linkedList0.size());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasChildren());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(83, node1.getType());
      assertFalse(node2.wasEmptyNode());
      assertTrue(node2.hasChildren());
      assertEquals((-1), node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertEquals(118, node2.getType());
      assertFalse(node2.isQuotedString());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getCharno());
      assertNotNull(node2);
      
      node1.addChildrenToBack(node2);
      assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.RIGHT);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(0, Node.BOTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(0, linkedList0.size());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isQualifiedName());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.wasEmptyNode());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(83, node1.getType());
      assertFalse(node2.wasEmptyNode());
      assertTrue(node2.hasChildren());
      assertEquals((-1), node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNoSideEffectsCall());
      assertEquals(118, node2.getType());
      assertFalse(node2.isQuotedString());
      assertTrue(node2.hasOneChild());
      assertFalse(node2.isUnscopedQualifiedName());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQualifiedName());
      assertEquals((-1), node2.getCharno());
      
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.LEFT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertNull(jSDocInfo0);
      
      simpleErrorReporter0.warning("4'8]~@?y*mQ,oQO9", "undefined", 114, "NaN", 11);
      // Undeclared exception!
      NodeUtil.redeclareVarsInsideBranch(node1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      node0.setLineno(22);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)24;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-61), (byte)8, (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(106);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = NodeUtil.isLiteralValue(node0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(22, node0.getLineno());
      assertFalse(node0.isUnscopedQualifiedName());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_TYPE;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.google.javascript.rhino.jstype.InstanceObjectType cannot be cast to com.google.javascript.rhino.jstype.FunctionType
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = NodeUtil.newUndefinedNode();
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.RIGHT);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isQualifiedName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertEquals((-1), node0.getCharno());
      assertEquals(122, node0.getType());
      assertNotNull(node0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node1 = new Node(21, 47, 17);
      assertFalse(node1.equals((Object)node0));
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(11, Node.USES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.LEFT);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertFalse(node1.hasOneChild());
      assertEquals(47, node1.getLineno());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isUnscopedQualifiedName());
      assertEquals(21, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isQualifiedName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.hasChildren());
      assertFalse(node1.wasEmptyNode());
      assertEquals(17, node1.getCharno());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isOptionalArg());
      assertNotNull(node1);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = NodeUtil.opToStrNoFail(29);
      assertEquals("-", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4'8]~@?y*mQ,oQO9");
      assertFalse(boolean0);
      
      boolean boolean1 = NodeUtil.isSimpleOperatorType(96);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Node node0 = Node.newString("@BYAxuqz5kTg", 96, (-1648));
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.BOTH);
      assertEquals(11, Node.USES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(19, Node.LABEL_PROP);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.TARGET_PROP);
      assertEquals(6, Node.TEMP_PROP);
      assertEquals(27, Node.SPECIALCALL_PROP);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.DEFAULT_PROP);
      assertEquals(29, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.FIXUPS_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.REGEXP_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(34, Node.PARENTHESIZED_PROP);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DIRECTCALL_PROP);
      assertEquals(21, Node.LOCALCOUNT_PROP);
      assertEquals(49, Node.LAST_PROP);
      assertEquals(15, Node.CASEARRAY_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(36, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
      assertEquals(4, Node.ENUM_PROP);
      assertEquals(10, Node.VARS_PROP);
      assertEquals(13, Node.CASES_PROP);
      assertEquals(24, Node.LASTUSE_PROP);
      assertEquals(22, Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.INCRDECR_PROP);
      assertEquals(17, Node.TYPE_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.BREAK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(5, Node.FUNCTION_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(35, Node.QUOTED_PROP);
      assertEquals(7, Node.LOCAL_PROP);
      assertEquals(0, Node.LABEL_ID_PROP);
      assertEquals(38, Node.SOURCEFILE_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.CODEOFFSET_PROP);
      assertEquals(25, Node.ISNUMBER_PROP);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
      assertEquals(20, Node.FINALLY_PROP);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
      assertEquals(23, Node.VARIABLE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(3, Node.CONTINUE_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(33, Node.NAME_PROP);
      assertEquals(42, Node.NO_SIDE_EFFECTS_CALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isQuotedString());
      assertNotNull(node0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(41);
      assertNotNull(nodeUtil_MatchNodeType0);
      
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType1 = new NodeUtil.MatchNodeType(1669);
      assertFalse(nodeUtil_MatchNodeType1.equals((Object)nodeUtil_MatchNodeType0));
      assertNotNull(nodeUtil_MatchNodeType1);
      
      boolean boolean2 = nodeUtil_MatchNodeType1.equals(linkedList0);
      assertFalse(nodeUtil_MatchNodeType1.equals((Object)nodeUtil_MatchNodeType0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(nodeUtil_MatchNodeType1, nodeUtil_MatchNodeType0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(98);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 98: HOOK
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }
}
