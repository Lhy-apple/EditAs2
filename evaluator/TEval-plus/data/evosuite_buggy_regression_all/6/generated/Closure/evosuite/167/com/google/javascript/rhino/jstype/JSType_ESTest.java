/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:08:52 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      Node node0 = Node.newNumber(0.0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "Named type with empty name component", node0, stringType0);
      ObjectType objectType0 = enumType0.getImplicitPrototype();
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, enumType0);
      FunctionType functionType0 = indexedType0.getConstructor();
      assertFalse(functionType0.isEnumElementType());
      
      stringType0.getTypesUnderInequality(functionType0);
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isFunctionType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(stringType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      JSType.TypePair jSType_TypePair0 = templateType0.getTypesUnderShallowEquality(stringType0);
      boolean boolean0 = jSType_TypePair0.typeB.isNumber();
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(boolean0);
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(templateType0.isResolved());
      assertFalse(stringType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "s4|nCD+5-.");
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "s4|nCD+5-.", "|:Ax~&/~K,:dx;FEQ(q", 0, 1);
      Node node0 = Node.newString(0, "", 1, (-491));
      namedType0.defineDeclaredProperty("", errorFunctionType0, node0);
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      ObjectType objectType0 = instanceObjectType0.getImplicitPrototype();
      boolean boolean0 = objectType0.isStringValueType();
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      boolean boolean0 = errorFunctionType0.matchesUint32Context();
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "P[>!J=G~mm=G+]Huqq");
      JSType jSType0 = errorFunctionType0.autobox();
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.isFunctionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
      assertNotNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.getJSDocInfo();
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      JSType jSType0 = stringType0.getGreatestSubtype(recordType0);
      assertTrue(recordType0.hasCachedValues());
      
      String string0 = jSType0.toDebugHashCodeString();
      assertEquals("function (this:me, {9}): me", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      boolean boolean0 = numberType0.isRegexpType();
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.collapseUnion();
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      boolean boolean0 = numberType0.isString();
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      String string0 = noResolvedType0.toAnnotationString();
      assertEquals("?", string0);
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      AllType allType0 = new AllType(jSTypeRegistry0);
      JSType.toMaybeParameterizedType((JSType) allType0);
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.isNullable();
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.unboxesTo();
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("m]Jt>nH?]iI[UndrmQ", (Node) null, noObjectType0);
      boolean boolean0 = enumType0.canTestForEqualityWith(noObjectType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
      boolean boolean0 = templateType0.isNominalConstructor();
      assertFalse(templateType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      boolean boolean0 = templateType0.isArrayType();
      assertFalse(templateType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
      // Undeclared exception!
      try { 
        templateType0.setValidator((Predicate<JSType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isBooleanValueType();
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(voidType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.canBeCalled();
      assertFalse(boolean0);
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(nullType0);
      boolean boolean0 = jSType0.hasDisplayName();
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(nullType0.isNoType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", (Node) null, noType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) enumType0, (JSType) enumElementType0, (JSType) noType0, (JSType) enumType0, (JSType) enumType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality(enumType0);
      boolean boolean0 = jSType_TypePair0.typeB.isOrdinaryFunction();
      assertTrue(noType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(voidType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ObjectType objectType0 = stringType0.dereference();
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isResolved());
      assertNotNull(objectType0);
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) noResolvedType0);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, noResolvedType0, templateType0);
      boolean boolean0 = indexedType0.isNamedType();
      assertFalse(indexedType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      numberType0.matchConstraint(recordType0);
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(numberType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.matchesInt32Context();
      assertFalse(stringType0.isResolved());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isInstanceType();
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, recordType0, recordType0);
      boolean boolean0 = parameterizedType0.isCheckedUnknownType();
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(recordType0.isNoType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(recordType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, stringType0);
      JSType.safeResolve(parameterizedType0, simpleErrorReporter0, parameterizedType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(stringType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      boolean boolean0 = numberType0.isTheObjectType();
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
      assertFalse(boolean0);
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AllType allType0 = new AllType((JSTypeRegistry) null);
      boolean boolean0 = allType0.matchesNumberContext();
      assertFalse(boolean0);
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      boolean boolean0 = stringType0.isEnumType();
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      Node node0 = Node.newNumber((double) 1);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) stringType0, node0);
      stringType0.forceResolve((ErrorReporter) null, functionType0);
      assertTrue(stringType0.isResolved());
      assertFalse(functionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      numberType0.clearResolved();
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a type name");
      JSType.TypePair jSType_TypePair0 = templateType0.getTypesUnderEquality(stringType0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      NoType noType0 = new NoType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of(jSType_TypePair0.typeB, (JSType) templateType0, (JSType) templateType0, jSType_TypePair0.typeB, (JSType) templateType0, (JSType) templateType0, (JSType) recordType0, (JSType) templateType0, (JSType) recordType0, (JSType) instanceObjectType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      String string0 = unionType0.toStringHelper(false);
      assertFalse(unionType0.isNoResolvedType());
      assertEquals("(Not declared as a type name|string|{...}|{})", string0);
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a type name");
      boolean boolean0 = templateType0.hasDisplayName();
      assertFalse(templateType0.isResolved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
      boolean boolean0 = templateType0.hasDisplayName();
      assertFalse(templateType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      boolean boolean0 = noResolvedType0.canTestForShallowEqualityWith(instanceObjectType0);
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(boolean0);
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ErrorFunctionType errorFunctionType1 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      boolean boolean0 = errorFunctionType1.canTestForShallowEqualityWith(errorFunctionType0);
      assertFalse(errorFunctionType1.isResolved());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      boolean boolean0 = templateType0.isGlobalThisType();
      assertFalse(templateType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) null);
      assertNull(functionType0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, stringType0, "Not declared as a type name");
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Not declared as a type name", (Node) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      errorFunctionType0.testForEqualityHelper(functionType0, enumElementType0);
      assertTrue(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", (Node) null, noType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) enumType0, (JSType) enumElementType0, (JSType) noType0, (JSType) enumType0, (JSType) enumType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality(enumType0);
      boolean boolean0 = jSType_TypePair0.typeA.isEnumType();
      assertTrue(noType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
      assertNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(templateType0);
      assertTrue(templateType0.isTemplateType());
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      assertNull(templateType0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      boolean boolean0 = noObjectType0.hasAnyTemplateInternal();
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(boolean0);
      assertFalse(noObjectType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      boolean boolean0 = errorFunctionType0.isNominalConstructor();
      assertTrue(boolean0);
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[5] = (JSType) stringType0;
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      errorFunctionType0.setSource(node0);
      boolean boolean0 = errorFunctionType0.isNominalConstructor();
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, stringType0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
      templateType0.getTypesUnderShallowEquality(parameterizedType0);
      assertTrue(parameterizedType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(templateType0.isResolved());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, stringType0);
      boolean boolean0 = parameterizedType0.isEquivalentTo(errorFunctionType0);
      assertFalse(parameterizedType0.isResolved());
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(parameterizedType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType.isEquivalent(noResolvedType0, noResolvedType0);
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "REGEXP");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(arrowType0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = numberType0.getTypesUnderShallowInequality(jSType0);
      boolean boolean0 = arrowType0.equals(jSType_TypePair0);
      assertFalse(numberType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(boolean0);
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNullType());
      assertTrue(jSType0.isUnionType());
      assertFalse(numberType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
      templateType0.equals(stringType0);
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(templateType0.isResolved());
      assertFalse(stringType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      numberType0.findPropertyType("");
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      NoType noType0 = (NoType)unionType0.meet(stringType0);
      boolean boolean0 = stringType0.canAssignTo(noType0);
      assertTrue(noType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      NullType nullType0 = new NullType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, objectType0, nullType0);
      boolean boolean0 = parameterizedType0.canAssignTo(objectType0);
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(parameterizedType0.isResolved());
      assertTrue(boolean0);
      assertFalse(nullType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      AllType allType0 = new AllType(jSTypeRegistry0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      boolean boolean0 = noType0.canTestForEqualityWith(allType0);
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "P[>!J=G~mm=G+]Huqq");
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) templateType0, (JSType) templateType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.getTypesUnderInequality(unionType0);
      assertFalse(unionType0.isNoObjectType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.testForEquality(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a type name");
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      errorFunctionType0.testForEqualityHelper(templateType0, stringType0);
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noResolvedType0, errorFunctionType0);
      parameterizedType0.testForEquality(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(noResolvedType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noType0, nullType0);
      parameterizedType0.testForEquality(noType0);
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, stringType0, "Not declared as a type name");
      stringType0.testForEquality(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(stringType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalType(numberType0);
      numberType0.testForEquality(jSType0);
      assertFalse(numberType0.isNoType());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      NullType nullType0 = new NullType(jSTypeRegistry0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(noType0, nullType0);
      boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(parameterizedType0);
      assertTrue(noType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      boolean boolean0 = noObjectType0.canTestForShallowEqualityWith(stringType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a type name");
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(templateType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "r&xSg8G_Z`cp*");
      NullType nullType0 = new NullType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(nullType0);
      JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderShallowInequality(errorFunctionType0);
      jSType_TypePair0.typeB.getLeastSupertype(jSType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
      JSType jSType0 = JSType.getLeastSupertype((JSType) templateType0, (JSType) templateType0);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
      boolean boolean0 = templateType0.canTestForShallowEqualityWith(templateType0);
      assertTrue(boolean0);
      assertFalse(templateType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "No=\"2D#$OFWE");
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "Not declared as a constructor", errorFunctionType0);
      boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(prototypeObjectType0);
      assertTrue(prototypeObjectType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      NullType nullType0 = new NullType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(nullType0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, jSType0);
      parameterizedType0.testForEquality(jSType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(numberType0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(jSType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, stringType0, ".!W6R%m;R;a}");
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType("Not declared as a constructor", (Node) null);
      JSType.TypePair jSType_TypePair0 = enumElementType0.getTypesUnderShallowInequality(functionType0);
      boolean boolean0 = functionType0.canTestForShallowEqualityWith(jSType_TypePair0.typeA);
      assertTrue(functionType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "M[FJ[<Fs");
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)errorFunctionType0.getReturnType();
      boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(instanceObjectType0);
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0);
      instanceObjectType0.getLeastSupertype(noResolvedType0);
      assertTrue(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      JSType jSType0 = functionType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a constructor");
      JSType jSType0 = templateType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "P[>!J=G~mm=G+]Huqq");
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Named type with empty name component");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, (JSType) templateType0, (JSType) templateType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0, (JSType) errorFunctionType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.getTypesUnderEquality(unionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      stringType0.getTypesUnderEquality(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(nullType0);
      assertFalse(nullType0.isNoType());
      
      jSType0.getTypesUnderEquality(nullType0);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      NullType nullType0 = new NullType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(errorFunctionType0);
      jSType0.getTypesUnderShallowInequality(nullType0);
      assertFalse(jSType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Not declared as a type name");
      boolean boolean0 = templateType0.differsFrom(stringType0);
      assertFalse(templateType0.isResolved());
      assertFalse(stringType0.isNoResolvedType());
      assertTrue(boolean0);
      assertFalse(stringType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      boolean boolean0 = errorFunctionType0.differsFrom(voidType0);
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
      boolean boolean0 = stringType0.differsFrom(templateType0);
      assertFalse(stringType0.isNoObjectType());
      assertTrue(boolean0);
      assertFalse(templateType0.isResolved());
      assertFalse(stringType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, unionType0);
      boolean boolean0 = unionType0.differsFrom(proxyObjectType0);
      assertFalse(proxyObjectType0.isNoObjectType());
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseAllType();
      boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith(jSType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType.safeResolve((JSType) null, simpleErrorReporter0, noType0);
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isNoResolvedType());
  }
}
