/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:07:50 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.MakeDeclaredNamesUnique;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.FunctionPrototypeType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeValidator_ESTest extends TypeValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "");
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectBitwiseable(nodeTraversal0, node0, functionType0, "Not declared as a type name");
      assertEquals(1, compiler0.getWarningCount());
      assertTrue(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeValidator");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, makeDeclaredNamesUnique0);
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, objectType0, "arguments");
      assertTrue(objectType0.hasCachedValues());
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.google.jCvaGcrivt.jscomp.TypeValidator", "");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      Iterable<TypeValidator.TypeMismatch> iterable0 = typeValidator0.getMismatches();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      typeValidator0.setShouldReport(false);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      FunctionPrototypeType functionPrototypeType0 = functionType0.getPrototype();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", functionType0);
      typeValidator0.expectCanOverride(nodeTraversal0, node0, enumType0, functionPrototypeType0, "Not declared as a constructor", functionType0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "");
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("com.google.javascript.jscomp.TypeValidator", objectType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(enumElementType0, enumElementType0);
      String string0 = typeValidator_TypeMismatch0.toString();
      assertEquals("(com.google.javascript.jscomp.TypeValidator.<{}>, com.google.javascript.jscomp.TypeValidator.<{}>)", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.go~gye.javascript.jscPmp.TypeValidator", "com.go~gye.javascript.jscPmp.TypeValidator");
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0, (ScopeCreator) null);
      boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, functionType0, "w");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "JSC_TYPE_MISMATCH");
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType jSType0 = jSTypeRegistry0.createNamedType("arguments", "arguments", 132, 49);
      JSType jSType1 = jSTypeRegistry0.getGreatestSubtypeWithProperty(jSType0, "JSC_TYPE_MISMATCH");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0, (ScopeCreator) null);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      JSType jSType2 = jSTypeRegistry0.createOptionalNullableType(jSType1);
      boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, jSType2, ")bj&DnU_DulklfLuV)@");
      assertEquals(1, compiler0.getWarningCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      typeValidator0.expectActualObject(nodeTraversal0, (Node) null, functionType0, "a_;74s#,");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      FunctionPrototypeType functionPrototypeType0 = functionType0.getPrototype();
      typeValidator0.expectAnyObject(nodeTraversal0, (Node) null, functionPrototypeType0, "Named type with empty name component");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.go~gye.javascript.jscPmp.TypeValidator", "com.go~gye.javascript.jscPmp.TypeValidator");
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NoType noType0 = (NoType)jSTypeRegistry0.getGreatestSubtypeWithProperty(functionType0, "com.go~gye.javascript.jscPmp.TypeValidator");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0, (ScopeCreator) null);
      typeValidator0.expectAnyObject(nodeTraversal0, node0, noType0, "TightenTypes pass appears to be stuck in an infinite loop.");
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "com.google.javascript.jscomp.TypeValidator");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("com.google.javascript.jscomp.TypeValidator", functionType0);
      typeValidator0.expectString(nodeTraversal0, node0, enumType0, "Not declared as a type name");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "com.google.javascript.jscomp.TypeValidator");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0, (ScopeCreator) null);
      typeValidator0.expectIndexMatch(nodeTraversal0, node0, objectType0, objectType0);
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.go~gye.javascript.jscPmp.TypeValidator", "com.go~gye.javascript.jscPmp.TypeValidator");
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(functionType0, "com.go~gye.javascript.jscPmp.TypeValidator");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0, (ScopeCreator) null);
      typeValidator0.expectNumber(nodeTraversal0, node0, jSType0, "Not declared as a type name");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "com.google.javascript.jscomp.TypeValidator");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", functionType0);
      typeValidator0.expectNumber(nodeTraversal0, node0, enumType0, "Unknown class name");
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.go~gye.javascript.jscPmp.TypeValidator");
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(functionType0, "com.go~gye.javascript.jscPmp.TypeValidator");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectBitwiseable(nodeTraversal0, node0, jSType0, "Unknown class name");
      assertFalse(jSType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "com.google.javascript.jscomp.TypeValidator");
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      NoType noType0 = (NoType)jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) null, "TYPEOF");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0, syntacticScopeCreator0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("Named type with empty name component", "<?", 1, 1);
      typeValidator0.expectIndexMatch(nodeTraversal0, node0, jSType0, noType0);
      assertFalse(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "com.google.javascript.jscomp.TypeValidator");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("N_UbC,I`X^DWK%~", objectType0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0, (ScopeCreator) null);
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, enumType0, "// Input %num%");
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.go~gye.javascript.jscPmp.TypeValidator", "com.go~gye.javascript.jscPmp.TypeValidator");
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(functionType0, "com.go~gye.javascript.jscPmp.TypeValidator");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0, (ScopeCreator) null);
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, (Node) null, jSType0, "Not declared as a constructor", functionType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "com.google.javascript.jscomp.TypeValidator");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      Scope scope0 = new Scope(node0, compiler0);
      JSType jSType0 = jSTypeRegistry0.getForgivingType(scope0, "com.google.javascript.jscomp.TypeValidator", "com.google.javascript.jscomp.TypeValidator", 25, 15);
      ObjectType objectType0 = ObjectType.cast(jSType0);
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, objectType0, ",WQD", jSType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, functionType0, "com.google.javascript.jscomp.UnreachableCodeElimination", functionType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "com.google.javascript.jscomp.TypeValidator");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0, (ScopeCreator) null);
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) objectType0, (List<JSType>) arrayList0);
      typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, functionType0, functionType0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.go~gye.javascript.jscPmp.TypeValidator", "com.go~gye.javascript.jscPmp.TypeValidator");
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(functionType0, "com.go~gye.javascript.jscPmp.TypeValidator");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0, (ScopeCreator) null);
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, functionType0, jSType0, node0, "Unknown class name");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("", "");
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, functionType0, functionType0, node0, "Not declared as a type name");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "com.google.javascript.jscomp.TypeValidator");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, functionType0);
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, enumType0, functionType0, node0, "com.google.javascript.jscomp.TypeValidator");
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "zMkiJNE");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, functionType0, functionType0, "Not declared as a constructor");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, makeDeclaredNamesUnique0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("com.google.javascript.jscomp.TypeValidator", objectType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, enumType0, enumElementType0, "^W=TD;um\"1(n");
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "com.google.javascript.jscomp.TypeValidator");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, functionType0);
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, functionType0, enumType0, "Not declared as a constructor");
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "com.google.javascript.jscomp.TypeValidator");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0, (ScopeCreator) null);
      typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, objectType0, objectType0, node0, 0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "");
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      FunctionPrototypeType functionPrototypeType0 = functionType0.getPrototype();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      // Undeclared exception!
      try { 
        typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, functionPrototypeType0, functionType0, node0, 49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "");
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectCanOverride(nodeTraversal0, node0, functionType0, functionType0, "", functionType0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      FunctionPrototypeType functionPrototypeType0 = functionType0.getPrototype();
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", functionType0);
      typeValidator0.expectCanOverride(nodeTraversal0, node0, enumType0, functionPrototypeType0, "Not declared as a constructor", functionType0);
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, functionType0);
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.go~gye.javascript.jscPmp.TypeValidator", "com.go~gye.javascript.jscPmp.TypeValidator");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      // Undeclared exception!
      try { 
        typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      typeValidator0.setShouldReport(false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, functionType0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      typeValidator0.expectCanCast(nodeTraversal0, node0, functionType0, functionType0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.go~gye.javascript.jscPmp.TypeValidator", "com.go~gye.javascript.jscPmp.TypeValidator");
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NoType noType0 = (NoType)jSTypeRegistry0.getGreatestSubtypeWithProperty(functionType0, "com.go~gye.javascript.jscPmp.TypeValidator");
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0, (ScopeCreator) null);
      typeValidator0.expectCanCast(nodeTraversal0, node0, functionType0, noType0);
      assertTrue(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "com.google.javascript.jscomp.TypeValidator");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      typeValidator0.setShouldReport(false);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0, (ScopeCreator) null);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      FunctionPrototypeType functionPrototypeType0 = functionType0.getPrototype();
      typeValidator0.expectCanCast(nodeTraversal0, node0, functionType0, functionPrototypeType0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "com.google.javascript.jscomp.TypeValidator");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, (CodingConvention) null);
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Not declared as a type name", "");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("com.google.javascript.jscomp.RemoveUnusedPrototypeProperties", node0, objectType0, compilerInput0, false);
      // Undeclared exception!
      try { 
        typeValidator0.expectUndeclaredVariable((String) null, node0, node0, scope_Var0, "\"h*m3", objectType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeValidator");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Unknown class name", "Named type with empty name component");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("Unknown class name", node0, (JSType) null, compilerInput0, true);
      typeValidator0.expectUndeclaredVariable("$a|AsM[1jpgT$&B", node0, node0, scope_Var0, "com.google.javascript.jscomp.TypeValidator$TypeMismatch", (JSType) null);
      assertEquals(1, Node.PROPERTY_FLAG);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("com.google.javascript.jscomp.TypeValidator");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode("Unknown class name", "Named type with empty name component");
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0);
      Scope.Var scope_Var0 = scope0.declare("only arrays or objects can be accessed", node0, objectType0, compilerInput0, true);
      typeValidator0.expectUndeclaredVariable("$a|AsM[1jpgT$&B", node0, node0, scope_Var0, "z~>laHe", (JSType) null);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("", "");
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      typeValidator0.expectAllInterfaceProperties(nodeTraversal0, node0, functionType0);
      assertEquals(0, node0.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      typeValidator0.setShouldReport(false);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, (NodeTraversal.Callback) null, (ScopeCreator) null);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_INSTANCE_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", functionType0);
      EnumElementType enumElementType0 = enumType0.getElementsType();
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, (Node) null, enumElementType0, enumType0, ";5j<");
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "com.google.javascript.jscomp.TypeValidator");
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      EnumType enumType0 = jSTypeRegistry0.createEnumType((String) null, objectType0);
      ObjectType objectType1 = enumType0.getImplicitPrototype();
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, objectType1, enumType0, node0, "TightenTypes pass appears to be stuck in an infinite loop.");
      assertEquals(1, compiler0.getWarningCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "com.google.javascript.jscomp.TypeValidator");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[1] = (JSType) functionType0;
      FunctionType functionType1 = jSTypeRegistry0.createConstructorTypeWithVarArgs(functionType0, jSTypeArray0);
      // Undeclared exception!
      try { 
        typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, functionType1, functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "com.google.javascript.jscomp.TypeValidator");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      MakeDeclaredNamesUnique makeDeclaredNamesUnique0 = new MakeDeclaredNamesUnique();
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, makeDeclaredNamesUnique0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) functionType0;
      jSTypeArray0[1] = (JSType) functionType0;
      FunctionType functionType1 = jSTypeRegistry0.createConstructorTypeWithVarArgs(functionType0, jSTypeArray0);
      typeValidator0.expectCanCast(nodeTraversal0, node0, functionType1, jSTypeArray0[0]);
      assertTrue(functionType1.hasCachedValues());
      assertEquals(1, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("(uv]l", "(uv]l");
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      String string0 = typeValidator0.getReadableJSTypeName(node0, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.google.javascript.jscomp.TypeValidator", "");
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      FunctionPrototypeType functionPrototypeType0 = functionType0.getPrototype();
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(functionType0, functionPrototypeType0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.go~gye.javascript.jscPmp.TypeValidator", "com.go~gye.javascript.jscPmp.TypeValidator");
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(functionType0, "com.go~gye.javascript.jscPmp.TypeValidator");
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      compiler0.parseSyntheticCode("com.go~gye.javascript.jscPmp.TypeValidator", "com.go~gye.javascript.jscPmp.TypeValidator");
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      JSType jSType0 = jSTypeRegistry0.getGreatestSubtypeWithProperty(functionType0, "com.go~gye.javascript.jscPmp.TypeValidator");
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch1 = new TypeValidator.TypeMismatch(functionType0, functionType0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals(typeValidator_TypeMismatch1);
      assertFalse(boolean0);
  }
}
