/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:05:02 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.FunctionBuilder;
import com.google.javascript.rhino.jstype.FunctionParamBuilder;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NumberType;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionBuilder_ESTest extends FunctionBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionBuilder functionBuilder0 = new FunctionBuilder(jSTypeRegistry0);
      FunctionBuilder functionBuilder1 = functionBuilder0.withTemplateName("Named type with empty name component");
      assertSame(functionBuilder0, functionBuilder1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionBuilder functionBuilder0 = new FunctionBuilder(jSTypeRegistry0);
      FunctionType functionType0 = functionBuilder0.build();
      functionBuilder0.withTypeOfThis(functionType0);
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionBuilder functionBuilder0 = new FunctionBuilder(jSTypeRegistry0);
      FunctionParamBuilder functionParamBuilder0 = new FunctionParamBuilder(jSTypeRegistry0);
      FunctionBuilder functionBuilder1 = functionBuilder0.withParams(functionParamBuilder0);
      assertSame(functionBuilder1, functionBuilder0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionBuilder functionBuilder0 = new FunctionBuilder(jSTypeRegistry0);
      FunctionBuilder functionBuilder1 = functionBuilder0.forConstructor();
      assertSame(functionBuilder1, functionBuilder0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionBuilder functionBuilder0 = new FunctionBuilder(jSTypeRegistry0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (List<JSType>) linkedList0);
      functionBuilder0.copyFromOtherFunction(functionType0);
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionBuilder functionBuilder0 = new FunctionBuilder(jSTypeRegistry0);
      FunctionType functionType0 = functionBuilder0.build();
      functionBuilder0.withInferredReturnType(functionType0);
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FunctionBuilder functionBuilder0 = new FunctionBuilder((JSTypeRegistry) null);
      FunctionBuilder functionBuilder1 = functionBuilder0.withSourceNode((Node) null);
      assertSame(functionBuilder0, functionBuilder1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionBuilder functionBuilder0 = new FunctionBuilder(jSTypeRegistry0);
      FunctionBuilder functionBuilder1 = functionBuilder0.withName("Named type with empty name component");
      assertSame(functionBuilder0, functionBuilder1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      FunctionBuilder functionBuilder0 = new FunctionBuilder(jSTypeRegistry0);
      FunctionBuilder functionBuilder1 = functionBuilder0.forNativeType();
      assertSame(functionBuilder1, functionBuilder0);
  }
}
