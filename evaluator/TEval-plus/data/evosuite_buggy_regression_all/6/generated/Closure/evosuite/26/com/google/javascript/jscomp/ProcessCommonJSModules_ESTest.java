/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:53:33 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.ProcessCommonJSModules;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ProcessCommonJSModules_ESTest extends ProcessCommonJSModules_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "goog", "goog");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "goog");
      processCommonJSModules0.process(node0, node0);
      processCommonJSModules0.process(node0, node0);
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, ".r../{_ZOV[V~:kKfw2/");
      JSModule jSModule0 = processCommonJSModules0.getModule();
      assertNull(jSModule0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "M3h ch2=#H1Sh,");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "module.exports", "M3h ch2=#H1Sh,");
      processCommonJSModules0.process(node0, node0);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ProcessCommonJSModules.toModuleName("./VhpV\"%y /8N9Gntul", "./VhpV\"%y /8N9Gntul");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.net.URISyntaxException: Illegal character in path at index 6: ./VhpV\"%y /8N9Gntul
         //
         verifyException("com.google.javascript.jscomp.ProcessCommonJSModules", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("../", "../");
      assertEquals("module$..$..$", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = ProcessCommonJSModules.toModuleName("uZd>", "uZd>");
      assertEquals("module$uZd>", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules((AbstractCompiler) null, "){ p}!c+!x-8Q{1r|/");
      String string0 = processCommonJSModules0.guessCJSModuleName("){ p}!c+!x-8Q{1r|/");
      assertEquals("module$", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "goog", "goog");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "goog");
      Node node1 = new Node(37, node0, 47, 1488);
      processCommonJSModules0.process(node0, node1);
      assertFalse(node1.isDebugger());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "./../{_ZOV[V~*kKfw2");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "./", "./");
      Node node1 = compiler0.parseTestCode("./");
      Node node2 = new Node(45, node0, node1);
      // Undeclared exception!
      try { 
        processCommonJSModules0.process(node2, node2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // ProcessCommonJSModules supports only one invocation per CompilerInput / script node
         //   Node(SCRIPT): [testcode]:-1:-1
         // [source unknown]
         //   Parent(SHEQ): [testcode]:-1:-1
         // [source unknown]
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "-w@j:8,cU,r2", "-w@j:8,cU,r2");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "-w@j:8,cU,r2", false);
      processCommonJSModules0.process(node0, node0);
      assertFalse(node0.isThis());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "exports");
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "exports", "exports");
      processCommonJSModules0.process(node0, node0);
      assertFalse(node0.isName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "var COMPILED = fase;", "var COMPILED = fase;");
      ProcessCommonJSModules processCommonJSModules0 = new ProcessCommonJSModules(compiler0, "var COMPILED = fase;");
      processCommonJSModules0.process(node0, node0);
      assertEquals(30, Node.VAR_ARGS_NAME);
  }
}
