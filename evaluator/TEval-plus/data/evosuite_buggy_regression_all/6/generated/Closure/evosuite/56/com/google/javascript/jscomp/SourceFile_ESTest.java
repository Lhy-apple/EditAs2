/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 26 23:55:14 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SimpleRegion;
import com.google.javascript.jscomp.SourceFile;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.Reader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SourceFile_ESTest extends SourceFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("2c[9$bk", (SourceFile.Generator) null);
      sourceFile_Generated0.clearCachedSource();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("com.google.javascript.jscomp.SourceFile$OnDisk");
      sourceFile0.clearCachedSource();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromGenerator("2c[9$bk", (SourceFile.Generator) null);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SourceFile sourceFile0 = SourceFile.fromInputStream("60%sOt^c{v\"n\"l_wUo5", "Not a directory: %s", (InputStream) byteArrayInputStream0);
      // Undeclared exception!
      try { 
        sourceFile0.getLineOffset((-1653));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: -1653
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromCode("X1rp2", "r");
      Reader reader0 = sourceFile0.getCodeReader();
      // Undeclared exception!
      try { 
        SourceFile.fromReader("", reader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SourceFile sourceFile0 = SourceFile.fromInputStream("q-6lc[,t", "q-6lc[,t", (InputStream) byteArrayInputStream0);
      sourceFile0.clearCachedSource();
      assertEquals("q-6lc[,t", sourceFile0.getOriginalPath());
      assertFalse(sourceFile0.isExtern());
      assertEquals("q-6lc[,t", sourceFile0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("com.google.javascript.jscomp.SourceFile", (SourceFile.Generator) null);
      sourceFile_Generated0.getCodeNoCache();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("kP%Jk1");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      sourceFile_OnDisk0.getName();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = MockFile.createTempFile("Tn=ej2rz", "X}{WZPySmLig(y.&");
      Charset charset0 = Charset.defaultCharset();
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0, charset0);
      assertFalse(sourceFile_OnDisk0.isExtern());
      
      sourceFile_OnDisk0.setIsExtern(true);
      assertTrue(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("kP%Jk1");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      sourceFile_OnDisk0.toString();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SourceFile sourceFile0 = SourceFile.fromInputStream("IOException should not have been thrown.", (InputStream) byteArrayInputStream0);
      assertFalse(sourceFile0.isExtern());
      assertEquals("IOException should not have been thrown.", sourceFile0.getOriginalPath());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("UTF-16", (SourceFile.Generator) null);
      boolean boolean0 = sourceFile_Generated0.isExtern();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SourceFile.Generated sourceFile_Generated0 = null;
      try {
        sourceFile_Generated0 = new SourceFile.Generated((String) null, (SourceFile.Generator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile("com.google.javascript.jscomp.SourceFile$OnDisk");
      sourceFile_OnDisk0.getNumLines();
      int int0 = sourceFile_OnDisk0.getLineOffset(1);
      assertEquals(0, int0);
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("%s (%s) must be less than size (%s)");
      // Undeclared exception!
      try { 
        sourceFile0.getLineOffset((byte)2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: 2
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.google.javascript.jscomp.SourceFile", "com.google.javascript.jscomp.SourceFile");
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(file0);
      sourceFile_OnDisk0.getNumLines();
      sourceFile_OnDisk0.getNumLines();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromInputStream("60%sOt^c{v\"n\"l_wUo5", "Not a directory: %s", (InputStream) byteArrayInputStream0);
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertEquals("60%sOt^c{v\"n\"l_wUo5", sourceFile_Preloaded0.getName());
      assertEquals("Not a directory: %s", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(2, int0);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Charset charset0 = Charset.forName("UTF-16BE");
      SourceFile sourceFile0 = SourceFile.fromFile("2c[9$bk", charset0);
      String string0 = sourceFile0.getOriginalPath();
      assertNotNull(string0);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.google.javascript.jscomp.SourceFile", "com.google.javascript.jscomp.SourceFile");
      SourceFile sourceFile0 = SourceFile.fromFile(file0);
      sourceFile0.setOriginalPath("");
      sourceFile0.getOriginalPath();
      assertEquals("", sourceFile0.getOriginalPath());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.google.javascript.jscomp.SourceFile", "com.google.javascript.jscomp.SourceFile");
      SourceFile sourceFile0 = SourceFile.fromFile(file0);
      sourceFile0.getCodeReader();
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SourceFile sourceFile0 = SourceFile.fromInputStream("q-6lc+r[,", "q-6lc+r[,", (InputStream) byteArrayInputStream0);
      String string0 = sourceFile0.getLine((byte)10);
      assertFalse(sourceFile0.isExtern());
      assertEquals("q-6lc+r[,", sourceFile0.getOriginalPath());
      assertNull(string0);
      assertEquals("q-6lc+r[,", sourceFile0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SourceFile sourceFile0 = SourceFile.fromInputStream("q-6lc+r[,", "q-6lc+r[,", (InputStream) byteArrayInputStream0);
      String string0 = sourceFile0.getLine((byte) (-1));
      assertNotNull(string0);
      assertFalse(sourceFile0.isExtern());
      assertEquals("q-6lc+r[,", sourceFile0.getOriginalPath());
      assertEquals("\u0000\u0000", string0);
      assertEquals("q-6lc+r[,", sourceFile0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SourceFile sourceFile0 = SourceFile.fromInputStream("q-6lc+r[,", "q-6lc+r[,", (InputStream) byteArrayInputStream0);
      Region region0 = sourceFile0.getRegion(1904);
      assertNull(region0);
      assertEquals("q-6lc+r[,", sourceFile0.getOriginalPath());
      assertEquals("q-6lc+r[,", sourceFile0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SourceFile sourceFile0 = SourceFile.fromInputStream("Cannot write to a closed writer.", "{8g t4AF,_UJe", (InputStream) byteArrayInputStream0);
      Region region0 = sourceFile0.getRegion((byte) (-117));
      assertEquals("\u0000\u0000\u0000\n\n\n\n\n", region0.getSourceExcerpt());
      assertEquals("{8g t4AF,_UJe", sourceFile0.getOriginalPath());
      assertNotNull(region0);
      assertEquals(6, region0.getEndingLineNumber());
      assertEquals("Cannot write to a closed writer.", sourceFile0.getName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SourceFile sourceFile0 = SourceFile.fromInputStream("q-6lc+r[,", "q-6lc+r[,", (InputStream) byteArrayInputStream0);
      Region region0 = sourceFile0.getRegion((-17));
      assertEquals("q-6lc+r[,", sourceFile0.getOriginalPath());
      assertEquals(1, region0.getBeginningLineNumber());
      assertEquals("q-6lc+r[,", sourceFile0.getName());
      assertEquals("\u0000\u0000", region0.getSourceExcerpt());
      assertEquals(2, region0.getEndingLineNumber());
      assertNotNull(region0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("Tn=ej2rz").when(sourceFile_Generator0).getCode();
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("Tn=ej2rz", sourceFile_Generator0);
      Region region0 = sourceFile_Generated0.getRegion((-49));
      assertEquals("Tn=ej2rz", region0.getSourceExcerpt());
      assertNotNull(region0);
      assertEquals(1, region0.getEndingLineNumber());
      
      int int0 = sourceFile_Generated0.getNumLines();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      File file0 = MockFile.createTempFile("60%sOt^c{v\"n\"l_wUo5", "q-6lc+r[,");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0, (Charset) null);
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.google.javascript.jscomp.SourceFile", "com.google.javascript.jscomp.SourceFile");
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(file0);
      sourceFile_OnDisk0.getNumLines();
      SimpleRegion simpleRegion0 = (SimpleRegion)sourceFile_OnDisk0.getRegion(122);
      assertNull(simpleRegion0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      File file0 = MockFile.createTempFile("60%sOt^c{v\"n\"l_wUo5", "q-6lc[,t");
      Charset charset0 = Charset.defaultCharset();
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0, charset0);
      sourceFile_OnDisk0.getLine((-50));
      sourceFile_OnDisk0.getCodeReader();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }
}
