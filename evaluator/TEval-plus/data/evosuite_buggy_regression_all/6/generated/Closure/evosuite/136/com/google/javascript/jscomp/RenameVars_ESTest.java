/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:04:58 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.NameAnonymousFunctionsMapped;
import com.google.javascript.jscomp.RenameVars;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.ScriptOrFnNode;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RenameVars_ESTest extends RenameVars_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      char[] charArray0 = new char[3];
      TreeSet<String> treeSet0 = new TreeSet<String>();
      RenameVars renameVars0 = new RenameVars(compiler0, "resumGeerat_r", true, true, false, variableMap0, charArray0, treeSet0);
      Node node0 = compiler0.parseTestCode("resumGeerat_r");
      renameVars0.process(node0, node0);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      char[] charArray0 = new char[3];
      TreeSet<String> treeSet0 = new TreeSet<String>();
      RenameVars renameVars0 = new RenameVars(compiler0, "u", true, true, true, variableMap0, charArray0, treeSet0);
      SyntheticAst syntheticAst0 = new SyntheticAst("u");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(true);
      renameVars_ProcessVars0.incCount("L OVERRIDE", (CompilerInput) null);
      renameVars0.process(node0, node0);
      assertEquals((-1), node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      char[] charArray0 = new char[5];
      TreeSet<String> treeSet0 = new TreeSet<String>();
      RenameVars renameVars0 = new RenameVars(compiler0, "Can't remove external name-only definition", false, false, false, (VariableMap) null, charArray0, treeSet0);
      VariableMap variableMap0 = renameVars0.getVariableMap();
      assertNotNull(variableMap0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      char[] charArray0 = new char[3];
      RenameVars renameVars0 = new RenameVars((AbstractCompiler) null, (String) null, false, false, false, (VariableMap) null, charArray0, (Set<String>) null);
      Charset charset0 = Charset.defaultCharset();
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile("CwG/Av};{ST[0363HWx", charset0);
      CompilerInput compilerInput0 = new CompilerInput(jSSourceFile0, false);
      RenameVars.Assignment renameVars_Assignment0 = renameVars0.new Assignment((String) null, compilerInput0);
      renameVars_Assignment0.newName = "CwG/Av};{ST[0363HWx";
      // Undeclared exception!
      try { 
        renameVars_Assignment0.setNewName((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      char[] charArray0 = new char[3];
      TreeSet<String> treeSet0 = new TreeSet<String>();
      RenameVars renameVars0 = new RenameVars(compiler0, "t", true, true, true, variableMap0, charArray0, treeSet0);
      SyntheticAst syntheticAst0 = new SyntheticAst("t");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[1];
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      ObjectType objectType0 = recordType0.getImplicitPrototype();
      jSTypeArray0[0] = (JSType) objectType0;
      Node node1 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      renameVars0.process(node0, node1);
      assertEquals(39, Node.EMPTY_BLOCK);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, true, true, (VariableMap) null, (char[]) null, treeSet0);
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseSyntheticCode((String) null, "com_google.javascript.jscomp.mozilla.rhPno.Node");
      renameVars0.process(scriptOrFnNode0, scriptOrFnNode0);
      assertEquals((-1), scriptOrFnNode0.getEndLineno());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      char[] charArray0 = new char[5];
      TreeSet<String> treeSet0 = new TreeSet<String>();
      RenameVars renameVars0 = new RenameVars(compiler0, "resumGeerat_r", false, false, false, (VariableMap) null, charArray0, treeSet0);
      ScriptOrFnNode scriptOrFnNode0 = (ScriptOrFnNode)compiler0.parseTestCode("resumGeerat_r");
      renameVars0.process(scriptOrFnNode0, scriptOrFnNode0);
      assertEquals(1, ScriptOrFnNode.NO_DUPLICATE);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      char[] charArray0 = new char[3];
      TreeSet<String> treeSet0 = new TreeSet<String>();
      RenameVars renameVars0 = new RenameVars(compiler0, "u", true, true, true, variableMap0, charArray0, treeSet0);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(true);
      renameVars_ProcessVars0.incCount("u", (CompilerInput) null);
      renameVars_ProcessVars0.incCount("u", (CompilerInput) null);
      assertFalse(treeSet0.contains("u"));
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      char[] charArray0 = new char[3];
      TreeSet<String> treeSet0 = new TreeSet<String>();
      RenameVars renameVars0 = new RenameVars(compiler0, "u", true, true, true, variableMap0, charArray0, treeSet0);
      SyntheticAst syntheticAst0 = new SyntheticAst("u");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(true);
      renameVars_ProcessVars0.incCount("u", (CompilerInput) null);
      renameVars0.process(node0, node0);
      renameVars0.process(node0, node0);
      assertFalse(node0.isQuotedString());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      char[] charArray0 = new char[3];
      TreeSet<String> treeSet0 = new TreeSet<String>();
      RenameVars renameVars0 = new RenameVars(compiler0, "u", true, true, true, variableMap0, charArray0, treeSet0);
      SyntheticAst syntheticAst0 = new SyntheticAst("u");
      Node node0 = syntheticAst0.getAstRoot(compiler0);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(true);
      renameVars_ProcessVars0.incCount("", (CompilerInput) null);
      renameVars_ProcessVars0.incCount("u", (CompilerInput) null);
      renameVars0.process(node0, node0);
      assertEquals((-1), node0.getLineno());
  }
}
