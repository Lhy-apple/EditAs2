/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:08:59 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "ck");
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0, false);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) recordType0, (JSType) errorFunctionType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      ObjectType objectType0 = errorFunctionType0.getInstanceType();
      unionType0.getTypesUnderInequality(objectType0);
      assertTrue(unionType0.isUnionType());
      assertFalse(objectType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "ASSIGN_LSH", "ASSIGN_LSH", (-2070), (-2070));
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      namedType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
      assertTrue(namedType0.isResolved());
      assertFalse(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "b0");
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, templateType0, true);
      boolean boolean0 = arrowType0.isStringValueType();
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isResolved());
      assertFalse(boolean0);
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList1);
      boolean boolean0 = unionType0.matchesNumberContext();
      assertTrue(functionType0.isFunctionType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(unionType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = new Node((-766), (-766), 2);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "'cw/2r;g>^>R3[n>fr", templateType0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, node0, prototypeObjectType0);
      ObjectType objectType0 = enumType0.dereference();
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      functionType0.getJSDocInfo();
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = new Node((-766), (-766), (-766));
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", templateType0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, node0, prototypeObjectType0);
      String string0 = enumType0.toDebugHashCodeString();
      assertEquals("{272}", string0);
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
      templateType0.isString();
      assertFalse(templateType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality(unionType0);
      String string0 = jSType_TypePair0.typeA.toAnnotationString();
      assertEquals("*", string0);
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNullType();
      JSType jSType1 = modificationVisitor0.caseNoObjectType();
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.Node$AbstractPropListItem");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) errorFunctionType0, jSType1);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      unionType0.getTypesUnderInequality(jSType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(jSType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = new Node((-766), (-766), 2);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "'cw/2r;g>^>R3[n>fr", templateType0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, node0, prototypeObjectType0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, enumType0, "-kDX~cOD/)`ILa");
      boolean boolean0 = enumElementType0.isNullable();
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(boolean0);
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      boolean boolean0 = noObjectType0.canTestForEqualityWith(jSType0);
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "NO_OBJECT_TYPE");
      boolean boolean0 = templateType0.isNominalConstructor();
      assertFalse(templateType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      recordType0.setValidator(predicate0);
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      JSType jSType0 = noResolvedType0.getPropertyType("STRING_VALUE_OR_OBJECT_TYPE");
      boolean boolean0 = jSType0.isOrdinaryFunction();
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isAllType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "b0");
      JSType jSType0 = jSTypeRegistry0.createFromTypeNodes(node0, "String", templateType0);
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(templateType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "IsAssignableFrom(");
      Node node0 = new Node(1261, 1, 0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "Named type with empty name component", node0, templateType0);
      enumType0.matchesInt32Context();
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = allType0.hasProperty("Not declared as a type name");
      assertFalse(allType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = new Node((-766), (-766), 2);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", templateType0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, node0, prototypeObjectType0);
      enumType0.matchesUint32Context();
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoObjectType();
      jSType0.toMaybeEnumType();
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      boolean boolean0 = errorFunctionType0.isNumberValueType();
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = new Node((-766), (-766), 2);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "'cw/2r;g>^>R3[n>fr", templateType0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, node0, prototypeObjectType0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      allType0.forceResolve((ErrorReporter) null, enumType0);
      assertTrue(allType0.isResolved());
      assertFalse(enumType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
      templateType0.clearResolved();
      assertFalse(templateType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "IsAssignableFrom(");
      JSType.TypePair jSType_TypePair0 = templateType0.getTypesUnderShallowEquality(templateType0);
      Node node0 = new Node(2466, (-1744), 0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "Unknown class name", node0, templateType0);
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) recordType0, (JSType) templateType0, jSType_TypePair0.typeB, (JSType) enumType0);
      Comparator<JSType> comparator0 = JSType.ALPHA;
      // Undeclared exception!
      try { 
        immutableList0.sort(comparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.UnmodifiableListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.isObject());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isConstructor());
      
      boolean boolean0 = objectType0.hasDisplayName();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.isObject());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = Node.newString("NO_OBJECT_TYPE");
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(node0);
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "NO_OBJECT_TYPE");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(templateType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertEquals("NO_OBJECT_TYPE", templateType0.getReferenceName());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNominalConstructor());
      
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "Not declared as a type name", templateType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(prototypeObjectType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertEquals("NO_OBJECT_TYPE", templateType0.getReferenceName());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isNoType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "com.google.common.base.Predicates$InstanceOfPredicate", node0, prototypeObjectType0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(enumType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertEquals("NO_OBJECT_TYPE", templateType0.getReferenceName());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isNoType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isNoType());
      
      boolean boolean0 = enumType0.hasDisplayName();
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertEquals("NO_OBJECT_TYPE", templateType0.getReferenceName());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isNoType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructor());
      
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(prototypeObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructor());
      assertTrue(prototypeObjectType0.isObject());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isNoType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isResolved());
      
      boolean boolean0 = prototypeObjectType0.hasDisplayName();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructor());
      assertTrue(prototypeObjectType0.isObject());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isNoType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      
      NoType[] noTypeArray0 = new NoType[0];
      ImmutableList<NoType> immutableList0 = ImmutableList.of((NoType) noResolvedType0, (NoType) noResolvedType0, (NoType) noResolvedType0, (NoType) noResolvedType0, (NoType) noResolvedType0, (NoType) noResolvedType0, (NoType) noResolvedType0, (NoType) noResolvedType0, (NoType) noResolvedType0, (NoType) noResolvedType0, (NoType) noResolvedType0, (NoType) noResolvedType0, noTypeArray0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(immutableList0);
      assertEquals(0, noTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(12, immutableList0.size());
      
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Iterable<? extends JSType>) immutableList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(immutableList1);
      assertEquals(0, noTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(12, immutableList0.size());
      assertEquals(12, immutableList1.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, (List<JSType>) immutableList1);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertEquals(0, noTypeArray0.length);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isConstructor());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertEquals(12, immutableList0.size());
      assertEquals(12, immutableList1.size());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = new Node((-766), (-766), 2);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(node0);
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertEquals((-766), node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isEnumType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isParameterizedType());
      
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "'cw/2r;g>^>R3[n>fr", templateType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(prototypeObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isEnumType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertTrue(prototypeObjectType0.isObject());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isUnionType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      
      EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, node0, prototypeObjectType0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(enumType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertEquals((-766), node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isEnumType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertTrue(prototypeObjectType0.isObject());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isUnionType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isNoType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isCheckedUnknownType());
      
      boolean boolean0 = enumType0.isGlobalThisType();
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertEquals((-766), node0.getType());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isEnumType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertTrue(prototypeObjectType0.isObject());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isUnionType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isNoType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(nullType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) nullType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNull(functionType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(nullType0.isRecordType());
      assertFalse(nullType0.isConstructor());
      assertFalse(nullType0.isOrdinaryFunction());
      assertFalse(nullType0.isFunctionType());
      assertFalse(nullType0.isTemplateType());
      assertTrue(nullType0.isNullable());
      assertFalse(nullType0.matchesObjectContext());
      assertTrue(nullType0.matchesStringContext());
      assertFalse(nullType0.isParameterizedType());
      assertFalse(nullType0.isStringValueType());
      assertFalse(nullType0.isInterface());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isVoidType());
      assertTrue(nullType0.matchesNumberContext());
      assertFalse(nullType0.isFunctionPrototypeType());
      assertFalse(nullType0.isNominalType());
      assertFalse(nullType0.isEnumElementType());
      assertFalse(nullType0.isNominalConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertTrue(nullType0.isNullType());
      assertFalse(nullType0.isNumberValueType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isUnionType());
      assertFalse(nullType0.isEnumType());
      assertFalse(nullType0.isBooleanValueType());
      assertFalse(nullType0.isAllType());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isNoType());
      assertFalse(nullType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSType[] jSTypeArray0 = new JSType[6];
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSTypeArray0[3]);
      assertNull(functionType0);
      assertEquals(6, jSTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "IsAssignableFrom(");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType0.isTemplateType());
      assertEquals("IsAssignableFrom(", templateType0.getReferenceName());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
      
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType0.isTemplateType());
      assertEquals("IsAssignableFrom(", templateType0.getReferenceName());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
      assertNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "IsAssignableFrom(");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals("IsAssignableFrom(", templateType0.getReferenceName());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isVoidType());
      
      TemplateType templateType1 = JSType.toMaybeTemplateType((JSType) templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(templateType0, templateType1);
      assertSame(templateType1, templateType0);
      assertNotNull(templateType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertEquals("IsAssignableFrom(", templateType0.getReferenceName());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType1.isNominalConstructor());
      assertFalse(templateType1.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, templateType1.getPossibleToBooleanOutcomes());
      assertFalse(templateType1.isEnumElementType());
      assertFalse(templateType1.isFunctionPrototypeType());
      assertFalse(templateType1.isResolved());
      assertTrue(templateType1.hasAnyTemplateInternal());
      assertFalse(templateType1.isEnumType());
      assertFalse(templateType1.hasCachedValues());
      assertEquals("IsAssignableFrom(", templateType1.getReferenceName());
      assertFalse(templateType1.isParameterizedType());
      assertFalse(templateType1.isBooleanValueType());
      assertFalse(templateType1.isNumberValueType());
      assertFalse(templateType1.isUnionType());
      assertFalse(templateType1.isStringValueType());
      assertTrue(templateType1.isObject());
      assertFalse(templateType1.isNullType());
      assertTrue(templateType1.isTemplateType());
      assertFalse(templateType1.isFunctionType());
      assertFalse(templateType1.isVoidType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = new Node((-766), (-766), 2);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(node0);
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertNull(templateType0.getReferenceName());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
      
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(prototypeObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertNull(templateType0.getReferenceName());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNominalType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isConstructor());
      assertTrue(prototypeObjectType0.isObject());
      
      EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, node0, prototypeObjectType0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(enumType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertNull(templateType0.getReferenceName());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNominalType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isConstructor());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.matchesNumberContext());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      
      JSType.TypePair jSType_TypePair0 = templateType0.getTypesUnderShallowEquality(enumType0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType_TypePair0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertNull(templateType0.getReferenceName());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNominalType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isConstructor());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.matchesNumberContext());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(recordType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isVoidType());
      
      boolean boolean0 = recordType0.differsFrom(jSType_TypePair0.typeA);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isStringValueType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertNull(templateType0.getReferenceName());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isEnumType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNominalType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isConstructor());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.matchesNumberContext());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = new Node((-766), (-766), 2);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertNotNull(node0);
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isName());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isStringValueType());
      
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(prototypeObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isConstructor());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isRecordType());
      
      EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, node0, prototypeObjectType0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(enumType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isName());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isConstructor());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isOrdinaryFunction());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, enumType0, templateType0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(indexedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isName());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isConstructor());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(indexedType0.isNoObjectType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isNominalConstructor());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNoType());
      assertTrue(indexedType0.isEnumType());
      
      ObjectType objectType0 = jSTypeRegistry0.createObjectType((ObjectType) prototypeObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(prototypeObjectType0, objectType0);
      assertNotSame(objectType0, prototypeObjectType0);
      assertNotNull(objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isConstructor());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.equals((Object)prototypeObjectType0));
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, enumType0, "-kDX~cOD/)`ILa");
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(enumElementType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isName());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isConstructor());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoObjectType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.hasCachedValues());
      assertEquals("-kDX~cOD/)`ILa", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.equals((Object)objectType0));
      
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, indexedType0, false);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(arrowType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isName());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isConstructor());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(indexedType0.isNoObjectType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isNominalConstructor());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNoType());
      assertTrue(indexedType0.isEnumType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(prototypeObjectType0.equals((Object)objectType0));
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) enumType0, (JSType) prototypeObjectType0, (JSType) enumType0, (JSType) objectType0, (JSType) arrowType0, (JSType) enumElementType0, (JSType) enumType0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(prototypeObjectType0, objectType0);
      assertNotSame(objectType0, prototypeObjectType0);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isName());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isConstructor());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(indexedType0.isNoObjectType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isNominalConstructor());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNoType());
      assertTrue(indexedType0.isEnumType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNoType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoObjectType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.hasCachedValues());
      assertEquals("-kDX~cOD/)`ILa", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isFunctionType());
      assertEquals(7, immutableList0.size());
      assertFalse(prototypeObjectType0.equals((Object)objectType0));
      assertFalse(objectType0.equals((Object)prototypeObjectType0));
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(unionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTry());
      assertFalse(node0.isName());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isVoidType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.hasCachedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isStringValueType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isConstructor());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(indexedType0.isNoObjectType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isNominalConstructor());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNoType());
      assertTrue(indexedType0.isEnumType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNoType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isNoObjectType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.hasCachedValues());
      assertEquals("-kDX~cOD/)`ILa", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isFunctionType());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isInterface());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(prototypeObjectType0.equals((Object)objectType0));
      assertFalse(objectType0.equals((Object)prototypeObjectType0));
      
      // Undeclared exception!
      try { 
        unionType0.getTypesUnderInequality(enumType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(recordType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isNativeObjectType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isVoidType());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) recordType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isNativeObjectType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isVoidType());
      assertEquals(1, immutableList0.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) recordType0, (List<JSType>) immutableList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isNativeObjectType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isVoidType());
      assertEquals(1, immutableList0.size());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isResolved());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(unionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isNativeObjectType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isVoidType());
      assertEquals(1, immutableList0.size());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isCheckedUnknownType());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality(functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isNativeObjectType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.hasCachedValues());
      assertEquals(1, immutableList0.size());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isResolved());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(recordType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isUnionType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isTemplateType());
      
      RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0, false);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(recordType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertFalse(recordType1.isInterface());
      assertFalse(recordType1.isConstructor());
      assertFalse(recordType1.isOrdinaryFunction());
      assertFalse(recordType1.isFunctionPrototypeType());
      assertTrue(recordType1.matchesObjectContext());
      assertFalse(recordType1.isNativeObjectType());
      assertFalse(recordType1.isNoResolvedType());
      assertFalse(recordType1.isUnionType());
      assertFalse(recordType1.isParameterizedType());
      assertTrue(recordType1.isRecordType());
      assertFalse(recordType1.isResolved());
      assertFalse(recordType1.isStringValueType());
      assertFalse(recordType1.isEnumElementType());
      assertTrue(recordType1.hasCachedValues());
      assertFalse(recordType1.isNominalConstructor());
      assertFalse(recordType1.isEnumType());
      assertFalse(recordType1.isVoidType());
      assertFalse(recordType1.hasReferenceName());
      assertFalse(recordType1.isBooleanValueType());
      assertFalse(recordType1.isNumberValueType());
      assertFalse(recordType1.isTemplateType());
      assertTrue(recordType1.isObject());
      assertFalse(recordType1.isAllType());
      assertFalse(recordType1.isFunctionType());
      assertFalse(recordType1.isCheckedUnknownType());
      assertFalse(recordType1.isNullType());
      assertFalse(recordType1.isNoObjectType());
      assertFalse(recordType1.isNoType());
      assertFalse(recordType1.isNominalType());
      assertTrue(recordType1.equals((Object)recordType0));
      
      boolean boolean0 = recordType1.isSubtype(recordType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotSame(recordType0, recordType1);
      assertNotSame(recordType1, recordType0);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isNominalType());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isBooleanValueType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isUnionType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertFalse(recordType1.isInterface());
      assertFalse(recordType1.isConstructor());
      assertFalse(recordType1.isOrdinaryFunction());
      assertFalse(recordType1.isFunctionPrototypeType());
      assertTrue(recordType1.matchesObjectContext());
      assertFalse(recordType1.isNativeObjectType());
      assertFalse(recordType1.isNoResolvedType());
      assertFalse(recordType1.isUnionType());
      assertFalse(recordType1.isParameterizedType());
      assertTrue(recordType1.isRecordType());
      assertFalse(recordType1.isResolved());
      assertFalse(recordType1.isStringValueType());
      assertFalse(recordType1.isEnumElementType());
      assertTrue(recordType1.hasCachedValues());
      assertFalse(recordType1.isNominalConstructor());
      assertFalse(recordType1.isEnumType());
      assertFalse(recordType1.isVoidType());
      assertFalse(recordType1.hasReferenceName());
      assertFalse(recordType1.isBooleanValueType());
      assertFalse(recordType1.isNumberValueType());
      assertFalse(recordType1.isTemplateType());
      assertTrue(recordType1.isObject());
      assertFalse(recordType1.isAllType());
      assertFalse(recordType1.isFunctionType());
      assertFalse(recordType1.isCheckedUnknownType());
      assertFalse(recordType1.isNullType());
      assertFalse(recordType1.isNoObjectType());
      assertFalse(recordType1.isNoType());
      assertFalse(recordType1.isNominalType());
      assertTrue(recordType0.equals((Object)recordType1));
      assertTrue(recordType1.equals((Object)recordType0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(recordType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isResolved());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isVoidType());
      
      JSType jSType0 = modificationVisitor0.caseNullType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isVoidType());
      assertEquals("null", jSType0.getDisplayName());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.matchesObjectContext());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.isNullType());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isUnionType());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(recordType0, jSType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(parameterizedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isResolved());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isVoidType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isVoidType());
      assertEquals("null", jSType0.getDisplayName());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.matchesObjectContext());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.isNullType());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isUnionType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isTemplateType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumElementType());
      
      NoObjectType noObjectType0 = (NoObjectType)JSType.getGreatestSubtype((JSType) parameterizedType0, jSType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isResolved());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isInterface());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isVoidType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isVoidType());
      assertEquals("null", jSType0.getDisplayName());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.matchesObjectContext());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(jSType0.isNullType());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isUnionType());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isTemplateType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.hasCachedValues());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertTrue(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.canBeCalled());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isResolved());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isParameterizedType());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(indexedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isResolved());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isNoType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isConstructor());
      assertTrue(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isTemplateType());
      
      boolean boolean0 = JSType.isEquivalent((JSType) null, indexedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isResolved());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isNoType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isConstructor());
      assertTrue(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.hasReferenceName());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isConstructor());
      
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, (JSType) null, false);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(arrowType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isRecordType());
      
      boolean boolean0 = JSType.isEquivalent(objectType0, arrowType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isFunctionType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.hasReferenceName());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isRecordType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = modificationVisitor0.caseStringType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isConstructor());
      assertEquals("string", jSType0.getDisplayName());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.isStringValueType());
      assertTrue(jSType0.matchesStringContext());
      
      boolean boolean0 = jSType0.equals(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isConstructor());
      assertEquals("string", jSType0.getDisplayName());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.isStringValueType());
      assertTrue(jSType0.matchesStringContext());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(stringType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isResolved());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isTemplateType());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.hasCachedValues());
      
      boolean boolean0 = stringType0.equals(noResolvedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(stringType0.isFunctionType());
      assertFalse(stringType0.isOrdinaryFunction());
      assertFalse(stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertFalse(stringType0.isNullType());
      assertFalse(stringType0.isResolved());
      assertTrue(stringType0.matchesNumberContext());
      assertFalse(stringType0.isNoResolvedType());
      assertFalse(stringType0.isConstructor());
      assertFalse(stringType0.isFunctionPrototypeType());
      assertFalse(stringType0.isNumberValueType());
      assertFalse(stringType0.isBooleanValueType());
      assertFalse(stringType0.isRecordType());
      assertFalse(stringType0.isUnionType());
      assertFalse(stringType0.isEnumType());
      assertFalse(stringType0.isCheckedUnknownType());
      assertFalse(stringType0.isNominalType());
      assertFalse(stringType0.isVoidType());
      assertTrue(stringType0.matchesObjectContext());
      assertTrue(stringType0.isStringValueType());
      assertFalse(stringType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertTrue(stringType0.matchesStringContext());
      assertFalse(stringType0.isNoObjectType());
      assertFalse(stringType0.isNoType());
      assertFalse(stringType0.isAllType());
      assertFalse(stringType0.isParameterizedType());
      assertFalse(stringType0.isEnumElementType());
      assertFalse(stringType0.isTemplateType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isRecordType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isTemplateType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(booleanType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isAllType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isEnumType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isInterface());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)booleanType0.autobox();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(instanceObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(booleanType0.isResolved());
      assertFalse(booleanType0.isOrdinaryFunction());
      assertFalse(booleanType0.isFunctionType());
      assertFalse(booleanType0.isConstructor());
      assertFalse(booleanType0.isTemplateType());
      assertFalse(booleanType0.isRecordType());
      assertFalse(booleanType0.isNoObjectType());
      assertFalse(booleanType0.isNoType());
      assertFalse(booleanType0.isNullType());
      assertFalse(booleanType0.isAllType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertFalse(booleanType0.isNominalConstructor());
      assertFalse(booleanType0.isNominalType());
      assertFalse(booleanType0.isFunctionPrototypeType());
      assertFalse(booleanType0.isCheckedUnknownType());
      assertFalse(booleanType0.isEnumElementType());
      assertFalse(booleanType0.isVoidType());
      assertFalse(booleanType0.isNoResolvedType());
      assertFalse(booleanType0.isUnionType());
      assertFalse(booleanType0.isNumberValueType());
      assertFalse(booleanType0.isEnumType());
      assertTrue(booleanType0.isBooleanValueType());
      assertFalse(booleanType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertTrue(booleanType0.matchesNumberContext());
      assertTrue(booleanType0.matchesObjectContext());
      assertTrue(booleanType0.matchesStringContext());
      assertFalse(booleanType0.isNullable());
      assertFalse(booleanType0.isStringValueType());
      assertFalse(booleanType0.isInterface());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isEnumType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertTrue(instanceObjectType0.isObject());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertTrue(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isParameterizedType());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isNominalConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isRecordType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isNominalConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isRecordType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertEquals(1, immutableList0.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) immutableList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(functionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isNominalConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isRecordType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertEquals(1, immutableList0.size());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      
      ImmutableList<JSType> immutableList1 = ImmutableList.of((JSType) functionType0, (JSType) functionType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(immutableList1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isNominalConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isRecordType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertEquals(1, immutableList0.size());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(5, immutableList1.size());
      assertFalse(immutableList1.equals((Object)immutableList0));
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList1);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(unionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isNominalConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isRecordType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertEquals(1, immutableList0.size());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(5, immutableList1.size());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isInterface());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(immutableList0.equals((Object)immutableList1));
      assertFalse(immutableList1.equals((Object)immutableList0));
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality(unionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(jSType_TypePair0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isNominalConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isRecordType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertEquals(1, immutableList0.size());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertEquals(5, immutableList1.size());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isInterface());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(immutableList0.equals((Object)immutableList1));
      assertFalse(immutableList1.equals((Object)immutableList0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = new Node((-766), (-766), 2);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertNotNull(node0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.hasCachedValues());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isParameterizedType());
      
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "'cw/2r;g>^>R3[n>fr", templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(prototypeObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.hasCachedValues());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isAllType());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      
      EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, node0, prototypeObjectType0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(enumType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.hasCachedValues());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isAllType());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isVoidType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoResolvedType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertTrue(enumType0.matchesObjectContext());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, enumType0, templateType0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(indexedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.hasCachedValues());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isAllType());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isVoidType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoResolvedType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isVoidType());
      assertTrue(indexedType0.isEnumType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertTrue(indexedType0.hasReferenceName());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isNominalConstructor());
      
      enumType0.testForEqualityHelper(indexedType0, prototypeObjectType0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isHook());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.hasCachedValues());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.isTemplateType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isAllType());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isVoidType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoResolvedType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isVoidType());
      assertTrue(indexedType0.isEnumType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertTrue(indexedType0.hasReferenceName());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = modificationVisitor0.caseNullType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.isNullType());
      assertFalse(jSType0.matchesObjectContext());
      assertEquals("null", jSType0.getDisplayName());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNumberValueType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isEnumType());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      
      NoObjectType noObjectType0 = (NoObjectType)modificationVisitor0.caseNoObjectType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noObjectType0, jSType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.isNullType());
      assertFalse(jSType0.matchesObjectContext());
      assertEquals("null", jSType0.getDisplayName());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNumberValueType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isEnumType());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertEquals(2, immutableList0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(unionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.isNullType());
      assertFalse(jSType0.matchesObjectContext());
      assertEquals("null", jSType0.getDisplayName());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNumberValueType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isEnumType());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertEquals(2, immutableList0.size());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isInterface());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality(unionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isConstructor());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(jSType0.isBooleanValueType());
      assertTrue(jSType0.isNullType());
      assertFalse(jSType0.matchesObjectContext());
      assertEquals("null", jSType0.getDisplayName());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNumberValueType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isEnumType());
      assertTrue(jSType0.isNullable());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertEquals(2, immutableList0.size());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = new Node((-766), (-766), 2);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNotNull(node0);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertEquals((-766), node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "'cw/2r;g>^>R3[n>fr", templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(prototypeObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      
      EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, node0, prototypeObjectType0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(enumType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertEquals((-766), node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(enumType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, enumType0, templateType0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(indexedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertEquals((-766), node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(enumType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isConstructor());
      assertTrue(indexedType0.isEnumType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isNominalConstructor());
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, enumType0, "-kDX~cOD/)`ILa");
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(enumElementType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertEquals((-766), node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(enumType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertEquals("-kDX~cOD/)`ILa", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNoType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isVoidType());
      
      UnknownType unknownType0 = (UnknownType)JSType.getGreatestSubtype((JSType) templateType0, (JSType) enumElementType0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(unknownType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertEquals((-766), node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(enumType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertEquals("-kDX~cOD/)`ILa", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isTemplateType());
      assertFalse(enumElementType0.isAllType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isNoType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertTrue(enumElementType0.isNominalType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isInterface());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isObject());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isNominalType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isNominalConstructor());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, indexedType0, false);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(arrowType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertEquals((-766), node0.getType());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isFunctionType());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(enumType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isConstructor());
      assertTrue(indexedType0.isEnumType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isEnumElementType());
      
      // Undeclared exception!
      try { 
        arrowType0.canTestForShallowEqualityWith(unknownType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = new Node((-766), (-766), 2);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertNotNull(node0);
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.hasCachedValues());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "'cw/2r;g>^>R3[n>fr", templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(prototypeObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.hasCachedValues());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isAllType());
      
      EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, node0, prototypeObjectType0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(enumType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(templateType0.hasCachedValues());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isBooleanValueType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isVoidType());
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, enumType0, "-kDX~cOD/)`ILa");
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(enumElementType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(templateType0.hasCachedValues());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isBooleanValueType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNoObjectType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertEquals("-kDX~cOD/)`ILa", enumElementType0.getReferenceName());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isInterface());
      
      JSType jSType0 = JSType.getLeastSupertype((JSType) enumType0, (JSType) enumElementType0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(enumType0, jSType0);
      assertSame(jSType0, enumType0);
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(templateType0.hasCachedValues());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isBooleanValueType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isFunctionType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isVoidType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isConstructor());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isNoType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isBooleanValueType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNoObjectType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.isNominalType());
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertEquals("-kDX~cOD/)`ILa", enumElementType0.getReferenceName());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isEnumType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isVoidType());
      assertTrue(jSType0.isEnumType());
      assertFalse(jSType0.isEnumElementType());
      assertTrue(jSType0.isObject());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isFunctionType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.matchesNumberContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isStringValueType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noResolvedType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      
      UnknownType unknownType0 = (UnknownType)noResolvedType0.getPropertyType("STRING_VALUE_OR_OBJECT_TYPE");
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(unknownType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.isObject());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isNominalType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.isCheckedUnknownType());
      
      UnknownType unknownType1 = (UnknownType)JSType.getLeastSupertype((JSType) unknownType0, (JSType) unknownType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(unknownType0, unknownType1);
      assertSame(unknownType1, unknownType0);
      assertNotNull(unknownType1);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isUnionType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertFalse(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.canBeCalled());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isFunctionType());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNativeObjectType());
      assertTrue(unknownType0.isObject());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isNominalType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isStringValueType());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType1.isNativeObjectType());
      assertFalse(unknownType1.isOrdinaryFunction());
      assertFalse(unknownType1.isFunctionType());
      assertFalse(unknownType1.hasCachedValues());
      assertFalse(unknownType1.isRecordType());
      assertFalse(unknownType1.isAllType());
      assertFalse(unknownType1.isBooleanValueType());
      assertFalse(unknownType1.isTemplateType());
      assertTrue(unknownType1.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertFalse(unknownType1.isNoObjectType());
      assertFalse(unknownType1.isFunctionPrototypeType());
      assertFalse(unknownType1.isNoType());
      assertFalse(unknownType1.isNominalConstructor());
      assertFalse(unknownType1.isConstructor());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertEquals("??", unknownType1.getReferenceName());
      assertTrue(unknownType1.isObject());
      assertFalse(unknownType1.isNullType());
      assertEquals(Integer.MAX_VALUE, unknownType1.getPropertiesCount());
      assertFalse(unknownType1.isStringValueType());
      assertFalse(unknownType1.isUnionType());
      assertFalse(unknownType1.isNominalType());
      assertFalse(unknownType1.isNumberValueType());
      assertFalse(unknownType1.hasReferenceName());
      assertFalse(unknownType1.isEnumType());
      assertFalse(unknownType1.isVoidType());
      assertFalse(unknownType1.isNoResolvedType());
      assertFalse(unknownType1.isEnumElementType());
      assertTrue(unknownType1.hasDisplayName());
      assertTrue(unknownType1.isUnknownType());
      assertFalse(unknownType1.isInterface());
      assertTrue(unknownType1.isCheckedUnknownType());
      assertTrue(unknownType1.isNullable());
      assertFalse(unknownType1.isParameterizedType());
      assertFalse(unknownType1.isResolved());
      assertTrue(unknownType1.matchesObjectContext());
      assertTrue(unknownType1.matchesStringContext());
      assertTrue(unknownType1.canBeCalled());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType$1");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)JSType.getGreatestSubtype((JSType) errorFunctionType0, (JSType) errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertNotNull(errorFunctionType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType1.isTemplateType());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertFalse(errorFunctionType1.isResolved());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isRecordType());
      assertFalse(errorFunctionType1.isVoidType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertTrue(errorFunctionType1.isObject());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertFalse(errorFunctionType1.isStringValueType());
      assertFalse(errorFunctionType1.isUnionType());
      assertFalse(errorFunctionType1.isNoType());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertFalse(errorFunctionType1.isNominalType());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.hasCachedValues());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType1.isConstructor());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isInterface());
      assertFalse(errorFunctionType1.isAllType());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = new Node((-766), (-766), 2);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotNull(node0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, (String) null);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(templateType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.hasCachedValues());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, "", templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(prototypeObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.hasCachedValues());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isNoType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isConstructor());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      
      EnumType enumType0 = new EnumType(jSTypeRegistry0, (String) null, node0, prototypeObjectType0);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(enumType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(templateType0.hasCachedValues());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isNoType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isConstructor());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(enumType0.isVoidType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isInterface());
      
      UnknownType unknownType0 = (UnknownType)JSType.getGreatestSubtype((JSType) enumType0, (JSType) templateType0);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(unknownType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-766), node0.getType());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(templateType0.hasCachedValues());
      assertNull(templateType0.getReferenceName());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNullType());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isNumberValueType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isEnumType());
      assertFalse(prototypeObjectType0.isNoObjectType());
      assertFalse(prototypeObjectType0.isNoType());
      assertTrue(prototypeObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(prototypeObjectType0.isFunctionPrototypeType());
      assertFalse(prototypeObjectType0.isNumberValueType());
      assertTrue(prototypeObjectType0.hasReferenceName());
      assertFalse(prototypeObjectType0.isUnionType());
      assertFalse(prototypeObjectType0.isNoResolvedType());
      assertFalse(prototypeObjectType0.isResolved());
      assertFalse(prototypeObjectType0.isVoidType());
      assertFalse(prototypeObjectType0.isOrdinaryFunction());
      assertFalse(prototypeObjectType0.isInterface());
      assertFalse(prototypeObjectType0.isParameterizedType());
      assertFalse(prototypeObjectType0.isStringValueType());
      assertFalse(prototypeObjectType0.isNullType());
      assertFalse(prototypeObjectType0.isBooleanValueType());
      assertFalse(prototypeObjectType0.isEnumElementType());
      assertFalse(prototypeObjectType0.isEnumType());
      assertFalse(prototypeObjectType0.isFunctionType());
      assertFalse(prototypeObjectType0.isTemplateType());
      assertFalse(prototypeObjectType0.isNativeObjectType());
      assertFalse(prototypeObjectType0.hasCachedValues());
      assertFalse(prototypeObjectType0.isAllType());
      assertFalse(prototypeObjectType0.isNominalType());
      assertFalse(prototypeObjectType0.isRecordType());
      assertFalse(prototypeObjectType0.isNominalConstructor());
      assertFalse(prototypeObjectType0.isConstructor());
      assertTrue(prototypeObjectType0.isObject());
      assertFalse(prototypeObjectType0.isCheckedUnknownType());
      assertFalse(enumType0.isVoidType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isInterface());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isNumberValueType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isUnionType());
      assertTrue(unknownType0.matchesStringContext());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isAllType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isRecordType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertTrue(unknownType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isVoidType());
      assertTrue(unknownType0.isNullable());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isConstructor());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "ck");
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      
      NoType noType1 = (NoType)JSType.getGreatestSubtype((JSType) errorFunctionType0, (JSType) noType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(noType0, noType1);
      assertSame(noType1, noType0);
      assertNotNull(noType1);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(noType1.isRecordType());
      assertTrue(noType1.canBeCalled());
      assertFalse(noType1.isResolved());
      assertFalse(noType1.isFunctionPrototypeType());
      assertTrue(noType1.isNoType());
      assertTrue(noType1.matchesNumberContext());
      assertTrue(noType1.isConstructor());
      assertFalse(noType1.isInterface());
      assertNull(noType1.getReferenceName());
      assertFalse(noType1.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertFalse(noType1.isBooleanValueType());
      assertTrue(noType1.matchesObjectContext());
      assertTrue(noType1.isObject());
      assertFalse(noType1.isNumberValueType());
      assertFalse(noType1.isNullType());
      assertFalse(noType1.isUnionType());
      assertFalse(noType1.isCheckedUnknownType());
      assertTrue(noType1.hasInstanceType());
      assertTrue(noType1.isNullable());
      assertFalse(noType1.isVoidType());
      assertTrue(noType1.matchesStringContext());
      assertFalse(noType1.isNominalConstructor());
      assertFalse(noType1.isNominalType());
      assertFalse(noType1.isEnumType());
      assertEquals(Integer.MAX_VALUE, noType1.getPropertiesCount());
      assertFalse(noType1.isNoResolvedType());
      assertFalse(noType1.isEnumElementType());
      assertFalse(noType1.isOrdinaryFunction());
      assertFalse(noType1.isAllType());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertFalse(noType1.isTemplateType());
      assertFalse(noType1.isStringValueType());
      assertFalse(noType1.isNoObjectType());
      assertTrue(noType1.hasCachedValues());
      assertFalse(noType1.isParameterizedType());
      assertFalse(noType1.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(allType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0, (JSType) allType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(immutableList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals(5, immutableList0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(unionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals(5, immutableList0.size());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isStringValueType());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality(unionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(jSType_TypePair0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals(5, immutableList0.size());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isStringValueType());
      
      NoType noType0 = (NoType)unionType0.getRestrictedUnion(jSType_TypePair0.typeA);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isNoResolvedType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isParameterizedType());
      assertTrue(allType0.matchesStringContext());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalConstructor());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.matchesObjectContext());
      assertEquals(5, immutableList0.size());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isStringValueType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isNoObjectType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertNotNull(objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isTemplateType());
      
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, (JSType) null, false);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotNull(arrowType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNullType());
      
      JSType jSType0 = arrowType0.resolve(simpleErrorReporter0, objectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(arrowType0, jSType0);
      assertSame(jSType0, arrowType0);
      assertNotNull(jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isAllType());
      assertTrue(arrowType0.isResolved());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNullType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isStringValueType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNominalConstructor());
  }
}
