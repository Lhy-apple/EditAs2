/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:41:07 GMT 2023
 */

package org.apache.commons.jxpath.ri.model.jdom;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jdom.Element;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JDOMAttributeIterator_ESTest extends JDOMAttributeIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QName qName0 = new QName("Cannot add duplicate attribute");
      Object object0 = new Object();
      Locale locale0 = new Locale("Cannot add duplicate attribute");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, object0, locale0);
      JDOMAttributeIterator jDOMAttributeIterator0 = new JDOMAttributeIterator(nodePointer0, qName0);
      int int0 = jDOMAttributeIterator0.getPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      QName qName0 = new QName("English", "English");
      Element element0 = new Element("English");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, element0, locale0);
      JDOMAttributeIterator jDOMAttributeIterator0 = new JDOMAttributeIterator(nodePointer0, qName0);
      assertEquals(0, jDOMAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      QName qName0 = new QName("Chinese", "Chinese");
      Element element0 = new Element("Chinese", "Chinese", "Chinese");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, element0, locale0);
      QName qName1 = new QName("xml", "http://www.w3.org/XML/1998/namespace");
      JDOMAttributeIterator jDOMAttributeIterator0 = new JDOMAttributeIterator(nodePointer0, qName1);
      assertEquals(0, jDOMAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      QName qName0 = new QName("Chinese");
      Element element0 = new Element("Chinese", "Chinese", "Chinese");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, element0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "http://www.w3.org/2000/xmlns/");
      NodePointer nodePointer1 = nodePointer0.createAttribute(jXPathContext0, qName0);
      assertFalse(nodePointer1.isContainer());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      QName qName0 = new QName("Chinese");
      Element element0 = new Element("Chinese", "Chinese", "Chinese");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, element0, locale0);
      element0.setAttribute("Chinese", "<<unknown namespace>>");
      QName qName1 = new QName("Chinese", "*");
      JDOMAttributeIterator jDOMAttributeIterator0 = new JDOMAttributeIterator(nodePointer0, qName1);
      assertEquals(0, jDOMAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      QName qName0 = new QName("English", "English");
      Element element0 = new Element("English");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, element0, locale0);
      element0.setAttribute("English", "<<unknown namespace>>");
      QName qName1 = new QName("*");
      JDOMAttributeIterator jDOMAttributeIterator0 = new JDOMAttributeIterator(nodePointer0, qName1);
      assertEquals(0, jDOMAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      QName qName0 = new QName("Italian");
      Element element0 = new Element("Italian", "Italian");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, element0, locale0);
      JDOMAttributeIterator jDOMAttributeIterator0 = new JDOMAttributeIterator(nodePointer0, qName0);
      assertEquals(0, jDOMAttributeIterator0.getPosition());
      
      jDOMAttributeIterator0.getNodePointer();
      assertEquals(1, jDOMAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      QName qName0 = new QName("Italian");
      Element element0 = new Element("Italian", "Italian");
      Element element1 = element0.setAttribute("Italian", "Italian");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, element1, locale0);
      JDOMAttributeIterator jDOMAttributeIterator0 = new JDOMAttributeIterator(nodePointer0, qName0);
      NodePointer nodePointer1 = jDOMAttributeIterator0.getNodePointer();
      assertEquals(0, jDOMAttributeIterator0.getPosition());
      assertNotNull(nodePointer1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      QName qName0 = new QName("Japanese", "Japanese");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "Japanese", locale0);
      JDOMAttributeIterator jDOMAttributeIterator0 = new JDOMAttributeIterator(nodePointer0, qName0);
      NodePointer nodePointer1 = jDOMAttributeIterator0.getNodePointer();
      assertNull(nodePointer1);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      QName qName0 = new QName("French");
      Element element0 = new Element("French", "French", "French");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, element0, locale0);
      JDOMAttributeIterator jDOMAttributeIterator0 = new JDOMAttributeIterator(nodePointer0, qName0);
      boolean boolean0 = jDOMAttributeIterator0.setPosition(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, jDOMAttributeIterator0.getPosition());
      assertFalse(boolean0);
  }
}
