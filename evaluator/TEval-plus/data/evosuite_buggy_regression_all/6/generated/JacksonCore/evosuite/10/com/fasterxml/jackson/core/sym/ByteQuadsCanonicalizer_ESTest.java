/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:18:41 GMT 2023
 */

package com.fasterxml.jackson.core.sym;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ByteQuadsCanonicalizer_ESTest extends ByteQuadsCanonicalizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(4656);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4656);
      byteQuadsCanonicalizer1.addName("J+n{", 4656);
      byteQuadsCanonicalizer1.findName(6000);
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int int0 = byteQuadsCanonicalizer0.hashSeed();
      assertEquals(839877741, int0);
      assertEquals(0, byteQuadsCanonicalizer0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(359);
      int[] intArray0 = new int[6];
      intArray0[0] = 359;
      intArray0[3] = 359;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      byteQuadsCanonicalizer0.findName(intArray0, 3);
      assertEquals(0, byteQuadsCanonicalizer0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(4656);
      int int0 = byteQuadsCanonicalizer0.bucketCount();
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, int0);
      assertEquals(4656, byteQuadsCanonicalizer0.hashSeed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(427);
      byteQuadsCanonicalizer1.addName("", 427, 427, 427);
      byteQuadsCanonicalizer1.release();
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.release();
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(427);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(427);
      byteQuadsCanonicalizer1.release();
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(427, byteQuadsCanonicalizer1.hashSeed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      int int0 = byteQuadsCanonicalizer1.size();
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.size();
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4626);
      byteQuadsCanonicalizer1.addName("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo", 307, 9, 307);
      byteQuadsCanonicalizer1.addName("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo", 4626, 4626, 9);
      byteQuadsCanonicalizer1.toString();
      assertEquals(2, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4731);
      byteQuadsCanonicalizer1._hashSize = 4731;
      byteQuadsCanonicalizer1.addName("", 4631);
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(379);
      int[] intArray0 = new int[48];
      byteQuadsCanonicalizer0._hashArea = intArray0;
      String string0 = byteQuadsCanonicalizer0.findName(379);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(4656);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4656);
      byteQuadsCanonicalizer1.addName("4{", 4656);
      byteQuadsCanonicalizer1.findName(4656);
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot((-1));
      int[] intArray0 = new int[7];
      byteQuadsCanonicalizer0._hashArea = intArray0;
      assertEquals((-1), byteQuadsCanonicalizer0.hashSeed());
      
      intArray0[3] = 1;
      byteQuadsCanonicalizer0.findName((-1));
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(427);
      byteQuadsCanonicalizer1.findName(427, 427);
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3002);
      byteQuadsCanonicalizer1.addName(", cop4$yCoun<=", 3002, 462);
      byteQuadsCanonicalizer1.findName(3002, 427);
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4706);
      byteQuadsCanonicalizer1.addName("MqVDZA!f8pCv;FQ(bT8", 4706, 4706);
      byteQuadsCanonicalizer1.findName(4, (-1731));
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(467);
      byteQuadsCanonicalizer1.addName(", copyCoun<=", 467, 467);
      byteQuadsCanonicalizer1.findName(467, 467);
      assertEquals(1, byteQuadsCanonicalizer1.totalCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4731);
      byteQuadsCanonicalizer1.addName("]m*&Fi>m/Q\"LxMG7+", 4731, 2365, 4731);
      byteQuadsCanonicalizer1.findName(2365, 4609, 4731);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(427);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(427);
      byteQuadsCanonicalizer1.addName("m6*&Fi>mj/MhoLxMG7+", 427, 427, 427);
      byteQuadsCanonicalizer1.findName(427, 427, 427);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(427);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(427);
      byteQuadsCanonicalizer1.addName("2Zqrfd.K!<Vhn5yV# d", 427, 427, 427);
      byteQuadsCanonicalizer1.findName(427, 6500, 6000);
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(427);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(427);
      byteQuadsCanonicalizer1.findName(427, 427, 427);
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(427, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[4];
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.findName(intArray0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.findName((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(4656);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4656);
      int[] intArray0 = new int[10];
      byteQuadsCanonicalizer1.findName(intArray0, 9);
      assertEquals(4656, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(4656);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4656);
      byteQuadsCanonicalizer1.addName("Vh*?O#i", 4656);
      int[] intArray0 = new int[10];
      intArray0[0] = 9;
      intArray0[2] = 4656;
      intArray0[3] = 9;
      intArray0[4] = 4656;
      intArray0[5] = 4656;
      intArray0[6] = 9;
      intArray0[7] = 56;
      intArray0[8] = 4656;
      byteQuadsCanonicalizer1.findName(intArray0, 9);
      assertEquals(1, byteQuadsCanonicalizer1.primaryCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(379);
      int[] intArray0 = new int[48];
      intArray0[0] = 379;
      intArray0[3] = 379;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      String string0 = byteQuadsCanonicalizer0.findName(379);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(427);
      int[] intArray0 = new int[19];
      byteQuadsCanonicalizer0._tertiaryShift = 427;
      intArray0[3] = 427;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      byteQuadsCanonicalizer0.findName(427);
      assertEquals(427, byteQuadsCanonicalizer0.hashSeed());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(14);
      int[] intArray0 = new int[20];
      intArray0[12] = 14;
      intArray0[3] = 14;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      byteQuadsCanonicalizer0._spilloverEnd = 14;
      String string0 = byteQuadsCanonicalizer0.findName(14);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(359);
      int[] intArray0 = new int[15];
      intArray0[0] = 359;
      intArray0[3] = 359;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      String string0 = byteQuadsCanonicalizer0.findName(359, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(26);
      int[] intArray0 = new int[43];
      intArray0[3] = 26;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      byteQuadsCanonicalizer0._tertiaryShift = 26;
      byteQuadsCanonicalizer0.findName(26, 0);
      assertEquals(0, byteQuadsCanonicalizer0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(357);
      int[] intArray0 = new int[18];
      intArray0[12] = 357;
      intArray0[3] = 357;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      byteQuadsCanonicalizer0._spilloverEnd = 357;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.findName(357, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(384);
      int[] intArray0 = new int[20];
      byteQuadsCanonicalizer0._hashArea = intArray0;
      byteQuadsCanonicalizer0._spilloverEnd = 384;
      int[] intArray1 = new int[8];
      intArray1[0] = 384;
      intArray1[1] = 384;
      intArray1[3] = 384;
      byteQuadsCanonicalizer0._hashArea = intArray1;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.findName(384, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(379);
      int[] intArray0 = new int[48];
      intArray0[0] = 379;
      intArray0[3] = 379;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      byteQuadsCanonicalizer0._tertiaryShift = 379;
      String string0 = byteQuadsCanonicalizer0.findName(intArray0, 3);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(359);
      int[] intArray0 = new int[6];
      byteQuadsCanonicalizer0._spilloverEnd = 359;
      intArray0[0] = 359;
      intArray0[3] = 359;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.findName(intArray0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.addName(", copyCoun<=", 4628, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4660);
      int[] intArray0 = new int[9];
      byteQuadsCanonicalizer1.addName("|bG(.\u0001l[//j", intArray0, 4);
      assertEquals(1, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(378);
      int[] intArray0 = new int[45];
      intArray0[3] = 378;
      String[] stringArray0 = new String[3];
      byteQuadsCanonicalizer0._names = stringArray0;
      byteQuadsCanonicalizer0._hashArea = intArray0;
      byteQuadsCanonicalizer0.addName("^QCu9n[hX`gY", 378);
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.addName("^QCu9n[hX`gY", 384);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1003
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4628);
      byteQuadsCanonicalizer1._count = 4628;
      byteQuadsCanonicalizer1.addName(", copyCoun<=", 4628, 4628);
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer1.addName(", copyCoun<=", 4628, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Failed rehash(): old count=4629, copyCount=1
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(427);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(427);
      byteQuadsCanonicalizer1._count = 32;
      byteQuadsCanonicalizer1.addName("m6*&Fi>mj/MhoLxMG7+", 427, 427, 427);
      assertEquals(33, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-892));
      byteQuadsCanonicalizer1.addName("F3y0=<HXT", 1354);
      byteQuadsCanonicalizer1.addName("F3y0=<HXT", 1354);
      byteQuadsCanonicalizer1.addName("F3y0=<HXT", (-892));
      assertEquals(3, byteQuadsCanonicalizer1.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(430);
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.addName("com.fsterxmljackson.core.uil.InternCache", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4660);
      int[] intArray0 = new int[9];
      byteQuadsCanonicalizer1._longNameOffset = (-1776);
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer1.addName("|bG(.\u0001l[//j", intArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.addName("", (int[]) null, (-892));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4626);
      byteQuadsCanonicalizer1._count = 4626;
      byteQuadsCanonicalizer1.addName("CVscaw&?c0d[terDr9", 9, (-1259), 4627);
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer1.addName("CVscaw&?c0d[terDr9", 9, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Failed rehash(): old count=4627, copyCount=1
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot(4706);
      byteQuadsCanonicalizer0._hashSize = 4706;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0._reportTooManyCollisions();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spill-over slots in symbol table with 0 entries, hash area of 4706 slots is now full (all 588 slots -- suspect a DoS attack based on hash collisions. You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = ByteQuadsCanonicalizer._calcTertiaryShift(427);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = ByteQuadsCanonicalizer._calcTertiaryShift(4656);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = ByteQuadsCanonicalizer._calcTertiaryShift(3015);
      assertEquals(6, int0);
  }
}
