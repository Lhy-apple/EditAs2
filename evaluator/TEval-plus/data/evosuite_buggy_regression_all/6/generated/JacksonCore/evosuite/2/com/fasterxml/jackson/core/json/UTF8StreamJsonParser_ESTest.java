/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:19:54 GMT 2023
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8StreamJsonParser_ESTest extends UTF8StreamJsonParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer.createRoot();
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)85);
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2000, pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, (byte[]) null, (byte)85, 42, false);
      uTF8StreamJsonParser0.getTextCharacters();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 47, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 4, 4, true);
      uTF8StreamJsonParser0.getValueAsInt();
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: java.lang.Object@0000000016; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(bytesToNameCanonicalizer0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)85);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext1);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2583, pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer1, (byte[]) null, (-685), 2000, true);
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(2583, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(uTF8StreamJsonParser0);
      
      char[] charArray0 = uTF8StreamJsonParser0.getTextCharacters();
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(2583, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNull(charArray0);
      assertNotSame(iOContext1, iOContext0);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "false");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, mockFileInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 42, 35, true);
      try { 
        uTF8StreamJsonParser0._skipCR();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // InputStream.read() returned 0 characters when trying to read 0 bytes
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = (-254);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = null;
      InputStream inputStream0 = null;
      ObjectCodec objectCodec0 = null;
      int int1 = 42;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-254), (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, (byte[]) null, 42, (-1184), false);
      try { 
        uTF8StreamJsonParser0._parseFieldName(2000);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u07D0' (code 2000 / 0x7d0)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000017; line: 1, column: 43]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-86), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 127, (byte) (-86), true);
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xaa
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000018; line: 1, column: -84]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-17);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 11, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, (byte) (-17), false);
      uTF8StreamJsonParser0.getValueAsInt();
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: java.io.PipedInputStream@0000000019; line: 1, column: -14]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2000, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, 2000, true);
      uTF8StreamJsonParser0.getTypeId();
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8StreamJsonParser0._parseNumber((-5));
      uTF8StreamJsonParser0._parseNumber((-55));
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000020; line: 1, column: 2002]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte)32;
      byteArray1[5] = (byte)32;
      byteArray1[6] = (byte)32;
      byteArray1[7] = (byte)92;
      byteArray1[8] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (byte)32, (byte)32);
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(false, true);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2048, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer1, byteArray1, 2275, 45, true);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing '\"' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000021; line: 1, column: 2321]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.mark((-105));
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "5)~J?Zi4Nkl.@", false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 57, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 1649, (byte)12, true);
      uTF8StreamJsonParser0._parseNumber(73);
      uTF8StreamJsonParser0._decodeCharForError(73);
      try { 
        uTF8StreamJsonParser0.parseLongName(73);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: java.lang.String@0000000022; line: 1, column: 15]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "TaHsUm", true);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(true, true);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-91);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.CONCAT_BUFFER;
      bufferRecycler0.allocCharBuffer(bufferRecycler_CharBufferType0);
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-107);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)112, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer1, byteArray0, 240, (byte)0, true);
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("n!F.PJ:*\"%0", "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'n!F.PJ:*\"%0': was expecting 
         //  at [Source: java.lang.String@0000000023; line: 1, column: 241]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      String string0 = "com.fasterxml.jackson.core.JsonPointer";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.JsonPointer");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, dataInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 992, (byte)25, true);
      uTF8StreamJsonParser0.getValueAsString("YErtv`;whG");
      try { 
        uTF8StreamJsonParser0._parseFieldName(2000);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u07D0' (code 2000 / 0x7d0)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000024; line: 1, column: 993]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "TaHsUm", true);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      bytesToNameCanonicalizer0.makeChild(true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-107);
      byte byte0 = (byte)43;
      byteArray0[7] = (byte)43;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 1406, 1406, true);
      uTF8StreamJsonParser0.getTextLength();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextLongValue(744L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.TEXT_BUFFER;
      bufferRecycler0.allocCharBuffer(bufferRecycler_CharBufferType0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte)30, (-1), false);
      uTF8StreamJsonParser0.getTextLength();
      uTF8StreamJsonParser0.nextFieldName((SerializableString) null);
      try { 
        uTF8StreamJsonParser0._handleInvalidNumberStart((-1), false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\uFFFF' (code -1)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000025; line: 1, column: 30]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = null;
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-67);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, mockFileInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte)58, 13, true);
      uTF8StreamJsonParser0._tokenIncomplete = true;
      String string0 = "";
      try { 
        uTF8StreamJsonParser0._matchToken("", (byte)58);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      iOContext0.releaseBase64Buffer((byte[]) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(false, true);
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, bufferedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer1, byteArray0, (-364), (-2), false);
      mockFileInputStream0.release();
      uTF8StreamJsonParser0.getTextOffset();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -364
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(true, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)123;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, mockFileInputStream0, objectCodec0, bytesToNameCanonicalizer1, byteArray0, (byte)26, (byte)108, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 26
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      bytesToNameCanonicalizer0.makeChild(false, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")");
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2030, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer1, byteArray0, 2030, (-1229), true);
      JsonToken jsonToken0 = uTF8StreamJsonParser0._parseNumber((-786));
      assertTrue(jsonToken0.isNumeric());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 224, (-1));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (-1), 123, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseNumber((byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UT-32BE");
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 114, pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) (-52), (-2028), false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte) (-52), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 48, (-2028), false);
      uTF8StreamJsonParser1._skipCR();
      bytesToNameCanonicalizer0.makeChild(false, false);
      uTF8StreamJsonParser1.getText();
      uTF8StreamJsonParser1._parseNumber((-2028));
      try { 
        uTF8StreamJsonParser0._parseNumber(981);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(false, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 1302, (-2958), true);
      uTF8StreamJsonParser0._skipCR();
      // Undeclared exception!
      try { 
        bytesToNameCanonicalizer1.makeChild(true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "TaHsUm", true);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)43;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer1, byteArray0, 57, 23, true);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: java.lang.String@0000000026; line: 1, column: 81]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[8];
      UTF8StreamJsonParser.growArrayBy(intArray0, 0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("true", "");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "TaHsUm", true);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 32, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer1, byteArray0, 804, 2000, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("E8BD02PI?a=B<7y]i", "Non-standard token '");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 804
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(false, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2834), (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer1, byteArray0, 1302, 2000, false);
      SerializedString serializedString0 = new SerializedString("+]&xJ- $");
      SerializedString serializedString1 = new SerializedString("+]&xJ- $");
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName(serializedString1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1302
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.CONCAT_BUFFER;
      bufferRecycler1.allocCharBuffer(bufferRecycler_CharBufferType0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)12, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 15, (byte)12, false);
      uTF8StreamJsonParser0.getTextLength();
      try { 
        uTF8StreamJsonParser0._handleInvalidNumberStart(0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000027; line: 1, column: 16]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(true, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2999), dataInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer1, (byte[]) null, (-128), 13, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-55);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)83, (InputStream) null, objectCodec0, (BytesToNameCanonicalizer) null, (byte[]) null, 3520, 3099, false);
      try { 
        uTF8StreamJsonParser0._decodeCharForError((-21));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000028; line: 1, column: 6620]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 78, (-2416));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte)21, 2000, true);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.readValueAs(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for the parser, can not deserialize JSON into Java objects
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
      bufferRecycler0.allocCharBuffer(bufferRecycler_CharBufferType0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.BASE64_CODEC_BUFFER;
      bufferRecycler0.allocByteBuffer(bufferRecycler_ByteBufferType0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) (-52), (-2028), false);
      uTF8StreamJsonParser0._parseNumber((byte) (-5));
      try { 
        uTF8StreamJsonParser0._decodeCharForError((byte) (-52));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xfb
         //  at [Source: java.lang.Object@0000000029; line: 1, column: -2026]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      bytesToNameCanonicalizer0.makeChild(false, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2481, 247);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((Iterator) null).when(objectCodec0).readValues(any(com.fasterxml.jackson.core.JsonParser.class) , any(java.lang.Class.class));
      doReturn((String) null).when(objectCodec0).toString();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)12, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-2665), (-2665), false);
      Class<Integer> class0 = Integer.class;
      uTF8StreamJsonParser0.readValuesAs(class0);
      uTF8StreamJsonParser0.getTextOffset();
      try { 
        uTF8StreamJsonParser0._decodeCharForError((-2665));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0x97
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000030; line: 1, column: -2664]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((Iterator) null).when(objectCodec0).readValues(any(com.fasterxml.jackson.core.JsonParser.class) , any(java.lang.Class.class));
      doReturn((String) null).when(objectCodec0).toString();
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte) (-22);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 247, mockFileInputStream0, objectCodec0, bytesToNameCanonicalizer1, byteArray0, (byte) (-22), (-2665), false);
      Class<Integer> class0 = Integer.class;
      uTF8StreamJsonParser0.readValuesAs(class0);
      uTF8StreamJsonParser0.getTextOffset();
      try { 
        uTF8StreamJsonParser0._decodeCharForError((-2320));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "TaHsUm", true);
      InputStream inputStream0 = null;
      ObjectCodec objectCodec0 = null;
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      boolean boolean0 = true;
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-107);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1963, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer1, byteArray0, (byte)112, (byte)0, true);
      uTF8StreamJsonParser0.getInputSource();
      try { 
        uTF8StreamJsonParser0._reportInvalidOther((byte) (-107), (byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xffffff95
         //  at [Source: java.lang.String@0000000031; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(32);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      byteArrayInputStream0.mark((-306));
      int int0 = 15;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-4755), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 15, 1182, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseNumber((-4755));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)85;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 109, mockFileInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 128, (byte)85, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 6, mockFileInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 1081, 224, false);
      int int0 = uTF8StreamJsonParser1.getTextOffset();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      int int1 = uTF8StreamJsonParser1.releaseBuffered((OutputStream) dataOutputStream0);
      assertTrue(int1 == int0);
      
      String string0 = uTF8StreamJsonParser0.getValueAsString("Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      assertEquals("Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte) (-17);
      byteArray0[7] = (byte) (-17);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      Integer integer0 = new Integer((byte) (-16));
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-16), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (-3292), (byte) (-15), true);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.sym.Name2");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken("com.fasterxml.jackson.core.sym.Name2", (-664));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3292
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BytesToNameCanonicalizer.createRoot();
      BytesToNameCanonicalizer.createRoot();
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-858), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 35, (-2), false);
      uTF8StreamJsonParser0._parseNumber((byte)12);
      uTF8StreamJsonParser0._decodeCharForError(3196);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseLongName(1649);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1649
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)85);
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      BytesToNameCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, (byte[]) null, 2000, 2080, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-17);
      byteArray0[0] = (byte) (-17);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-15), pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 4, 1226, false);
      uTF8StreamJsonParser0.getValueAsInt();
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: java.io.PipedInputStream@0000000032; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "TaHsUm", true);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(true, true);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-91);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-107);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)112, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer1, byteArray0, 240, (byte)0, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken("", 2821);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "TaHsUm", true);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      bytesToNameCanonicalizer0.makeChild(true, true);
      byte[] byteArray0 = new byte[8];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 128, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 128, 101, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 1270, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 3, (byte)64, false);
      try { 
        uTF8StreamJsonParser1._handleUnexpectedValue(15);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 15)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: java.lang.String@0000000033; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      int int0 = 110;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 127, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 110, 854, false);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (byte) (-21), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) (-21), 32, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._skipCR();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -21
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "TaHsUm", true);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(true, true);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-91);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.CONCAT_BUFFER;
      bufferRecycler0.allocCharBuffer(bufferRecycler_CharBufferType0);
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-107);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`hBQj");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)112, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer1, byteArray0, 240, (byte)0, true);
      String string0 = "n!F.PJ:*\"%0";
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: java.lang.String@0000000034; line: 1, column: 241]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)12, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)0, (byte)0, false);
      uTF8StreamJsonParser0._parseNumber(48);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UT-32BE");
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object object0 = new Object();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 114, pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 4, (-2028), false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte) (-52), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 48, (-2028), false);
      uTF8StreamJsonParser1._skipCR();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      uTF8StreamJsonParser1.releaseBuffered((OutputStream) pipedOutputStream0);
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xfb
         //  at [Source: java.io.PushbackInputStream@0000000035; line: 1, column: -2026]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UT-32BE");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(12, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertNotNull(bytesToNameCanonicalizer0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 114, pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 4, (-2028), false);
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(114, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(12, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(12, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(12, byteArray0.length);
      assertNotNull(byteArrayInputStream1);
      
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte) (-52), byteArrayInputStream1, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 48, (-2028), false);
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(12, byteArrayInputStream1.available());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertEquals((-52), uTF8StreamJsonParser1.getFeatureMask());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(12, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser1);
      
      uTF8StreamJsonParser1._skipCR();
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayInputStream1.available());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertEquals((-52), uTF8StreamJsonParser1.getFeatureMask());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(12, byteArray0.length);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(uTF8StreamJsonParser1, uTF8StreamJsonParser0);
      
      iOContext0.releaseNameCopyBuffer((char[]) null);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(false, false);
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertEquals(64, bytesToNameCanonicalizer1.bucketCount());
      assertFalse(bytesToNameCanonicalizer1.maybeDirty());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      String string0 = uTF8StreamJsonParser1.getText();
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayInputStream1.available());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertEquals((-52), uTF8StreamJsonParser1.getFeatureMask());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(12, byteArray0.length);
      assertNull(string0);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(uTF8StreamJsonParser1, uTF8StreamJsonParser0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      String string1 = uTF8StreamJsonParser0._getText2(jsonToken0);
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(114, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals("", string1);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(uTF8StreamJsonParser0.equals((Object)uTF8StreamJsonParser1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(12, byteArray0.length);
      assertNotNull(string1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(uTF8StreamJsonParser0, uTF8StreamJsonParser1);
      
      try { 
        uTF8StreamJsonParser1._parseFieldName(4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 4)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name
         //  at [Source: java.io.PushbackInputStream@0000000036; line: 2, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-12);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(12, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(bytesToNameCanonicalizer0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-12), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 110, (byte) (-12), true);
      assertEquals(12, byteArrayInputStream0.available());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals((-12), uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(12, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xf4
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000037; line: 1, column: -9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "TaHsUm", true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(true, true);
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(64, bytesToNameCanonicalizer1.bucketCount());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertFalse(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      byte[] byteArray0 = new byte[8];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 128, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 128, 101, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(128, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 1270, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 3, (byte)64, false);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals(1270, uTF8StreamJsonParser1.getFeatureMask());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser1);
      
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      String string0 = uTF8StreamJsonParser1._getText2(jsonToken0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals(1270, uTF8StreamJsonParser1.getFeatureMask());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("{", string0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(8, byteArray0.length);
      assertNotNull(string0);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(uTF8StreamJsonParser1, uTF8StreamJsonParser0);
      
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.slowParseName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      byte[] byteArray0 = new byte[21];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(21, byteArrayInputStream0.available());
      assertEquals(21, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(bytesToNameCanonicalizer0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.sym.Name2", true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.READ_IO_BUFFER;
      bufferRecycler0.releaseByteBuffer(bufferRecycler_ByteBufferType0, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(21, byteArray0.length);
      
      ObjectCodec objectCodec0 = null;
      boolean boolean0 = false;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2659), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 3061, 127, false);
      assertEquals(21, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals((-2659), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(21, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      uTF8StreamJsonParser0.setCodec((ObjectCodec) null);
      assertEquals(21, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals((-2659), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(21, byteArray0.length);
      
      try { 
        uTF8StreamJsonParser0.nextIntValue(116);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: java.lang.String@0000000038; line: 1, column: 129]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      byte byte0 = (byte)11;
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)109;
      byteArray0[8] = (byte)109;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)21, (byte)11, (byte)11, (byte)21, (byte)109, (byte)11, (byte)11, (byte)109, (byte)109}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertNotNull(bytesToNameCanonicalizer0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 2, (byte)11);
      assertEquals(7, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)21, (byte)11, (byte)11, (byte)21, (byte)109, (byte)11, (byte)11, (byte)109, (byte)109}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream1);
      
      boolean boolean0 = true;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler1);
      
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)21, (byte)11, (byte)11, (byte)21, (byte)109, (byte)11, (byte)11, (byte)109, (byte)109}, byteArray0);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotNull(iOContext0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-656), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte)11, (byte)11, false);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals((-656), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertArrayEquals(new byte[] {(byte)21, (byte)11, (byte)11, (byte)21, (byte)109, (byte)11, (byte)11, (byte)109, (byte)109}, byteArray0);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals((-656), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertArrayEquals(new byte[] {(byte)21, (byte)11, (byte)11, (byte)21, (byte)109, (byte)11, (byte)11, (byte)109, (byte)109}, byteArray0);
      assertEquals("{", string0);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotNull(string0);
      assertNotSame(bufferRecycler1, bufferRecycler0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 2808, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2000, 2, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertEquals(2808, uTF8StreamJsonParser1.getFeatureMask());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertArrayEquals(new byte[] {(byte)21, (byte)11, (byte)11, (byte)21, (byte)109, (byte)11, (byte)11, (byte)109, (byte)109}, byteArray0);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser1);
      
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._matchToken("{", (byte)11);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(bytesToNameCanonicalizer0);
      
      byte[] byteArray0 = new byte[4];
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.BASE64_CODEC_BUFFER;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler_ByteBufferType0, false);
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 8, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, (byte[]) null, 593, 114, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(8, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(iOContext0.equals((Object)iOContext1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(uTF8StreamJsonParser0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      assertFalse(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext2);
      
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, (-3118), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, (byte[]) null, 48, 593, true);
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(4, byteArrayInputStream0.available());
      assertFalse(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertEquals((-3118), uTF8StreamJsonParser1.getFeatureMask());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser1);
      
      uTF8StreamJsonParser0._skipCR();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(8, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(iOContext0.equals((Object)iOContext1));
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(uTF8StreamJsonParser0.equals((Object)uTF8StreamJsonParser1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotSame(iOContext0, iOContext1);
      assertNotSame(iOContext0, iOContext2);
      assertNotSame(uTF8StreamJsonParser0, uTF8StreamJsonParser1);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(true, true);
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertFalse(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(64, bytesToNameCanonicalizer1.bucketCount());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      String string0 = uTF8StreamJsonParser1.getText();
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(4, byteArrayInputStream0.available());
      assertFalse(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertEquals((-3118), uTF8StreamJsonParser1.getFeatureMask());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4, byteArray0.length);
      assertNull(string0);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(iOContext2, iOContext1);
      assertNotSame(iOContext2, iOContext0);
      assertNotSame(uTF8StreamJsonParser1, uTF8StreamJsonParser0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      String string1 = uTF8StreamJsonParser0._getText2(jsonToken0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(8, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals("", string1);
      assertFalse(iOContext0.equals((Object)iOContext1));
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(uTF8StreamJsonParser0.equals((Object)uTF8StreamJsonParser1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(string1);
      assertNotSame(iOContext0, iOContext1);
      assertNotSame(iOContext0, iOContext2);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(uTF8StreamJsonParser0, uTF8StreamJsonParser1);
      
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseLongName((-3118));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3118
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNotNull(bytesToNameCanonicalizer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext1);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")");
      assertFalse(boolean0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)12, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 977, (byte)0, false);
      assertEquals(9, byteArrayInputStream0.available());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(12, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      JsonToken jsonToken0 = uTF8StreamJsonParser0._parseNumber(373);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(12, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertTrue(jsonToken0.isNumeric());
      assertNull(jsonToken0.asString());
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotSame(iOContext1, iOContext0);
      
      try { 
        uTF8StreamJsonParser0._handleUnexpectedValue(2000);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u07D0': was expecting ('true', 'false' or 'null')
         //  at [Source: java.lang.Object@0000000039; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertNotNull(bytesToNameCanonicalizer0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(true, true);
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertFalse(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(64, bytesToNameCanonicalizer1.bucketCount());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte)64, 16, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(2000, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte)64, (byte)64, (byte)64}, byteArray0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(3, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer2 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer2.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer2.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer2.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer2.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer2.size());
      assertFalse(bytesToNameCanonicalizer2.equals((Object)bytesToNameCanonicalizer0));
      assertFalse(bytesToNameCanonicalizer2.equals((Object)bytesToNameCanonicalizer1));
      assertNotNull(bytesToNameCanonicalizer2);
      assertNotSame(bytesToNameCanonicalizer2, bytesToNameCanonicalizer0);
      assertNotSame(bytesToNameCanonicalizer2, bytesToNameCanonicalizer1);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer3 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer3.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer3.size());
      assertEquals(0, bytesToNameCanonicalizer3.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer3.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer3.collisionCount());
      assertFalse(bytesToNameCanonicalizer3.equals((Object)bytesToNameCanonicalizer2));
      assertFalse(bytesToNameCanonicalizer3.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(bytesToNameCanonicalizer3.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer3);
      assertNotSame(bytesToNameCanonicalizer3, bytesToNameCanonicalizer2);
      assertNotSame(bytesToNameCanonicalizer3, bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer3, bytesToNameCanonicalizer0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 128, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer3, byteArray0, (-355), 1270, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(bytesToNameCanonicalizer3.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer3.size());
      assertEquals(0, bytesToNameCanonicalizer3.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer3.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer3.collisionCount());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertEquals(128, uTF8StreamJsonParser1.getFeatureMask());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertArrayEquals(new byte[] {(byte)64, (byte)64, (byte)64}, byteArray0);
      assertFalse(bytesToNameCanonicalizer3.equals((Object)bytesToNameCanonicalizer2));
      assertFalse(bytesToNameCanonicalizer3.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(bytesToNameCanonicalizer3.equals((Object)bytesToNameCanonicalizer0));
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(3, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser1);
      
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._handleUnexpectedValue(101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -355
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNotNull(bytesToNameCanonicalizer0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(objectCodec0).readValue(any(com.fasterxml.jackson.core.JsonParser.class) , any(java.lang.Class.class));
      doReturn((String) null).when(objectCodec0).toString();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 845, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, (byte[]) null, 845, (-1184), false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(845, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(uTF8StreamJsonParser0);
      
      Class<Object> class0 = Object.class;
      Object object0 = uTF8StreamJsonParser0.readValueAs(class0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(845, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNull(object0);
      
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      String string0 = uTF8StreamJsonParser0.getValueAsString("\"4}\u0001LWL1_");
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(845, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals("\"4}\u0001LWL1_", string0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(string0);
      
      try { 
        uTF8StreamJsonParser0.getBinaryValue((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000040; line: 1, column: 846]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF-32BE");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-52), (byte) (-52), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(bytesToNameCanonicalizer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF-32BE", true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Unexpected end-of-input within/between ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-52), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 5086, 5086, true);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals((-52), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte) (-52), (byte) (-52), (byte)0, (byte)0}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xcc
         //  at [Source: java.lang.String@0000000041; line: 1, column: 5089]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(2000);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      byte byte0 = (byte)85;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertNotNull(bytesToNameCanonicalizer0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 45, pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte)85, (byte) (-77), false);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(45, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      byte byte1 = (byte) (-116);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte) (-77), pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 593, (byte) (-14), false);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertEquals((-77), uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray0);
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser1);
      
      boolean boolean0 = uTF8StreamJsonParser0._loadToHaveAtLeast((-1065));
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(45, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray0);
      assertTrue(boolean0);
      assertFalse(uTF8StreamJsonParser0.equals((Object)uTF8StreamJsonParser1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, byteArray0.length);
      assertNotSame(uTF8StreamJsonParser0, uTF8StreamJsonParser1);
      
      try { 
        uTF8StreamJsonParser1.nextIntValue((byte) (-14));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "TaHsUm", true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(bytesToNameCanonicalizer0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(true, true);
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(64, bytesToNameCanonicalizer1.bucketCount());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertFalse(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      byte[] byteArray0 = new byte[8];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 128, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 128, 101, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(128, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler1);
      
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      assertFalse(bufferRecycler2.equals((Object)bufferRecycler1));
      assertFalse(bufferRecycler2.equals((Object)bufferRecycler0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler2);
      
      IOContext iOContext1 = new IOContext(bufferRecycler2, (Object) null, true);
      assertNull(iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertFalse(bufferRecycler2.equals((Object)bufferRecycler1));
      assertFalse(bufferRecycler2.equals((Object)bufferRecycler0));
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext1);
      
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 47, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 47, 2000, false);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertEquals(47, uTF8StreamJsonParser1.getFeatureMask());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler2));
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(iOContext0.equals((Object)iOContext1));
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser1);
      
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing '\"' for name
         //  at [Source: java.lang.String@0000000042; line: 1, column: 230]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unexpected padding character ('");
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(bytesToNameCanonicalizer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext1);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)20;
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)13;
      byteArray1[5] = (byte)12;
      byteArray1[6] = (byte)12;
      byteArray1[7] = (byte)12;
      byteArray1[8] = (byte)12;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)12, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray1, (byte)12, (-21), false);
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(12, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(3, byteArrayInputStream0.available());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)20, (byte)12, (byte)12, (byte)13, (byte)12, (byte)12, (byte)12, (byte)12}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(3, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      boolean boolean2 = uTF8StreamJsonParser0._loadToHaveAtLeast(659);
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(12, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0, (byte)12, (byte)13, (byte)12, (byte)12, (byte)12, (byte)12}, byteArray1);
      assertFalse(boolean2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(3, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(iOContext1, iOContext0);
      assertNotSame(byteArray1, byteArray0);
      
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 12)): has to be escaped using backslash to be included in string value
         //  at [Source: java.lang.Object@0000000043; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      byte byte0 = (byte) (-52);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[2] = (byte) (-15);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-17), (byte) (-52)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(bytesToNameCanonicalizer0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-17), pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) (-17), (-682), false);
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals((-17), uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-17), (byte) (-52)}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(7, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        uTF8StreamJsonParser0.nextIntValue((byte) (-17));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF-32BE");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-52), (byte) (-52), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF-32BE", true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-52), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2513, 2368, false);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals((-52), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertArrayEquals(new byte[] {(byte) (-52), (byte) (-52), (byte)0}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(3, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-4101), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 1138, (byte) (-52), true);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertEquals((-4101), uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertArrayEquals(new byte[] {(byte) (-52), (byte) (-52), (byte)0}, byteArray0);
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(3, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser1);
      
      String string0 = uTF8StreamJsonParser1._getText2(jsonToken0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertEquals((-4101), uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertArrayEquals(new byte[] {(byte) (-52), (byte) (-52), (byte)0}, byteArray0);
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(3, byteArray0.length);
      assertNull(string0);
      assertNotSame(uTF8StreamJsonParser1, uTF8StreamJsonParser0);
      
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: java.lang.String@0000000044; line: 1, column: 2372]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(true, true);
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertEquals(64, bytesToNameCanonicalizer1.bucketCount());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertFalse(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 128, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 128, 101, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(128, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer2 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer2.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer2.hashSeed());
      assertTrue(bytesToNameCanonicalizer2.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer2.size());
      assertEquals(0, bytesToNameCanonicalizer2.maxCollisionLength());
      assertFalse(bytesToNameCanonicalizer2.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(bytesToNameCanonicalizer2.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer2);
      assertNotSame(bytesToNameCanonicalizer2, bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer2, bytesToNameCanonicalizer0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1270;
      intArray0[1] = 101;
      intArray0[2] = (-1873);
      intArray0[3] = (int) (byte)64;
      intArray0[4] = 1270;
      intArray0[5] = (int) (byte)64;
      intArray0[6] = 101;
      intArray0[7] = 101;
      intArray0[8] = 101;
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseEscapedName(intArray0, 101, 101, 64, 339);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 101
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2000, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 2000, (byte)12, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(2000, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(3, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      char char0 = uTF8StreamJsonParser0._decodeEscaped();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(2000, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0}, byteArray0);
      assertEquals('\f', char0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(3, byteArray0.length);
      
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000045; line: 1, column: 15]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = iOContext0.allocConcatBuffer();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(2000, charArray0.length);
      assertNotNull(charArray0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)85, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 529, 92, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(85, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      JsonToken jsonToken0 = uTF8StreamJsonParser0._parseNumber((-272));
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(85, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertTrue(jsonToken0.isNumeric());
      assertNull(jsonToken0.asString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, byteArray0.length);
      
      String string0 = uTF8StreamJsonParser0.nextTextValue();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertTrue(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(85, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, byteArray0.length);
      assertNull(string0);
      
      int int0 = uTF8StreamJsonParser0.nextIntValue(529);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertTrue(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(85, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(529, int0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertNotNull(bytesToNameCanonicalizer0);
      
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.BASE64_CODEC_BUFFER;
      bufferRecycler0.releaseByteBuffer(bufferRecycler_ByteBufferType0, (byte[]) null);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2064), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, (byte[]) null, 845, (byte)85, true);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals((-2064), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(uTF8StreamJsonParser0);
      
      int int0 = uTF8StreamJsonParser0.nextIntValue(1494);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertTrue(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals((-2064), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1494, int0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      SerializedString serializedString0 = new SerializedString("");
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.toString());
      assertEquals("", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      // Undeclared exception!
      try { 
        serializedString0.appendQuotedUTF8((byte[]) null, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.SerializedString", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[19];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 201, (InputStream) null, objectCodec0, (BytesToNameCanonicalizer) null, byteArray0, 195, 192, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(201, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(19, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      boolean boolean0 = uTF8StreamJsonParser0._loadToHaveAtLeast(500);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(201, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(boolean0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(19, byteArray0.length);
      
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextIntValue(195);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(bytesToNameCanonicalizer0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-67), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-67), 46, true);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals((-67), uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(5, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 3212, byteArrayInputStream0, objectCodec1, bytesToNameCanonicalizer1, byteArray0, 2000, (byte) (-67), true);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertEquals(3212, uTF8StreamJsonParser1.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(5, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser1);
      
      try { 
        uTF8StreamJsonParser1._reportInvalidToken("aHkmCtIS", ",yJC4b&l>");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xbd
         //  at [Source: java.io.SequenceInputStream@0000000046; line: 1, column: -65]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertNotNull(bytesToNameCanonicalizer0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.sym.Name2", true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1006, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 2000, (byte)0, true);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(1006, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(10, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.sym.Name2");
      assertEquals("com.fasterxml.jackson.core.sym.Name2", serializedString0.toString());
      assertEquals("com.fasterxml.jackson.core.sym.Name2", serializedString0.getValue());
      assertEquals(36, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      try { 
        uTF8StreamJsonParser0._matchToken("com.fasterxml.jackson.core.sym.Name2", (byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: java.lang.String@0000000047; line: 1, column: 21]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)21, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNotNull(bytesToNameCanonicalizer0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 2254, 2254);
      assertEquals((-2245), byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)21, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream1);
      
      byteArrayInputStream1.mark((byte)21);
      assertEquals((-2245), byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)21, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-383), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 2254, 57, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals((-383), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)21, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000048; line: 1, column: 59]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UT-32BE");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(12, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNotNull(bytesToNameCanonicalizer0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      int int0 = (-2028);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 2890, 4);
      assertEquals((-2878), byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(12, byteArray0.length);
      assertNotNull(byteArrayInputStream1);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2430), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) (-5), (-2028), false);
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals((-2430), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(12, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals((-2430), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals("true", string0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(12, byteArray0.length);
      assertNotNull(string0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: java.io.PushbackInputStream@0000000049; line: 1, column: -2025]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      long long0 = byteArrayInputStream0.skip(4053L);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2L, long0);
      assertEquals(2, byteArray0.length);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)0, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (-568), (-240), true);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(2, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      SerializedString serializedString0 = new SerializedString(") out of range of long (");
      assertEquals(24, serializedString0.charLength());
      assertEquals(") out of range of long (", serializedString0.toString());
      assertEquals(") out of range of long (", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      boolean boolean1 = false;
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte)0, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (-835), (-2470), false);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertEquals(0, uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(2, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser1);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      String string0 = uTF8StreamJsonParser1._getText2(jsonToken0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertEquals(0, uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("", string0);
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(2, byteArray0.length);
      assertNotNull(string0);
      assertNotSame(uTF8StreamJsonParser1, uTF8StreamJsonParser0);
      
      try { 
        uTF8StreamJsonParser1._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000050; line: 1, column: -3304]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      byte[] byteArray0 = new byte[29];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(29, byteArrayInputStream0.available());
      assertEquals(29, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNotNull(bytesToNameCanonicalizer0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.sym.Name2", true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext1);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)0, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte)0, (byte)0, false);
      assertEquals(29, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(29, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(29, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(29, byteArray0.length);
      assertNotNull(byteArrayInputStream1);
      
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (-1586), (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (-2186), (byte)0, false);
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals((-1586), uTF8StreamJsonParser1.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(29, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser1);
      
      uTF8StreamJsonParser0._skipCR();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(uTF8StreamJsonParser0.equals((Object)uTF8StreamJsonParser1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(29, byteArray0.length);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(iOContext1, iOContext0);
      assertNotSame(uTF8StreamJsonParser0, uTF8StreamJsonParser1);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(false, true);
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertFalse(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(64, bytesToNameCanonicalizer1.bucketCount());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      String string0 = uTF8StreamJsonParser0.getText();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(uTF8StreamJsonParser0.equals((Object)uTF8StreamJsonParser1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(29, byteArray0.length);
      assertNull(string0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(iOContext1, iOContext0);
      assertNotSame(uTF8StreamJsonParser0, uTF8StreamJsonParser1);
      
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      String string1 = uTF8StreamJsonParser0._getText2(jsonToken0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals("false", string1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(uTF8StreamJsonParser0.equals((Object)uTF8StreamJsonParser1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(29, byteArray0.length);
      assertNotNull(string1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(iOContext1, iOContext0);
      assertNotSame(uTF8StreamJsonParser0, uTF8StreamJsonParser1);
      
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.parseLongName((byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2186
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[2] = (byte) (-15);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-17);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-17), (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-15), pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) (-17), 4, false);
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals((-15), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-17), (byte)0}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(7, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals((-15), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-17), (byte)0}, byteArray0);
      assertEquals("", string0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(7, byteArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseLongName((byte) (-15));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -17
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UT-32BE");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(12, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNotNull(bytesToNameCanonicalizer0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 114, pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 4, (-2028), false);
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(114, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(12, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      boolean boolean1 = false;
      int int0 = 883;
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte) (-5), pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) (-5), 883, false);
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertEquals((-5), uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(12, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser1);
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      String string0 = uTF8StreamJsonParser1._getText2(jsonToken0);
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertEquals((-5), uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertEquals("]", string0);
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(12, byteArray0.length);
      assertNotNull(string0);
      assertNotSame(uTF8StreamJsonParser1, uTF8StreamJsonParser0);
      
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._parseAposName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "TaHsUm", true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNotNull(bytesToNameCanonicalizer0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(true, true);
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(64, bytesToNameCanonicalizer1.bucketCount());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertFalse(bytesToNameCanonicalizer1.maybeDirty());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      byte[] byteArray0 = new byte[8];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 128, (InputStream) null, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 128, 101, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(128, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 78, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer1, byteArray0, 1060, 658, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(64, bytesToNameCanonicalizer1.bucketCount());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertFalse(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertEquals(78, uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser1);
      
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseLongName((byte) (-71));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -71
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      byte[] byteArray0 = new byte[29];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(29, byteArrayInputStream0.available());
      assertEquals(29, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.sym.Name2", true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)0, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 2000, (byte)0, false);
      assertEquals(29, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(29, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      Object object0 = uTF8StreamJsonParser0.getTypeId();
      assertEquals(29, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(29, byteArray0.length);
      assertNull(object0);
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        uTF8StreamJsonParser0._parseNumber(45);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: java.lang.String@0000000051; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertNotNull(bytesToNameCanonicalizer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)11, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)91, 47, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(11, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      SerializedString serializedString0 = new SerializedString("KCZPAn");
      assertEquals("KCZPAn", serializedString0.toString());
      assertEquals(6, serializedString0.charLength());
      assertEquals("KCZPAn", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonToken jsonToken0 = uTF8StreamJsonParser0._parseNumber(2);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(11, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertTrue(jsonToken0.isNumeric());
      assertNull(jsonToken0.asString());
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, byteArray0.length);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      
      JsonToken jsonToken1 = uTF8StreamJsonParser0._parseNumber((-2882));
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(11, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(jsonToken1.asString());
      assertTrue(jsonToken1.isNumeric());
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken1);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, byteArray0.length);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertSame(jsonToken1, jsonToken0);
      
      String string0 = uTF8StreamJsonParser0.nextTextValue();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(48, uTF8StreamJsonParser0.getTokenColumnNr());
      assertTrue(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(47L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(11, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(JsonToken.START_ARRAY, uTF8StreamJsonParser0.getCurrentToken());
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, byteArray0.length);
      assertNull(string0);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)109}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)11, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)109, 47, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(1, byteArrayInputStream0.available());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(11, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertArrayEquals(new byte[] {(byte)109}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      SerializedString serializedString0 = new SerializedString("KCZPAn");
      assertEquals("KCZPAn", serializedString0.getValue());
      assertEquals(6, serializedString0.charLength());
      assertEquals("KCZPAn", serializedString0.toString());
      assertNotNull(serializedString0);
      
      BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
      char[] charArray0 = bufferRecycler0.allocCharBuffer(bufferRecycler_CharBufferType0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(200, charArray0.length);
      assertNotNull(charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BufferRecycler.CharBufferType bufferRecycler_CharBufferType1 = BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
      char[] charArray1 = bufferRecycler0.allocCharBuffer(bufferRecycler_CharBufferType1, 23);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(200, charArray1.length);
      assertNotNull(charArray1);
      assertSame(bufferRecycler_CharBufferType1, bufferRecycler_CharBufferType0);
      assertNotSame(charArray1, charArray0);
      
      JsonToken jsonToken0 = uTF8StreamJsonParser0._parseNumber((-2882));
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, byteArrayInputStream0.available());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(11, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(jsonToken0.asString());
      assertTrue(jsonToken0.isNumeric());
      assertArrayEquals(new byte[] {(byte)109}, byteArray0);
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, byteArray0.length);
      
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'm': was expecting ('true', 'false' or 'null')
         //  at [Source: java.lang.Object@0000000052; line: 1, column: 50]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-781);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      String string0 = "true";
      String string1 = "";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)45}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 33, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 2000, 33, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(33, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte)45}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: java.lang.String@0000000053; line: 1, column: 36]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      byte byte0 = (byte)12;
      byte byte1 = (byte) (-19);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)12, (byte) (-19), (byte) (-19), (byte)12}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext1);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer2 = bytesToNameCanonicalizer1.makeChild(false, false);
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertFalse(bytesToNameCanonicalizer2.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer2.size());
      assertEquals(0, bytesToNameCanonicalizer2.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer2.hashSeed());
      assertEquals(64, bytesToNameCanonicalizer2.bucketCount());
      assertEquals(0, bytesToNameCanonicalizer2.collisionCount());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertFalse(bytesToNameCanonicalizer2.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(bytesToNameCanonicalizer2.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer2);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer2);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      assertNotSame(bytesToNameCanonicalizer2, bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer2, bytesToNameCanonicalizer0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 219, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer1, byteArray0, 2000, 55296, true);
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(219, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertArrayEquals(new byte[] {(byte)12, (byte) (-19), (byte) (-19), (byte)12}, byteArray0);
      assertFalse(iOContext0.equals((Object)iOContext1));
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer2));
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._loadToHaveAtLeast((byte) (-19));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext1);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.WRITE_CONCAT_BUFFER;
      int int0 = byteArrayInputStream0.read();
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(12, int0);
      assertEquals(9, byteArray0.length);
      
      bufferRecycler0.releaseByteBuffer(bufferRecycler_ByteBufferType0, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      IOContext iOContext2 = new IOContext(bufferRecycler0, object1, true);
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertFalse(object1.equals((Object)object0));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext2);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, (byte)12, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (-676), 2022, true);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(12, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      int int1 = 255;
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 255, byteArrayInputStream0, objectCodec1, bytesToNameCanonicalizer0, byteArray0, 52, (byte) (-116), true);
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals(255, uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertFalse(object0.equals((Object)object1));
      assertFalse(iOContext1.equals((Object)iOContext2));
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser1);
      
      boolean boolean0 = uTF8StreamJsonParser0._loadToHaveAtLeast(2000);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(12, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertFalse(uTF8StreamJsonParser0.equals((Object)uTF8StreamJsonParser1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotSame(object1, object0);
      assertNotSame(iOContext2, iOContext0);
      assertNotSame(iOContext2, iOContext1);
      assertNotSame(uTF8StreamJsonParser0, uTF8StreamJsonParser1);
      
      try { 
        uTF8StreamJsonParser0.nextIntValue(255);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: java.lang.Object@0000000054; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-15);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-15), (byte) (-52)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) (-52), (-2005), false);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(3, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-15), (byte) (-52)}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(7, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      uTF8StreamJsonParser0._skipCR();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(3, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-15), (byte) (-52)}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(7, byteArray0.length);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(false, false);
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertFalse(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(64, bytesToNameCanonicalizer1.bucketCount());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      String string0 = uTF8StreamJsonParser0.getText();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(3, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-15), (byte) (-52)}, byteArray0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(7, byteArray0.length);
      assertNull(string0);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      String string1 = uTF8StreamJsonParser0._getText2(jsonToken0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(3, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-15), (byte) (-52)}, byteArray0);
      assertEquals("null", string1);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(7, byteArray0.length);
      assertNotNull(string1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      
      try { 
        uTF8StreamJsonParser0.parseLongName(255);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: java.lang.Object@0000000055; line: 2, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNotNull(bytesToNameCanonicalizer0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertTrue(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-67), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-67), (byte) (-67), false);
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(5, byteArrayInputStream0.available());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals((-67), uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(5, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      SerializedString serializedString0 = new SerializedString("+]&xJ- $");
      assertEquals(9, serializedString0.charLength());
      assertEquals("+]&xJ- $", serializedString0.toString());
      assertEquals("+]&xJ- $", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      JsonToken jsonToken0 = uTF8StreamJsonParser0._parseNumber((-404));
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, byteArrayInputStream0.available());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals((-67), uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertTrue(jsonToken0.isNumeric());
      assertNull(jsonToken0.asString());
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(5, byteArray0.length);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseFieldName(56);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(10, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.sym.Name2", true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1006, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 2000, (byte)0, true);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(1006, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(10, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.sym.Name2");
      assertEquals("com.fasterxml.jackson.core.sym.Name2", serializedString0.toString());
      assertEquals(36, serializedString0.charLength());
      assertEquals("com.fasterxml.jackson.core.sym.Name2", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(1006, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("]", string0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(10, byteArray0.length);
      assertNotNull(string0);
      
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: java.lang.String@0000000056; line: 1, column: 21]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(bytesToNameCanonicalizer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNull(iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext1);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "': was expecting ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      assertFalse(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext2);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 2000, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte)21, (byte)21, false);
      assertEquals(1, byteArrayInputStream0.available());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertFalse(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(2000, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 21)): has to be escaped using backslash to be included in string value
         //  at [Source: UNKNOWN; line: 1, column: 23]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-15);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-15), (byte) (-52)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-15), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) (-52), (-2005), false);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals((-15), uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-15), (byte) (-52)}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(7, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(false, false);
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertEquals(64, bytesToNameCanonicalizer1.bucketCount());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertFalse(bytesToNameCanonicalizer1.maybeDirty());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      String string0 = uTF8StreamJsonParser0.getText();
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals((-15), uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-15), (byte) (-52)}, byteArray0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(7, byteArray0.length);
      assertNull(string0);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      String string1 = uTF8StreamJsonParser0._getText2(jsonToken0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals((-15), uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-15), (byte) (-52)}, byteArray0);
      assertEquals("null", string1);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(7, byteArray0.length);
      assertNotNull(string1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      
      try { 
        uTF8StreamJsonParser0.parseLongName(255);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: java.lang.Object@0000000057; line: 1, column: -1990]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTF-32BE");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-52), (byte) (-52), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF-32BE", false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Unexpected end-of-input within/between ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = 210;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 210, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) (-52), (byte) (-52), false);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(210, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertArrayEquals(new byte[] {(byte) (-52), (byte) (-52), (byte)0}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(3, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      uTF8StreamJsonParser0.overrideCurrentName("NaN");
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals("NaN", uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(210, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertArrayEquals(new byte[] {(byte) (-52), (byte) (-52), (byte)0}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(3, byteArray0.length);
      
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte) (-52), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 48, 48, false);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertEquals((-52), uTF8StreamJsonParser1.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertArrayEquals(new byte[] {(byte) (-52), (byte) (-52), (byte)0}, byteArray0);
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(3, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser1);
      
      try { 
        uTF8StreamJsonParser1._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xcc
         //  at [Source: java.lang.String@0000000058; line: 1, column: 51]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-21)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(bytesToNameCanonicalizer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      assertEquals(2, byteArrayInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-21)}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(2, byteArray0.length);
      assertNotNull(iOContext0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 45, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 254, (byte) (-60), false);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(45, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-21)}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(2, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      int int0 = uTF8StreamJsonParser0.getValueAsInt();
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(45, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-21)}, byteArray0);
      assertEquals(0, int0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(2, byteArray0.length);
      
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xeb
         //  at [Source: java.io.ByteArrayInputStream@0000000059; line: 1, column: -57]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byte byte0 = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(bytesToNameCanonicalizer0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)0;
      int int0 = 1558;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-674), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray1, 2497, 1558, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals((-674), uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte)0, (byte)12, (byte)0}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2000;
      intArray0[1] = (-674);
      intArray0[2] = 2497;
      intArray0[3] = (int) (byte)12;
      intArray0[4] = 1558;
      intArray0[5] = 1558;
      intArray0[6] = (-674);
      intArray0[7] = (int) (byte)12;
      uTF8StreamJsonParser0._quadBuffer = intArray0;
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals((-674), uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.WRITE_CONCAT_BUFFER;
      bufferRecycler0.releaseByteBuffer(bufferRecycler_ByteBufferType0, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      try { 
        uTF8StreamJsonParser0._loadToHaveAtLeast(145);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // InputStream.read() returned 0 characters when trying to read -939 bytes
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNotNull(bytesToNameCanonicalizer0);
      
      BufferRecycler.ByteBufferType bufferRecycler_ByteBufferType0 = BufferRecycler.ByteBufferType.READ_IO_BUFFER;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-14);
      bufferRecycler0.releaseByteBuffer(bufferRecycler_ByteBufferType0, byteArray0);
      assertArrayEquals(new byte[] {(byte)85, (byte)83, (byte) (-77), (byte) (-14)}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4, byteArray0.length);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-116), (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, (byte[]) null, 2000, (byte) (-1), true);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals((-116), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(uTF8StreamJsonParser0);
      
      int int0 = uTF8StreamJsonParser0.nextIntValue(845);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals((-116), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(845, int0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      
      try { 
        uTF8StreamJsonParser0._handleOddName(248);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000060; line: 1, column: 1999]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(bytesToNameCanonicalizer0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream1);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer2 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer2.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer2.size());
      assertEquals(0, bytesToNameCanonicalizer2.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer2.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer2.hashSeed());
      assertFalse(bytesToNameCanonicalizer2.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(bytesToNameCanonicalizer2.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer2);
      assertNotSame(bytesToNameCanonicalizer2, bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer2, bytesToNameCanonicalizer0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer2, byteArray0, 2000, (byte) (-67), false);
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(5, byteArrayInputStream0.available());
      assertTrue(bytesToNameCanonicalizer2.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer2.size());
      assertEquals(0, bytesToNameCanonicalizer2.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer2.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer2.hashSeed());
      assertEquals(2, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(bytesToNameCanonicalizer2.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(bytesToNameCanonicalizer2.equals((Object)bytesToNameCanonicalizer0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(5, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xbd
         //  at [Source: java.io.SequenceInputStream@0000000061; line: 1, column: -65]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[2] = (byte) (-15);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-17), (byte) (-52)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(bytesToNameCanonicalizer0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-52), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 4, (-682), false);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals((-52), uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-17), (byte) (-52)}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(7, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      int int0 = uTF8StreamJsonParser0.getValueAsInt();
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals((-52), uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-17), (byte) (-52)}, byteArray0);
      assertEquals(0, int0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(7, byteArray0.length);
      
      try { 
        uTF8StreamJsonParser0.nextLongValue(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xef
         //  at [Source: java.lang.Object@0000000062; line: 1, column: -679]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)109}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)11, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)109, 47, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(1, byteArrayInputStream0.available());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(11, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte)109}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      SerializedString serializedString0 = new SerializedString("KCZPAn");
      assertEquals("KCZPAn", serializedString0.toString());
      assertEquals(6, serializedString0.charLength());
      assertEquals("KCZPAn", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.NAME_COPY_BUFFER;
      char[] charArray0 = bufferRecycler0.allocCharBuffer(bufferRecycler_CharBufferType0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(200, charArray0.length);
      assertNotNull(charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 38, byteArrayInputStream0, objectCodec1, bytesToNameCanonicalizer0, byteArray0, 47, (byte)11, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(1, byteArrayInputStream0.available());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertEquals(38, uTF8StreamJsonParser1.getFeatureMask());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte)109}, byteArray0);
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser1);
      
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: java.lang.Object@0000000063; line: 1, column: 50]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNotNull(bytesToNameCanonicalizer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(dataInputStream0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)85, dataInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 3984, 2000, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(85, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000064; line: 1, column: 2003]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNotNull(bytesToNameCanonicalizer0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)85);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext1);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      int int0 = 591;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)85, pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, (byte[]) null, (-766), 591, false);
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(85, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(uTF8StreamJsonParser0);
      
      uTF8StreamJsonParser0.overrideCurrentName("2dW\"");
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(85, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals("2dW\"", uTF8StreamJsonParser0.getCurrentName());
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(iOContext1, iOContext0);
      
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Numeric value (");
      assertFalse(boolean0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(false, false);
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(64, bytesToNameCanonicalizer1.bucketCount());
      assertFalse(bytesToNameCanonicalizer1.maybeDirty());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)48, (byte)2, (byte)98, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer2 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer2.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer2.size());
      assertEquals(0, bytesToNameCanonicalizer2.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer2.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer2.hashSeed());
      assertFalse(bytesToNameCanonicalizer2.equals((Object)bytesToNameCanonicalizer0));
      assertFalse(bytesToNameCanonicalizer2.equals((Object)bytesToNameCanonicalizer1));
      assertNotNull(bytesToNameCanonicalizer2);
      assertNotSame(bytesToNameCanonicalizer2, bytesToNameCanonicalizer0);
      assertNotSame(bytesToNameCanonicalizer2, bytesToNameCanonicalizer1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Numeric value (");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)98, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte)98, (byte)98, false);
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(98, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertArrayEquals(new byte[] {(byte)48, (byte)2, (byte)98, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer2));
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xff
         //  at [Source: UNKNOWN; line: 1, column: 103]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte) (-5), (byte) (-52), (byte) (-5), (byte) (-52), (byte) (-52)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNotNull(bytesToNameCanonicalizer0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) (-52), (-2028), false);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(3, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte) (-5), (byte) (-52), (byte) (-5), (byte) (-52), (byte) (-52)}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(7, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      uTF8StreamJsonParser0._skipCR();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(3, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte) (-5), (byte) (-52), (byte) (-5), (byte) (-52), (byte) (-52)}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(7, byteArray0.length);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(false, false);
      assertEquals(64, bytesToNameCanonicalizer1.bucketCount());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertFalse(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      
      String string0 = uTF8StreamJsonParser0.getText();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(3, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte) (-5), (byte) (-52), (byte) (-5), (byte) (-52), (byte) (-52)}, byteArray0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(7, byteArray0.length);
      assertNull(string0);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      String string1 = uTF8StreamJsonParser0._getText2(jsonToken0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(3, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte) (-5), (byte) (-52), (byte) (-5), (byte) (-52), (byte) (-52)}, byteArray0);
      assertEquals("null", string1);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(7, byteArray0.length);
      assertNotNull(string1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      
      try { 
        uTF8StreamJsonParser0.parseLongName(255);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: java.lang.Object@0000000065; line: 2, column: 15]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte) (-5), (byte) (-52), (byte) (-5), (byte) (-52), (byte) (-52), (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) (-52), (-2028), false);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(3, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte) (-5), (byte) (-52), (byte) (-5), (byte) (-52), (byte) (-52), (byte)0, (byte)0}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      uTF8StreamJsonParser0._skipCR();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(3, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte) (-5), (byte) (-52), (byte) (-5), (byte) (-52), (byte) (-52), (byte)0, (byte)0}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(true, false);
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertFalse(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(64, bytesToNameCanonicalizer1.bucketCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      
      String string0 = uTF8StreamJsonParser0.getText();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(3, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte) (-5), (byte) (-52), (byte) (-5), (byte) (-52), (byte) (-52), (byte)0, (byte)0}, byteArray0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNull(string0);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      String string1 = uTF8StreamJsonParser0._getText2(jsonToken0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(3, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte) (-5), (byte) (-52), (byte) (-5), (byte) (-52), (byte) (-52), (byte)0, (byte)0}, byteArray0);
      assertEquals("null", string1);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotNull(string1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      
      try { 
        uTF8StreamJsonParser0.parseLongName(255);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: java.lang.Object@0000000066; line: 2, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[8];
      int[] intArray1 = UTF8StreamJsonParser.growArrayBy((int[]) null, 0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      MockFile mockFile0 = new MockFile("true", "");
      assertNotNull(mockFile0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertNotNull(bytesToNameCanonicalizer0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      byteArrayInputStream0.mark((-67));
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      assertEquals(5, byteArrayInputStream0.available());
      assertNull(iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(5, byteArray0.length);
      assertNotNull(iOContext1);
      
      int int0 = 224;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 224, pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (-2148), 2000, false);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(5, byteArrayInputStream0.available());
      assertNull(iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(224, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(5, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseNumber(48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2148
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(14, byteArrayInputStream0.available());
      assertEquals(14, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertNotNull(bytesToNameCanonicalizer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      assertNull(iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext1);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-21), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte) (-21), (byte) (-21), true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(14, byteArrayInputStream0.available());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals((-21), uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(iOContext0.equals((Object)iOContext1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(14, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      uTF8StreamJsonParser0.overrideCurrentName("2dW\"");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(14, byteArrayInputStream0.available());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals((-21), uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals("2dW\"", uTF8StreamJsonParser0.getCurrentName());
      assertFalse(iOContext0.equals((Object)iOContext1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(14, byteArray0.length);
      assertNotSame(iOContext0, iOContext1);
      
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000067; line: 1, column: -18]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertNotNull(bytesToNameCanonicalizer0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 845, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, (byte[]) null, 845, (-1184), false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(845, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(uTF8StreamJsonParser0);
      
      String string0 = uTF8StreamJsonParser0.getValueAsString();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(845, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000068; line: 1, column: -338]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UT-32BE");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(12, byteArrayInputStream0.available());
      assertEquals(12, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertNotNull(bytesToNameCanonicalizer0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 114, pipedInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 4, (-2028), false);
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(114, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(12, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte) (-52), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 48, (-2028), false);
      assertEquals(12, byteArrayInputStream0.available());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertEquals((-52), uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(12, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser1);
      
      uTF8StreamJsonParser1._skipCR();
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertEquals((-52), uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(12, byteArray0.length);
      assertNotSame(uTF8StreamJsonParser1, uTF8StreamJsonParser0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(false, false);
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(64, bytesToNameCanonicalizer1.bucketCount());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertFalse(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      String string0 = uTF8StreamJsonParser1.getText();
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertEquals((-52), uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(12, byteArray0.length);
      assertNull(string0);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(uTF8StreamJsonParser1, uTF8StreamJsonParser0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      String string1 = uTF8StreamJsonParser0._getText2(jsonToken0);
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(114, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals("", string1);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(uTF8StreamJsonParser0.equals((Object)uTF8StreamJsonParser1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(12, byteArray0.length);
      assertNotNull(string1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(uTF8StreamJsonParser0, uTF8StreamJsonParser1);
      
      try { 
        uTF8StreamJsonParser1.parseLongName(1946);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: java.io.PushbackInputStream@0000000069; line: 2, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-5);
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte) (-5), (byte) (-52), (byte) (-5), (byte) (-52), (byte) (-52), (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNotNull(bytesToNameCanonicalizer0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (byte) (-52), (-2028), false);
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(3, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte) (-5), (byte) (-52), (byte) (-5), (byte) (-52), (byte) (-52), (byte)0, (byte)0}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      uTF8StreamJsonParser0._skipCR();
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(3, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte) (-5), (byte) (-52), (byte) (-5), (byte) (-52), (byte) (-52), (byte)0, (byte)0}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-2882), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, 933, (byte) (-52), false);
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals((-2882), uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte) (-5), (byte) (-52), (byte) (-5), (byte) (-52), (byte) (-52), (byte)0, (byte)0}, byteArray0);
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser1);
      
      JsonToken jsonToken0 = uTF8StreamJsonParser1._parseNumber((byte) (-52));
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals((-2882), uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertNull(jsonToken0.asString());
      assertTrue(jsonToken0.isNumeric());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte) (-5), (byte) (-52), (byte) (-5), (byte) (-52), (byte) (-52), (byte)0, (byte)0}, byteArray0);
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotSame(uTF8StreamJsonParser1, uTF8StreamJsonParser0);
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext1);
      
      UTF8StreamJsonParser uTF8StreamJsonParser2 = new UTF8StreamJsonParser(iOContext1, (byte) (-5), byteArrayInputStream0, (ObjectCodec) null, bytesToNameCanonicalizer0, byteArray0, (-2882), (-2882), false);
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertEquals((-5), uTF8StreamJsonParser2.getFeatureMask());
      assertNull(uTF8StreamJsonParser2.getCurrentName());
      assertFalse(uTF8StreamJsonParser2.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser2.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser2.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser2.canReadTypeId());
      assertNull(uTF8StreamJsonParser2.getCurrentToken());
      assertNull(uTF8StreamJsonParser2.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser2.isClosed());
      assertFalse(uTF8StreamJsonParser2.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser2.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser2.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser2.getTokenColumnNr());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, pipedInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte) (-5), (byte) (-52), (byte) (-5), (byte) (-52), (byte) (-52), (byte)0, (byte)0}, byteArray0);
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(uTF8StreamJsonParser2.equals((Object)uTF8StreamJsonParser0));
      assertFalse(uTF8StreamJsonParser2.equals((Object)uTF8StreamJsonParser1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser2);
      
      JsonToken jsonToken1 = uTF8StreamJsonParser2._parseNumber(1291);
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertEquals((-5), uTF8StreamJsonParser2.getFeatureMask());
      assertNull(uTF8StreamJsonParser2.getCurrentName());
      assertFalse(uTF8StreamJsonParser2.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser2.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser2.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser2.canReadTypeId());
      assertNull(uTF8StreamJsonParser2.getCurrentToken());
      assertNull(uTF8StreamJsonParser2.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser2.isClosed());
      assertFalse(uTF8StreamJsonParser2.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser2.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser2.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser2.getTokenColumnNr());
      assertTrue(jsonToken1.isNumeric());
      assertNull(jsonToken1.asString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, pipedInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte) (-5), (byte) (-52), (byte) (-5), (byte) (-52), (byte) (-52), (byte)0, (byte)0}, byteArray0);
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken1);
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertFalse(uTF8StreamJsonParser2.equals((Object)uTF8StreamJsonParser0));
      assertFalse(uTF8StreamJsonParser2.equals((Object)uTF8StreamJsonParser1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotSame(iOContext1, iOContext0);
      assertNotSame(uTF8StreamJsonParser2, uTF8StreamJsonParser0);
      assertNotSame(uTF8StreamJsonParser2, uTF8StreamJsonParser1);
      assertSame(jsonToken1, jsonToken0);
      
      String string0 = uTF8StreamJsonParser1.nextTextValue();
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertTrue(uTF8StreamJsonParser1.isClosed());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals((-2882), uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertArrayEquals(new byte[] {(byte) (-5), (byte) (-5), (byte) (-5), (byte) (-52), (byte) (-5), (byte) (-52), (byte) (-52), (byte)0, (byte)0}, byteArray0);
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser2));
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertFalse(iOContext0.equals((Object)iOContext1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNull(string0);
      assertNotSame(uTF8StreamJsonParser1, uTF8StreamJsonParser2);
      assertNotSame(uTF8StreamJsonParser1, uTF8StreamJsonParser0);
      assertNotSame(iOContext0, iOContext1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertNotNull(bytesToNameCanonicalizer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)11, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)91, 47, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(11, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      SerializedString serializedString0 = new SerializedString("KCZPAn");
      assertEquals(6, serializedString0.charLength());
      assertEquals("KCZPAn", serializedString0.toString());
      assertEquals("KCZPAn", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonToken jsonToken0 = uTF8StreamJsonParser0._parseNumber(2);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(11, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertTrue(jsonToken0.isNumeric());
      assertNull(jsonToken0.asString());
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, byteArray0.length);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: java.lang.Object@0000000070; line: 1, column: 50]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertNotNull(bytesToNameCanonicalizer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      byteArrayInputStream0.reset();
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)11, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)91, 47, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(11, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      SerializedString serializedString0 = new SerializedString("KCZPAn");
      assertEquals(6, serializedString0.charLength());
      assertEquals("KCZPAn", serializedString0.getValue());
      assertEquals("KCZPAn", serializedString0.toString());
      assertNotNull(serializedString0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonToken jsonToken0 = uTF8StreamJsonParser0._parseNumber(2);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(11, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(jsonToken0.asString());
      assertTrue(jsonToken0.isNumeric());
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, byteArray0.length);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      
      JsonToken jsonToken1 = uTF8StreamJsonParser0._parseNumber((-2882));
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(11, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(jsonToken1.asString());
      assertTrue(jsonToken1.isNumeric());
      assertArrayEquals(new byte[] {(byte)91}, byteArray0);
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken1);
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(1, byteArray0.length);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertSame(jsonToken1, jsonToken0);
      
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: java.lang.Object@0000000071; line: 1, column: 50]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertNotNull(bytesToNameCanonicalizer0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)85, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, (byte)0, (byte)0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(85, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      JsonToken jsonToken0 = uTF8StreamJsonParser0._parseNumber(48);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(85, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertTrue(jsonToken0.isNumeric());
      assertNull(jsonToken0.asString());
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      
      try { 
        uTF8StreamJsonParser0.nextLongValue(48);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000072; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[2] = (byte) (-15);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-17), (byte) (-52)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte) (-17), (byte) (-15));
      assertEquals((-15), byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-17), (byte) (-52)}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream1);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream1, false);
      assertEquals((-15), byteArrayInputStream1.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-17), (byte) (-52)}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(7, byteArray0.length);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertNotNull(bytesToNameCanonicalizer0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = bytesToNameCanonicalizer0.makeChild(false, false);
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertFalse(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(64, bytesToNameCanonicalizer1.bucketCount());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-17);
      byteArray1[1] = (byte) (-52);
      byteArray1[2] = (byte) (-52);
      byteArray1[3] = (byte) (-15);
      byteArray1[4] = (byte) (-52);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-5), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer1, byteArray1, 114, 110, false);
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals((-5), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals((-15), byteArrayInputStream1.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertFalse(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(64, bytesToNameCanonicalizer1.bucketCount());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-17), (byte) (-52)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-52), (byte) (-52), (byte) (-15), (byte) (-52)}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(7, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals((-5), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals((-15), byteArrayInputStream1.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertFalse(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(64, bytesToNameCanonicalizer1.bucketCount());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-15), (byte)0, (byte) (-17), (byte) (-17), (byte) (-52)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-52), (byte) (-52), (byte) (-15), (byte) (-52)}, byteArray1);
      assertEquals("null", string0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(bytesToNameCanonicalizer0.equals((Object)bytesToNameCanonicalizer1));
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(7, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(bytesToNameCanonicalizer0, bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      assertNotSame(byteArray1, byteArray0);
      
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: java.io.ByteArrayInputStream@0000000073; line: 1, column: 120]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.CONCAT_BUFFER;
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = 'l';
      charArray0[2] = 'L';
      charArray0[3] = 'E';
      bufferRecycler0.releaseCharBuffer(bufferRecycler_CharBufferType0, charArray0);
      assertArrayEquals(new char[] {'p', 'l', 'L', 'E'}, charArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(4, charArray0.length);
      
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)4;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-57);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte)4, (byte)0, (byte)12, (byte)91, (byte)0, (byte) (-57)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 6, byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 1, 2000, true);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(6, uTF8StreamJsonParser0.getFeatureMask());
      assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte)4, (byte)0, (byte)12, (byte)91, (byte)0, (byte) (-57)}, byteArray0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 180, byteArrayInputStream0, objectCodec1, bytesToNameCanonicalizer0, byteArray0, 180, (byte)11, true);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertEquals(180, uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte)4, (byte)0, (byte)12, (byte)91, (byte)0, (byte) (-57)}, byteArray0);
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(8, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser1);
      
      uTF8StreamJsonParser1._skipCR();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertEquals(180, uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertArrayEquals(new byte[] {(byte)11, (byte)11, (byte)4, (byte)0, (byte)12, (byte)91, (byte)0, (byte) (-57)}, byteArray0);
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(8, byteArray0.length);
      assertNotSame(uTF8StreamJsonParser1, uTF8StreamJsonParser0);
      
      try { 
        uTF8StreamJsonParser1._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: UNKNOWN; line: 2, column: 17]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)21, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertNotNull(bytesToNameCanonicalizer0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer1 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertTrue(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertNotNull(bytesToNameCanonicalizer1);
      assertNotSame(bytesToNameCanonicalizer1, bytesToNameCanonicalizer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)21, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotNull(iOContext1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")");
      assertFalse(boolean0);
      
      int int0 = 4000;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)12, sequenceInputStream0, objectCodec0, bytesToNameCanonicalizer1, byteArray0, (-4077), 1773, false);
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(12, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer1.maxCollisionLength());
      assertEquals(839877741, bytesToNameCanonicalizer1.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer1.collisionCount());
      assertTrue(bytesToNameCanonicalizer1.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer1.size());
      assertFalse(iOContext1.isResourceManaged());
      assertNull(iOContext1.getEncoding());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)21, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(bytesToNameCanonicalizer1.equals((Object)bytesToNameCanonicalizer0));
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(9, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseNumber(45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4077
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      BufferRecycler.CharBufferType bufferRecycler_CharBufferType0 = BufferRecycler.CharBufferType.TOKEN_BUFFER;
      char[] charArray0 = bufferRecycler0.allocCharBuffer(bufferRecycler_CharBufferType0, 110);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(2000, charArray0.length);
      assertNotNull(charArray0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 6, (InputStream) null, objectCodec0, bytesToNameCanonicalizer0, (byte[]) null, 110, 32, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(6, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(uTF8StreamJsonParser0);
      
      long long0 = uTF8StreamJsonParser0.nextLongValue(6);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertEquals(6, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertTrue(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(6L, long0);
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BytesToNameCanonicalizer bytesToNameCanonicalizer0 = BytesToNameCanonicalizer.createRoot();
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertNotNull(bytesToNameCanonicalizer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(bufferRecycler1);
      
      IOContext iOContext0 = new IOContext(bufferRecycler1, "", false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-17), byteArrayInputStream0, objectCodec0, bytesToNameCanonicalizer0, byteArray0, 2000, (byte) (-17), true);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((-17), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17)}, byteArray0);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(2, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser0);
      
      Object object1 = uTF8StreamJsonParser0.getObjectId();
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((-17), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17)}, byteArray0);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(2, byteArray0.length);
      assertNull(object1);
      assertNotSame(bufferRecycler1, bufferRecycler0);
      
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, true);
      assertNull(iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertFalse(iOContext1.equals((Object)iOContext0));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertNotNull(iOContext1);
      
      IOContext iOContext2 = new IOContext(bufferRecycler1, byteArrayInputStream0, false);
      assertEquals(2, byteArrayInputStream0.available());
      assertFalse(iOContext2.isResourceManaged());
      assertNull(iOContext2.getEncoding());
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17)}, byteArray0);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertFalse(iOContext2.equals((Object)iOContext0));
      assertFalse(iOContext2.equals((Object)iOContext1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(2, byteArray0.length);
      assertNotNull(iOContext2);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 9, byteArrayInputStream0, objectCodec1, bytesToNameCanonicalizer0, byteArray0, 55296, 2000, false);
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertEquals(9, uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17)}, byteArray0);
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertFalse(iOContext0.equals((Object)iOContext1));
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(2, byteArray0.length);
      assertNotNull(uTF8StreamJsonParser1);
      
      uTF8StreamJsonParser0.overrideCurrentName("");
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, bytesToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, bytesToNameCanonicalizer0.collisionCount());
      assertEquals(839877741, bytesToNameCanonicalizer0.hashSeed());
      assertTrue(bytesToNameCanonicalizer0.maybeDirty());
      assertEquals(0, bytesToNameCanonicalizer0.size());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((-17), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals("", uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17)}, byteArray0);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertFalse(iOContext0.equals((Object)iOContext1));
      assertFalse(iOContext0.equals((Object)iOContext2));
      assertFalse(uTF8StreamJsonParser0.equals((Object)uTF8StreamJsonParser1));
      assertEquals(2000, BufferRecycler.DEFAULT_WRITE_CONCAT_BUFFER_LEN);
      assertEquals(2, byteArray0.length);
      assertNotSame(bufferRecycler1, bufferRecycler0);
      assertNotSame(iOContext0, iOContext1);
      assertNotSame(iOContext0, iOContext2);
      assertNotSame(uTF8StreamJsonParser0, uTF8StreamJsonParser1);
      
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xef
         //  at [Source: java.lang.String@0000000074; line: 1, column: -14]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }
}
