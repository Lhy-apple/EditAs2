/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 27 00:17:50 GMT 2023
 */

package com.fasterxml.jackson.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.TextBuffer;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TextBuffer_ESTest extends TextBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      textBuffer0.emptyAndGetCurrentSegment();
      textBuffer0.finishCurrentSegment();
      assertEquals(1000, textBuffer0.size());
      
      textBuffer0.resetWithEmpty();
      assertEquals(0, textBuffer0.getTextOffset());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      String string0 = textBuffer0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      int int0 = textBuffer0.getCurrentSegmentSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.releaseBuffers();
      assertEquals(0, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      textBuffer0.releaseBuffers();
      int int0 = textBuffer0.getTextOffset();
      assertEquals(0, int0);
      assertEquals(0, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
      assertEquals(200, charArray0.length);
      
      textBuffer0.releaseBuffers();
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(0, textBuffer0.getTextOffset());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = textBuffer0.getCurrentSegment();
      textBuffer0.resetWithShared(charArray0, 2000, 14);
      // Undeclared exception!
      try { 
        textBuffer0.append(charArray0, 14, 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.getCurrentSegment();
      char[] charArray0 = textBuffer0.finishCurrentSegment();
      textBuffer0.resetWithShared(charArray0, 2000, 2000);
      // Undeclared exception!
      try { 
        textBuffer0.append(charArray0, 2000, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = textBuffer0.getCurrentSegment();
      // Undeclared exception!
      try { 
        textBuffer0.resetWithCopy(charArray0, 2000, 2000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.getCurrentSegment();
      char[] charArray0 = textBuffer0.finishCurrentSegment();
      // Undeclared exception!
      try { 
        textBuffer0.resetWithCopy(charArray0, 2812, 2812);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        textBuffer0.resetWithCopy(charArray0, 2000, 2000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.resetWithString("&CC'w&>tY4!");
      boolean boolean0 = textBuffer0.hasTextAsCharacters();
      assertEquals(11, textBuffer0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      textBuffer0.emptyAndGetCurrentSegment();
      textBuffer0.finishCurrentSegment();
      assertEquals(1000, textBuffer0.size());
      
      textBuffer0.resetWithString((String) null);
      assertEquals(0, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      int int0 = textBuffer0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.ensureNotShared();
      char[] charArray0 = textBuffer0.contentsAsArray();
      assertNotNull(charArray0);
      
      int int0 = textBuffer0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.resetWithString("\"SVL");
      int int0 = textBuffer0.size();
      assertFalse(textBuffer0.hasTextAsCharacters());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      int int0 = textBuffer0.getTextOffset();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      boolean boolean0 = textBuffer0.hasTextAsCharacters();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.ensureNotShared();
      boolean boolean0 = textBuffer0.hasTextAsCharacters();
      assertEquals(0, textBuffer0.getTextOffset());
      assertEquals(0, textBuffer0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.ensureNotShared();
      char[] charArray0 = textBuffer0.contentsAsArray();
      assertNotNull(charArray0);
      
      textBuffer0.hasTextAsCharacters();
      assertEquals(0, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
      char[] charArray1 = textBuffer0.getTextBuffer();
      assertNotNull(charArray1);
      assertEquals(1000, charArray1.length);
      assertSame(charArray1, charArray0);
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      char[] charArray0 = textBuffer0.getTextBuffer();
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.resetWithString("abtaZQ!B,6sJ$");
      textBuffer0.getTextBuffer();
      textBuffer0.getTextBuffer();
      assertEquals(13, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.ensureNotShared();
      textBuffer0.finishCurrentSegment();
      textBuffer0.getTextBuffer();
      assertEquals(200, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      textBuffer0.contentsAsString();
      String string0 = textBuffer0.contentsAsString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.contentsAsArray();
      try { 
        textBuffer0.contentsAsDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      textBuffer0.emptyAndGetCurrentSegment();
      textBuffer0.contentsAsString();
      assertFalse(textBuffer0.hasTextAsCharacters());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
      textBuffer0.resetWithShared(charArray0, 2000, 2000);
      // Undeclared exception!
      try { 
        textBuffer0.contentsAsString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      textBuffer0.emptyAndGetCurrentSegment();
      textBuffer0.finishCurrentSegment();
      textBuffer0.contentsAsString();
      assertFalse(textBuffer0.hasTextAsCharacters());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = textBuffer0.contentsAsArray();
      char[] charArray1 = textBuffer0.contentsAsArray();
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      // Undeclared exception!
      try { 
        textBuffer0.contentsAsDecimal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.contentsAsArray();
      try { 
        textBuffer0.contentsAsDecimal();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.append('8');
      assertEquals(1, textBuffer0.size());
      
      BigDecimal bigDecimal0 = textBuffer0.contentsAsDecimal();
      assertEquals((short)8, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.append('8');
      textBuffer0.finishCurrentSegment();
      try { 
        textBuffer0.contentsAsDecimal();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
      assertEquals(1000, charArray0.length);
      assertEquals(0, textBuffer0.getTextOffset());
      
      textBuffer0.ensureNotShared();
      assertEquals(0, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.emptyAndGetCurrentSegment();
      textBuffer0.setCurrentLength(2000);
      textBuffer0.append('y');
      assertEquals(201, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
      textBuffer0.setCurrentLength(2000);
      textBuffer0.append(charArray0, 33, 33);
      assertEquals(233, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      String string0 = textBuffer0.contentsAsString();
      textBuffer0.emptyAndGetCurrentSegment();
      // Undeclared exception!
      try { 
        textBuffer0.append(string0, 3544, 1000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      // Undeclared exception!
      try { 
        textBuffer0.append("lavsA{[dZiBj", 2000, 2000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.emptyAndGetCurrentSegment();
      textBuffer0.setCurrentLength(2000);
      textBuffer0.append("TOSEN_BUFLFER", 4, 4);
      assertEquals(4, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.emptyAndGetCurrentSegment();
      // Undeclared exception!
      try { 
        textBuffer0.append("NAME_OPY_BUFFER", 2000, 2000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
      assertEquals(0, textBuffer0.getTextOffset());
      
      char[] charArray1 = textBuffer0.getCurrentSegment();
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
      assertEquals(1000, charArray1.length);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.resetWithString(".Eny\"%CAgW9YnZ/r");
      assertFalse(textBuffer0.hasTextAsCharacters());
      
      textBuffer0.getCurrentSegment();
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.emptyAndGetCurrentSegment();
      textBuffer0.setCurrentLength(2000);
      textBuffer0.getCurrentSegment();
      assertEquals(0, textBuffer0.getCurrentSegmentSize());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.emptyAndGetCurrentSegment();
      textBuffer0.finishCurrentSegment();
      assertEquals(200, textBuffer0.size());
      
      char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
      assertEquals(300, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      textBuffer0.emptyAndGetCurrentSegment();
      textBuffer0.expandCurrentSegment();
      textBuffer0.expandCurrentSegment();
      textBuffer0.expandCurrentSegment();
      textBuffer0.finishCurrentSegment();
      textBuffer0.expandCurrentSegment();
      textBuffer0.expandCurrentSegment();
      textBuffer0.finishCurrentSegment();
      textBuffer0.expandCurrentSegment();
      textBuffer0.expandCurrentSegment();
      textBuffer0.expandCurrentSegment();
      textBuffer0.expandCurrentSegment();
      textBuffer0.expandCurrentSegment();
      textBuffer0.expandCurrentSegment();
      textBuffer0.expandCurrentSegment();
      textBuffer0.expandCurrentSegment();
      assertEquals(14764, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = textBuffer0.getCurrentSegment();
      textBuffer0.finishCurrentSegment();
      textBuffer0.setCurrentLength(2000);
      // Undeclared exception!
      try { 
        textBuffer0.append(charArray0, 2000, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.emptyAndGetCurrentSegment();
      textBuffer0.setCurrentLength(2000);
      // Undeclared exception!
      try { 
        textBuffer0.append("com.fasterxml.jackson.core.util.TextBuffer", 2000, 2000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.append('1');
      textBuffer0.contentsAsDouble();
      textBuffer0.contentsAsArray();
      assertEquals(1, textBuffer0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextBuffer textBuffer0 = new TextBuffer((BufferRecycler) null);
      textBuffer0.resetWithShared((char[]) null, 0, 2000);
      // Undeclared exception!
      try { 
        textBuffer0.contentsAsArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = textBuffer0.emptyAndGetCurrentSegment();
      textBuffer0.resetWithShared(charArray0, 212, 2000);
      // Undeclared exception!
      try { 
        textBuffer0.contentsAsArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.append('u');
      textBuffer0.contentsAsArray();
      assertEquals(1, textBuffer0.size());
  }
}
