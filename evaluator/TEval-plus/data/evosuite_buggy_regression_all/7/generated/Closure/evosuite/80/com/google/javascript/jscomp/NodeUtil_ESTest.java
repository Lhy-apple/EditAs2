/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:10:32 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckRegExp;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlFlowAnalysis;
import com.google.javascript.jscomp.DefaultCodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax;
import com.google.javascript.jscomp.SourceMap;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeUtil_ESTest extends NodeUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Node node0 = new Node(76);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForCallOrNew(node0, 38);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.containsFunction((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = Node.newString(33, "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement");
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Node node0 = new Node(102);
      boolean boolean0 = NodeUtil.isSimpleFunctionObjectCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = new Node((-1247), (-1247), (-1247));
      boolean boolean0 = NodeUtil.mayEffectMutableState(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Node node0 = new Node(55);
      // Undeclared exception!
      try { 
        NodeUtil.getPrototypePropertyName(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node(122);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Node node0 = new Node(87);
      // Undeclared exception!
      try { 
        NodeUtil.functionCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected CALL node, got ASSIGN_BITOR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Node node0 = Node.newString((-4622), "javascript");
      boolean boolean0 = NodeUtil.containsCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Node node0 = new Node(110);
      // Undeclared exception!
      try { 
        NodeUtil.getArgumentForFunction(node0, 13);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.isVarArgsFunction((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      int int0 = NodeUtil.getNameReferenceCount(node0, ":");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "|&IgF_5*", "rhino");
      Predicate<Node> predicate0 = PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE;
      int int0 = NodeUtil.getNodeTypeReferenceCount(node0, (-2177), predicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = new Node(104);
      // Undeclared exception!
      try { 
        NodeUtil.constructorCallHasSideEffects(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected NEW node, got DOT
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Node node0 = new Node(90);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionBody(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.referencesThis((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil$MatchNodeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node((-1));
      Node node1 = NodeUtil.newExpr(node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertTrue(boolean0);
      assertEquals(130, node1.getType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "wyCFb7Hw=12", 1715, 1715);
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertTrue(boolean0);
      assertEquals(1715, node0.getCharno());
      assertEquals(1715, node0.getLineno());
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Node node0 = Node.newString("Ie)2~vzE", 108, 48);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      NodeUtil.BooleanResultPredicate nodeUtil_BooleanResultPredicate0 = new NodeUtil.BooleanResultPredicate();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(106);
      Node node0 = new Node(106);
      int int0 = NodeUtil.getCount(node0, nodeUtil_MatchNodeType0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      Node node0 = Node.newString("{$%s}", 4, 4);
      Node node1 = new Node(37, node0, node0, 6, 0);
      SourceMap.DetailLevel sourceMap_DetailLevel0 = SourceMap.DetailLevel.SYMBOLS;
      int int0 = NodeUtil.getCount(node0, nodeUtil_NumbericResultPredicate0, sourceMap_DetailLevel0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Node node0 = new Node(106);
      Node node1 = new Node(26, node0, node0, 11, 2);
      NodeUtil.getExpressionBooleanValue(node1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Node node0 = new Node(85);
      // Undeclared exception!
      try { 
        NodeUtil.getExpressionBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Node node0 = new Node(98);
      // Undeclared exception!
      try { 
        NodeUtil.getExpressionBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      // Undeclared exception!
      try { 
        NodeUtil.getExpressionBooleanValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Node node0 = new Node(71);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "false", node0, "N|@Z3w)LF_;B$");
      NodeUtil.getExpressionBooleanValue(node1);
      assertEquals(38, node1.getType());
      assertEquals(0, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-730), (-730), (int) (byte) (-116));
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Node node0 = Node.newString("+I2nGg(mnA5d$", 108, 108);
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Node node0 = new Node(43, 43, 43);
      NodeUtil.getBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(44);
      NodeUtil.getExpressionBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(94);
      Node node1 = new Node(47, node0, node0, node0, 2, 2);
      NodeUtil.getExpressionBooleanValue(node1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node(98);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      NodeUtil.getBooleanValue(node1);
      assertEquals(122, node1.getType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newString("", 36, 34);
      NodeUtil.getBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 94, 94);
      NodeUtil.getBooleanValue(node0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Node node0 = new Node(66);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Node node0 = new Node(87);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      String string0 = NodeUtil.arrayToString(node1);
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(122, node1.getType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = Node.newString("Ie)2~vzE", 108, 48);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("Ie)2~vzE", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Node node0 = new Node(44);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Node node0 = Node.newNumber(1498.8615407005477, 38, (-1872));
      String string0 = NodeUtil.getStringValue(node0);
      assertEquals("1498.8615407005477", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = new Node(41);
      String string0 = NodeUtil.getArrayElementStringValue(node0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Node node0 = new Node('/', 157, '/');
      Node node1 = NodeUtil.newVarNode("xe?|X]", node0);
      String string0 = NodeUtil.arrayToString(node1);
      assertNull(string0);
      assertEquals(157, node1.getLineno());
      assertEquals(118, node1.getType());
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Node node0 = new Node(44);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "-730", 88, (-170));
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals((-1), node0.getCharno());
      assertNull(double0);
      assertEquals(38, node0.getType());
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-730), (-730), (int) (byte) (-116));
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals((-730.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Node node0 = new Node(15, (-522), 15);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      Double double0 = NodeUtil.getNumberValue(node1);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Node node0 = new Node(71);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Node node0 = Node.newString("d", 52, 94);
      Double double0 = NodeUtil.getNumberValue(node0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("-730");
      assertEquals((-730.0), (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Double double0 = NodeUtil.getStringNumberValue("Unknown op ");
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = NodeUtil.trimJsWhiteSpace("Should not happen\n");
      assertEquals("Should not happen", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = NodeUtil.isStrWhiteSpaceChar(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Node node0 = new Node(102);
      Node node1 = NodeUtil.newVarNode("/j+6ht{|&Z(hZhtB", node0);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeVAR
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = new Node(9999, 9999, 9999);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "&Go", node0, "&Go");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchShallowStatement0);
      assertTrue(boolean0);
      assertEquals(38, node1.getType());
      assertEquals(9999, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString("+I2nGg(mnA5d$", 108, 108);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = new Node(41);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = Node.newString(43, "undefinedVars");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Node node0 = new Node(44);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = new Node((-1833));
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(99);
      Node node1 = new Node(47, node0, node0, node0, 2, 2);
      boolean boolean0 = NodeUtil.isLiteralValue(node1, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "A)x~k8<RFSYfDU~", "A)x~k8<RFSYfDU~");
      HashSet<String> hashSet0 = new HashSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node node0 = Node.newString(27, "-730", 119, 22);
      // Undeclared exception!
      try { 
        NodeUtil.isValidDefineValue(node0, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "A)x~k8<RFSYfDU~", "A)x~k8<RFSYfDU~");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node node1 = new Node(33, node0, node0, node0);
      boolean boolean0 = NodeUtil.isValidDefineValue(node1, linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "-730", 31, (-1354));
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, linkedHashSet0);
      assertFalse(boolean0);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = Node.newString(";an6ocEqy");
      HashSet<String> hashSet0 = new HashSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node(44);
      HashSet<String> hashSet0 = new HashSet<String>();
      boolean boolean0 = NodeUtil.isValidDefineValue(node0, hashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Node node0 = Node.newString("w%nDMIG94WV{,", 106, 106);
      boolean boolean0 = NodeUtil.isEmptyBlock(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Node node0 = Node.newString(9, "Rg`<m\"mD-f_Eu");
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Node node0 = new Node(10);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Node node0 = new Node(11, 27, 1919);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(14);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(15);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = new Node(16, 8, 40);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(17);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(18);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(19);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Node node0 = new Node(20);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Node node0 = new Node(21);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Node node0 = Node.newString(22, "Rg`<m\"mD-f_Eu");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = new Node(100);
      Node node1 = new Node(24, node0);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(25);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newString(27, "k{pmQ3O");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = new Node(28);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Node node0 = Node.newString("Ie)2~vzE", 108, 48);
      Node node1 = new Node(29, node0, node0, (-48), 1);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(31, 65500, 21);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeDELPROP 65500
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node(32);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, compiler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node(33, 26, (-3019));
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Node node0 = new Node(34, 2, 38);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Node node0 = new Node(35);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(36, 35, 1);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(37);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3, (-1), 5);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node(45);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = Node.newString(46, "wrapRegExp");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(47);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(48);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Node node0 = new Node(49);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeTHROW
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Node node0 = new Node(55);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSETVAR
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = new Node(57, 35, 1);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(63);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = new Node(66);
      CompilerOptions compilerOptions0 = new CompilerOptions();
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, compilerOptions0.sourceMapDetailLevel);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSET_REF
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Node node0 = new Node(71);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("test");
      Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      Node node1 = new Node(76, node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1, (AbstractCompiler) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(77);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(79);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Node node0 = new Node(81);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeLC
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(82);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, compiler0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeLP
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = new Node(85);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Node node0 = new Node(88);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(89);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = new Node(90);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Node node0 = new Node(91);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Node node0 = Node.newString(92, "{$%s}", 134, 1013);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(93);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Node node0 = new Node(94);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Node node0 = new Node(95);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(97);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Node node0 = new Node(99);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeCOLON
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(100);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Node node0 = new Node(102);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Node node0 = new Node(104);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, (AbstractCompiler) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Node node0 = new Node(106);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, compiler0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(107);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Node node0 = new Node(109);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, compiler0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Node node0 = new Node(110);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeSWITCH
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Node node0 = new Node(112);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, (AbstractCompiler) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Node node0 = new Node(113);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = NodeUtil.isSimpleOperatorType(116);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = new Node(119);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = new Node(120, 306654252, 27);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeCATCH 470060
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Node node0 = new Node(121);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeFINALLY
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = new Node(30);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = new Node(31);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Node node0 = Node.newString("{$%s}", 4, 4);
      Node node1 = new Node(37, node0, node0, 6, 0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1, (AbstractCompiler) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "wyCFb7Hw=12", 1715, 1715);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertEquals(1715, node0.getCharno());
      assertFalse(boolean0);
      assertEquals(1715, node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Node node0 = new Node(41);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Node node0 = Node.newString(43, "Rg`<m\"mD-f_Eu");
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Node node0 = new Node(44);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Node node0 = new Node(45);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, compiler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Node node0 = new Node(47);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = new Node(49);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Node node0 = new Node(63, 130, 309);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, compiler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = new Node(98);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = new Node(99, 35, 1);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Node node0 = new Node(71);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node1 = NodeUtil.newFunctionNode("", linkedList0, node0, 40, (-3492));
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Node node0 = Node.newString("or", 3149, 1200);
      Node node1 = new Node(108, node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Node node0 = new Node(110);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Node node0 = new Node(115);
      Compiler compiler0 = new Compiler();
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, compiler0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Node node0 = new Node(118, 4, 109);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, (AbstractCompiler) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Node node0 = new Node(125);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node0, (AbstractCompiler) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Node node0 = Node.newString(4, "LBG");
      Node node1 = NodeUtil.newVarNode("LBG", node0);
      boolean boolean0 = NodeUtil.mayHaveSideEffects(node1);
      assertEquals(118, node1.getType());
      assertFalse(node0.hasChildren());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Node node0 = new Node(87);
      node0.addChildToBack(node0);
      // Undeclared exception!
      try { 
        NodeUtil.mayHaveSideEffects(node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Node node0 = new Node(110);
      // Undeclared exception!
      try { 
        NodeUtil.callHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Node node0 = Node.newString("2gz)}h_V>Y!*{u1(F", 1083, 26);
      // Undeclared exception!
      try { 
        NodeUtil.newHasLocalResult(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Node node0 = new Node(30);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Node node0 = new Node(88);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Node node0 = new Node(31, 65500, 21);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Node node0 = new Node(71);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) googleCodingConvention0, "false", node0, "N|@Z3w)LF_;B$");
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node1);
      assertFalse(boolean0);
      assertEquals(38, node1.getType());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Node node0 = new Node(49);
      boolean boolean0 = NodeUtil.nodeTypeMayHaveSideEffects(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Node node0 = Node.newString("{$%s}", 4, 2828);
      Node node1 = new Node(37, node0, node0, 6, 1707);
      boolean boolean0 = NodeUtil.canBeSideEffected(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "VERSION", 3674, 3674);
      boolean boolean0 = NodeUtil.canBeSideEffected(node0);
      assertFalse(boolean0);
      assertEquals(3674, node0.getLineno());
      assertEquals(3674, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("test");
      Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      Node node1 = new Node(76, node0);
      boolean boolean0 = NodeUtil.canBeSideEffected(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Node node0 = Node.newString(33, "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement");
      Node node1 = new Node(2, node0, node0, node0, 27, (-1742));
      boolean boolean0 = NodeUtil.canBeSideEffected(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = NodeUtil.precedence(4);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = NodeUtil.precedence(98);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(5);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for goto (type 5)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for ifeq (type 6)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for ifne (type 7)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setname (type 8)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = NodeUtil.precedence(9);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = NodeUtil.precedence(10);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = NodeUtil.precedence(11);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int int0 = NodeUtil.precedence(12);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = NodeUtil.precedence(13);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int int0 = NodeUtil.precedence(14);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = NodeUtil.precedence(15);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = NodeUtil.precedence(16);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = NodeUtil.precedence(17);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = NodeUtil.precedence(18);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = NodeUtil.precedence(19);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = NodeUtil.precedence(20);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int int0 = NodeUtil.precedence(21);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int int0 = NodeUtil.precedence(22);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = NodeUtil.precedence(23);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int int0 = NodeUtil.precedence(24);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = NodeUtil.precedence(25);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = NodeUtil.precedence(26);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = NodeUtil.precedence(27);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = NodeUtil.precedence(28);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int int0 = NodeUtil.precedence(29);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int int0 = NodeUtil.precedence(30);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int int0 = NodeUtil.precedence(31);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = NodeUtil.precedence(32);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = NodeUtil.precedence(33);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setprop (type 34)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      int int0 = NodeUtil.precedence(35);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(36);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for setelem (type 36)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = NodeUtil.precedence(37);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = NodeUtil.precedence(38);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = NodeUtil.precedence(40);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = NodeUtil.precedence(41);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int int0 = NodeUtil.precedence(42);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = NodeUtil.precedence(43);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = NodeUtil.precedence(44);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int int0 = NodeUtil.precedence(45);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = NodeUtil.precedence(46);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = NodeUtil.precedence(47);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for bindname (type 48)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for throw (type 49)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = NodeUtil.precedence(51);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(59);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=59> (type 59)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(62);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=62> (type 62)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = NodeUtil.precedence(63);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = NodeUtil.precedence(64);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(78);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for semi (type 78)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(79);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for lb (type 79)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(80);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rb (type 80)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(81);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for lc (type 81)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(82);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rc (type 82)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int int0 = NodeUtil.precedence(83);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(84);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for rp (type 84)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int int0 = NodeUtil.precedence(86);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int int0 = NodeUtil.precedence(88);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      int int0 = NodeUtil.precedence(89);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int int0 = NodeUtil.precedence(91);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      int int0 = NodeUtil.precedence(92);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int int0 = NodeUtil.precedence(94);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      int int0 = NodeUtil.precedence(95);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(99);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for colon (type 99)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = NodeUtil.precedence(100);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int int0 = NodeUtil.precedence(101);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(104);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for dot (type 104)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int int0 = NodeUtil.precedence(105);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(106);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for export (type 106)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int int0 = NodeUtil.precedence(108);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(109);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for else (type 109)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(111);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for case (type 111)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(113);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for while (type 113)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(114);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for do (type 114)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(115);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for for (type 115)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(116);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for break (type 116)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(117);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for continue (type 117)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(118);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for var (type 118)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(119);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for with (type 119)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(120);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for catch (type 120)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      int int0 = NodeUtil.precedence(122);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence(123);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for reserved (type 123)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.precedence((-287));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown precedence for <unknown=-287> (type -287)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node node0 = new Node(85);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeStringHelper(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Node node0 = new Node(86);
      // Undeclared exception!
      try { 
        NodeUtil.isNumericResult(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Node node0 = new Node(98);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString(node0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeStringHelper(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Node node0 = new Node(101);
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString(node0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Node node0 = Node.newString(9, "Rg`<m\"mD-f_Eu");
      boolean boolean0 = NodeUtil.isNumericResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Node node0 = new Node(11);
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Node node0 = new Node(19);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Node node0 = Node.newString(21, "L/2{%8");
      // Undeclared exception!
      try { 
        NodeUtil.mayBeString(node0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Node node0 = new Node(87, 87, 87);
      Node node1 = new Node(22, node0, node0, node0, node0, 2, 8);
      boolean boolean0 = NodeUtil.mayBeString(node1, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Node node0 = Node.newString(23, "", 5, (-1826));
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      Node node1 = new Node(24, node0);
      boolean boolean0 = NodeUtil.mayBeString(node1, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Node node0 = new Node(25, 25, 153);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Node node0 = Node.newString(27, "-730", 119, 22);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Node node0 = Node.newString(28, " M7xH?");
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Node node0 = Node.newNumber((double) 3, (-1), 5);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Node node0 = new Node(102);
      boolean boolean0 = NodeUtil.mayBeString(node0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Node node0 = new Node(12);
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Node node0 = new Node(14);
      boolean boolean0 = NodeUtil.mayBeString(node0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Node node0 = new Node(15, (-522), 15);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Node node0 = new Node(16, 8, 40);
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Node node0 = new Node(18);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Node node0 = new Node(21);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Node node0 = Node.newString(1, "{$ds}", 1, 1);
      Node node1 = new Node(23, node0, node0);
      boolean boolean0 = NodeUtil.isBooleanResult(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      Node node1 = new Node(24, node0);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Node node0 = new Node(26);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Node node0 = Node.newString(27, "-730", 119, 22);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Node node0 = Node.newString("Ie)2~vzE", 108, 48);
      Node node1 = new Node(29, node0, node0, (-48), 1);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Node node0 = new Node(30);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Node node0 = new Node(31, 65500, 21);
      boolean boolean0 = NodeUtil.mayBeString(node0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node node0 = Node.newString(32, "L/2{%8");
      boolean boolean0 = NodeUtil.mayBeString(node0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Node node0 = new Node(35, 13, 45);
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "wyCFb7Hw=12", (-3747), 1715);
      Node node1 = new Node(36, node0, node0, 39, 26);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node1);
      assertEquals(0, node0.getChildCount());
      assertTrue(boolean0);
      assertEquals((-1), node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-730), (-730), (int) (byte) (-116));
      boolean boolean0 = NodeUtil.isBooleanResult(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Node node0 = Node.newString("or", 3149, 1200);
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Node node0 = new Node(41);
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Node node0 = new Node(42);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.common.colledt.ImmutableEntry", "$)M,hCuD!-b");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      node0.setType(43);
      int int0 = NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Node node0 = new Node(44);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Node node0 = Node.newString(45, "A!9g");
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Node node0 = new Node(46);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = new Node(47, node0, node0, node0, 2, 2);
      Node node2 = ControlFlowAnalysis.computeFallThrough(node1);
      boolean boolean0 = NodeUtil.mayBeString(node2, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Node node0 = new Node(48);
      boolean boolean0 = NodeUtil.mayBeString(node0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Node node0 = new Node(49);
      boolean boolean0 = NodeUtil.isBooleanResultHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Node node0 = Node.newString(51, "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement");
      boolean boolean0 = NodeUtil.mayBeString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Node node0 = new Node(52);
      boolean boolean0 = NodeUtil.mayBeStringHelper(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      boolean boolean0 = NodeUtil.mayBeString(node1, false);
      assertEquals(122, node1.getType());
      assertFalse(boolean0);
      assertEquals(100, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Node node0 = new Node(98);
      Node node1 = NodeUtil.newUndefinedNode(node0);
      String string0 = NodeUtil.getArrayElementStringValue(node1);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(106);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      boolean boolean0 = NodeUtil.isAssociative(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative((-511));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      boolean boolean0 = NodeUtil.isCommutative(23);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Node node0 = new Node(93);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Node node0 = new Node(87);
      int int0 = NodeUtil.getOpFromAssignmentOp(node0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Node node0 = new Node(44);
      // Undeclared exception!
      try { 
        NodeUtil.getOpFromAssignmentOp(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not an assiment op
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Node node0 = new Node(92, 92, 92);
      int int0 = NodeUtil.getOpFromAssignmentOp(node0);
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Node node0 = new Node(94, 94, 94);
      int int0 = NodeUtil.getOpFromAssignmentOp(node0);
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Node node0 = new Node(44);
      boolean boolean0 = NodeUtil.isExpressionNode(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Node node0 = Node.newString(33, "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement");
      boolean boolean0 = NodeUtil.isGet(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.InstrumentFunctions$InstrumentCallback", (-3722), 1204);
      NodeUtil.getPrototypeClassName(node0);
      assertEquals((-1), node0.getLineno());
      assertEquals(2, node0.getChildCount());
      assertTrue(node0.isQualifiedName());
      assertTrue(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CheckRegExp checkRegExp0 = new CheckRegExp((AbstractCompiler) null);
      Node node0 = new Node(38, 34, 49);
      // Undeclared exception!
      try { 
        checkRegExp0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeTraversal", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Node node0 = new Node(106);
      boolean boolean0 = NodeUtil.isVar(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Node node0 = new Node(112);
      Node node1 = NodeUtil.newVarNode("mozilla", node0);
      boolean boolean0 = NodeUtil.isVar(node1);
      assertFalse(node0.hasChildren());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Node node0 = new Node((-1));
      boolean boolean0 = NodeUtil.isString(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Node node0 = new Node(102);
      boolean boolean0 = NodeUtil.isAssign(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Node node0 = new Node(100, 100, 100);
      boolean boolean0 = NodeUtil.isExprCall(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Node node0 = new Node(44);
      boolean boolean0 = NodeUtil.isForIn(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Node node0 = new Node(45);
      Node node1 = NodeUtil.getLoopCodeBlock(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Node node0 = new Node(87, 87, 87);
      Node node1 = new Node(39, node0, node0, (-1), 113);
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Node node0 = new Node(71);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node1 = NodeUtil.newFunctionNode("T~O0=V[XArS,i+o", linkedList0, node0, 40, (-3492));
      assertEquals(3, node1.getChildCount());
      assertEquals((-1), node1.getCharno());
      assertEquals(105, node1.getType());
      
      boolean boolean0 = NodeUtil.isWithinLoop(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Node node0 = new Node(112);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Node node0 = new Node(113);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Node node0 = new Node(115);
      boolean boolean0 = NodeUtil.isControlStructure(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Node node0 = new Node(110);
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Node node0 = new Node(102);
      // Undeclared exception!
      try { 
        NodeUtil.isControlStructureCodeBlock(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Node node0 = new Node(115);
      boolean boolean0 = NodeUtil.isControlStructureCodeBlock(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Node node0 = new Node(112, 112, 112);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DEFAULT 112 does not have a condition.
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Node node0 = new Node(113);
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      // Undeclared exception!
      try { 
        peepholeRemoveDeadCode0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Node node0 = new Node(1368);
      // Undeclared exception!
      try { 
        NodeUtil.getConditionExpression(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1368
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Node node0 = Node.newString(1, "{$ds}", 1, 1);
      Node node1 = new Node(23, node0, node0);
      boolean boolean0 = NodeUtil.isStatement(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      CheckRegExp checkRegExp0 = new CheckRegExp((AbstractCompiler) null);
      SyntheticAst syntheticAst0 = new SyntheticAst("test");
      Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      checkRegExp0.process(node0, node0);
      assertEquals(1, Node.SPECIALCALL_EVAL);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = NodeUtil.isLabelName((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Node node0 = new Node(125);
      boolean boolean0 = NodeUtil.isLabelName(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Node node0 = new Node((-1));
      Node node1 = NodeUtil.newExpr(node0);
      assertEquals(130, node1.getType());
      
      boolean boolean0 = NodeUtil.isTryCatchNodeContainer(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Node node0 = new Node(85);
      Node node1 = NodeUtil.newVarNode("", node0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node1, node0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Node node0 = new Node(87);
      NodeUtil.newVarNode("Rg`<m\"mD-f_Eu", node0);
      // Undeclared exception!
      try { 
        NodeUtil.removeChild(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Invalid attempt to remove node: ASSIGN_BITOR of ASSIGN_BITOR
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Node node0 = new Node(71);
      // Undeclared exception!
      try { 
        NodeUtil.maybeAddFinally(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Node node0 = new Node(94, 94, 94);
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("Ax~k8<RFSYfDU~", "Ax~k8<RFSYfDU~");
      // Undeclared exception!
      try { 
        NodeUtil.tryMergeBlock(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Node node0 = new Node(76);
      Node[] nodeArray0 = new Node[0];
      Node node1 = NodeUtil.newCallNode(node0, nodeArray0);
      Node node2 = NodeUtil.getArgumentForCallOrNew(node1, 38);
      assertNull(node2);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Node node0 = new Node(71);
      boolean boolean0 = NodeUtil.isThis(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      SyntheticAst syntheticAst0 = new SyntheticAst("test");
      Node node0 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      boolean boolean0 = NodeUtil.isArrayLiteral(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Node node0 = new Node(85);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node1 = NodeUtil.newFunctionNode("&", linkedList0, node0, 92, 1);
      // Undeclared exception!
      try { 
        NodeUtil.isHoistedFunctionDeclaration(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Node node0 = Node.newString(33, "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement");
      boolean boolean0 = NodeUtil.isHoistedFunctionDeclaration(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      boolean boolean0 = NodeUtil.isEmptyFunctionExpression(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Node node0 = new Node(44);
      boolean boolean0 = NodeUtil.isFunctionObjectCallOrApply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Node node0 = new Node(1707, 1707, 1707);
      boolean boolean0 = NodeUtil.isLhs(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Node node0 = new Node(52);
      Node node1 = NodeUtil.newVarNode("pos", node0);
      boolean boolean0 = NodeUtil.isLhs(node0, node1);
      assertTrue(boolean0);
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Node node0 = Node.newNumber((double) (-730), (-730), (int) (byte) (-116));
      boolean boolean0 = NodeUtil.isObjectLitKey(node0, node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Node node0 = Node.newNumber((double) 1, 1930, (-2));
      String string0 = NodeUtil.getObjectLitKeyName(node0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Node node0 = new Node(94);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node type: ASSIGN_SUB
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Node node0 = Node.newString("{$%s}", 4, 2828);
      String string0 = NodeUtil.getObjectLitKeyName(node0);
      assertEquals("{$%s}", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Node node0 = new Node(148);
      // Undeclared exception!
      try { 
        NodeUtil.getObjectLitKeyName(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // SET is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Node node0 = new Node(0);
      JSType jSType0 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, (JSType) null);
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Stack<JSType> stack0 = new Stack<JSType>();
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_PROTOTYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      JSType jSType1 = NodeUtil.getObjectLitKeyTypeFromValueType(node0, jSType0);
      assertFalse(jSType1.isNominalType());
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Node node0 = new Node(44);
      boolean boolean0 = NodeUtil.isGetOrSetKey(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = NodeUtil.opToStr(9);
      assertNotNull(string0);
      assertEquals("|", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = NodeUtil.opToStr((-45));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = NodeUtil.opToStr(10);
      assertEquals("^", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(11);
      assertEquals("&", string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = NodeUtil.opToStr(12);
      assertEquals("==", string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = NodeUtil.opToStr(13);
      assertEquals("!=", string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = NodeUtil.opToStr(14);
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = NodeUtil.opToStr(15);
      assertEquals("<=", string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = NodeUtil.opToStr(16);
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = NodeUtil.opToStr(17);
      assertEquals(">=", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = NodeUtil.opToStr(18);
      assertEquals("<<", string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = NodeUtil.opToStr(19);
      assertEquals(">>", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = NodeUtil.opToStr(20);
      assertEquals(">>>", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = NodeUtil.opToStr(21);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = NodeUtil.opToStr(22);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = NodeUtil.opToStr(23);
      assertEquals("*", string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = NodeUtil.opToStr(24);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = NodeUtil.opToStr(25);
      assertEquals("%", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = NodeUtil.opToStr(26);
      assertEquals("!", string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = NodeUtil.opToStr(27);
      assertEquals("~", string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = NodeUtil.opToStr(28);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = NodeUtil.opToStr(29);
      assertNotNull(string0);
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = NodeUtil.opToStr(30);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = NodeUtil.opToStr(31);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = NodeUtil.opToStr(32);
      assertEquals("typeof", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(33);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 33: GETPROP
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = NodeUtil.opToStr(34);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = NodeUtil.opToStr(35);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = NodeUtil.opToStr(36);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(37);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 37: CALL
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = NodeUtil.opToStr(38);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = NodeUtil.opToStr(39);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String string0 = NodeUtil.opToStr(40);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = NodeUtil.opToStr(41);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = NodeUtil.opToStr(42);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = NodeUtil.opToStr(43);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = NodeUtil.opToStr(44);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = NodeUtil.opToStr(45);
      assertNotNull(string0);
      assertEquals("===", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = NodeUtil.opToStr(46);
      assertEquals("!==", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = NodeUtil.opToStr(47);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = NodeUtil.opToStr(48);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = NodeUtil.opToStr(49);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = NodeUtil.opToStr(55);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = NodeUtil.opToStr(57);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = NodeUtil.opToStr('=');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = NodeUtil.opToStr(64);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String string0 = NodeUtil.opToStr(67);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String string0 = NodeUtil.opToStr(68);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = NodeUtil.opToStr(70);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = NodeUtil.opToStr(71);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = NodeUtil.opToStr(73);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = NodeUtil.opToStr(74);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = NodeUtil.opToStr(76);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = NodeUtil.opToStr(79);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String string0 = NodeUtil.opToStr(80);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(82);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 82: RC
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = NodeUtil.opToStr(83);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = NodeUtil.opToStr(84);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String string0 = NodeUtil.opToStr(85);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = NodeUtil.opToStr(86);
      assertNotNull(string0);
      assertEquals("=", string0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = NodeUtil.opToStrNoFail(87);
      assertEquals("|=", string0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String string0 = NodeUtil.opToStr(88);
      assertEquals("^=", string0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String string0 = NodeUtil.opToStr(89);
      assertEquals("&=", string0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = NodeUtil.opToStr(90);
      assertEquals("<<=", string0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String string0 = NodeUtil.opToStr(91);
      assertEquals(">>=", string0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = NodeUtil.opToStr(92);
      assertEquals(">>>=", string0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = NodeUtil.opToStr(94);
      assertEquals("-=", string0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String string0 = NodeUtil.opToStr(95);
      assertEquals("*=", string0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      String string0 = NodeUtil.opToStr(98);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      String string0 = NodeUtil.opToStr(99);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String string0 = NodeUtil.opToStr(100);
      assertEquals("||", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      String string0 = NodeUtil.opToStr(101);
      assertEquals("&&", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String string0 = NodeUtil.opToStr(102);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String string0 = NodeUtil.opToStr(103);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String string0 = NodeUtil.opToStr(104);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = NodeUtil.opToStr(105);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String string0 = NodeUtil.opToStr(106);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = NodeUtil.opToStr(107);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String string0 = NodeUtil.opToStr(108);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      String string0 = NodeUtil.opToStr(109);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = NodeUtil.opToStr(110);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String string0 = NodeUtil.opToStr(111);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String string0 = NodeUtil.opToStr(112);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      // Undeclared exception!
      try { 
        NodeUtil.opToStrNoFail(113);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown op 113: WHILE
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = NodeUtil.opToStr(115);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String string0 = NodeUtil.opToStr(116);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      String string0 = NodeUtil.opToStr(117);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      String string0 = NodeUtil.opToStr(118);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      String string0 = NodeUtil.opToStr(119);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String string0 = NodeUtil.opToStr(120);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      String string0 = NodeUtil.opToStr(121);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      String string0 = NodeUtil.opToStr(122);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Node node0 = new Node(1470);
      NodeUtil.copyNameAnnotations(node0, node0);
      assertFalse(node0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Node node0 = new Node(71);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      linkedList0.add(node0);
      // Undeclared exception!
      try { 
        NodeUtil.newFunctionNode("T~O0=V[XArS,i+o", linkedList0, node0, 40, (-3492));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      DefaultCodingConvention defaultCodingConvention0 = new DefaultCodingConvention();
      Node node0 = Node.newNumber(0.0, 0, (-3470));
      Node node1 = NodeUtil.newName(defaultCodingConvention0, "", node0);
      Node node2 = NodeUtil.getRootOfQualifiedName(node1);
      assertEquals(35, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Node node0 = new Node((-866), 109, 1289);
      // Undeclared exception!
      try { 
        NodeUtil.getRootOfQualifiedName(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Node node0 = new Node(42);
      Node node1 = NodeUtil.getRootOfQualifiedName(node0);
      assertEquals(9, Node.FIXUPS_PROP);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(googleCodingConvention0, "com.google.javascript.jscomp.InstrumentFunctions$InstrmentCallback", (-3708), 1204);
      Node node1 = NodeUtil.getRootOfQualifiedName(node0);
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals((-1), node1.getCharno());
      assertEquals(33, node0.getType());
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Node node0 = Node.newString("undefined", 48, 100);
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      Node node1 = NodeUtil.newName(googleCodingConvention0, "Q#3", node0, "undefined");
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(48, node1.getLineno());
      assertTrue(node1.isQualifiedName());
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("prototype");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("Vs|qgv`B3)b");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      boolean boolean0 = NodeUtil.isValidPropertyName("typeof");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "-730", 31, (-1354));
      NodeUtil.redeclareVarsInsideBranch(node0);
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChildCount());
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "wyCFb7Hw=12", 1715, 1715);
      boolean boolean0 = NodeUtil.isPrototypePropertyDeclaration(node0);
      assertEquals(1715, node0.getLineno());
      assertEquals(1715, node0.getCharno());
      assertFalse(boolean0);
      assertEquals(38, node0.getType());
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = new Node(1707);
      Node node1 = NodeUtil.newQualifiedNameNode((CodingConvention) closureCodingConvention0, "Constructor expected as first argument", node0, "Constructor expected as first argument");
      boolean boolean0 = NodeUtil.isPrototypeProperty(node1);
      assertFalse(boolean0);
      assertFalse(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Node node0 = new Node(94);
      boolean boolean0 = NodeUtil.isPrototypeProperty(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Node node0 = NodeUtil.newUndefinedNode((Node) null);
      assertEquals(122, node0.getType());
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Node node0 = NodeUtil.newVarNode("w%nDMIG94WV{,", (Node) null);
      assertEquals(118, node0.getType());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("=6 O8egZ1d^G0");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.NodeUtil$MatchShallowStatement", "Infinity");
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "]8qRy_F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Node node0 = new Node(110);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Node node0 = new Node(88);
      Node node1 = NodeUtil.newVarNode("", node0);
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      boolean boolean0 = nodeUtil_MatchDeclaration0.apply(node1);
      assertTrue(boolean0);
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Node node0 = new Node(112);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      boolean boolean0 = NodeUtil.has(node0, nodeUtil_NumbericResultPredicate0, nodeUtil_NumbericResultPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("=6 O8egZ1d^G0");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.NodeUtil$MatchShallowStatement", "Infinity");
      boolean boolean0 = NodeUtil.isNameReferenced(node0, "Infinity");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "yJY", "com.google.common.collect.ImmutableEntry");
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = NodeUtil.MAY_BE_STRING_PREDICATE;
      int int0 = NodeUtil.getCount(node0, nodeUtil_MayBeStringResultPredicate0, nodeUtil_MayBeStringResultPredicate0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Node node0 = Node.newString(33, "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement");
      Node node1 = new Node(2, node0, node0, node0, 27, (-1742));
      NodeUtil.redeclareVarsInsideBranch(node1);
      assertEquals(0, Node.NON_SPECIALCALL);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Node node0 = new Node(90);
      Node node1 = new Node(47, node0, node0, node0, 2, 2);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      // Undeclared exception!
      try { 
        NodeUtil.visitPostOrder(node0, (NodeUtil.Visitor) null, nodeUtil_MatchShallowStatement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Node node0 = new Node(94);
      // Undeclared exception!
      try { 
        NodeUtil.hasFinally(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      Node node0 = new Node(92, 92, 92);
      // Undeclared exception!
      try { 
        NodeUtil.getCatchBlock(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Node node0 = Node.newString(33, "com.google.javascript.jscomp.NodeUtil$MatchShallowStatement");
      // Undeclared exception!
      try { 
        NodeUtil.hasCatchHandler(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "A)x~k8<RFSYfDU~", "A)x~k8<RFSYfDU~");
      boolean boolean0 = NodeUtil.hasCatchHandler(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Node node0 = new Node(1720);
      // Undeclared exception!
      try { 
        NodeUtil.getFnParameters(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode((Node) null);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Node node0 = new Node(106);
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Node node0 = Node.newString(4, "LBG");
      node0.addSuppression("{$%s}");
      JSDocInfo jSDocInfo0 = NodeUtil.getInfoForNameNode(node0);
      assertNull(jSDocInfo0.getLendsName());
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Node node0 = new Node(112);
      Node node1 = NodeUtil.newVarNode("mozilla", node0);
      assertEquals(118, node1.getType());
      
      NodeUtil.getInfoForNameNode(node0);
      assertFalse(node0.hasOneChild());
      assertNotSame(node0, node1);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Node node0 = Node.newString("Ie)2~vzE", 108, 48);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Node node0 = new Node(88);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node1 = NodeUtil.newFunctionNode("&", linkedList0, node0, 92, 1);
      // Undeclared exception!
      try { 
        NodeUtil.getFunctionInfo(node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Node node0 = new Node(85);
      String string0 = NodeUtil.getSourceName(node0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Node node0 = new Node(87);
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        NodeUtil.newCallNode(node0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      ClosureCodingConvention closureCodingConvention0 = (ClosureCodingConvention)compiler0.defaultCodingConvention;
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "com.google.javascript.jscomp.InstrumentFunctions$InstrumentCallback", (-3722), 1204);
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertEquals(33, node0.getType());
      assertTrue(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Node node0 = new Node(35);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Node node0 = new Node(46);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Node node0 = new Node(94);
      Node node1 = new Node(47, node0, node0, node0, 2, 2);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Node node0 = new Node(71, 71, 71);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeESCXMLATTR 71
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Node node0 = new Node(82);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected expression nodeRC
         //  parent:null
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Node node0 = new Node(85, 157, 85);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Node node0 = new Node(87);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Node node0 = new Node(88);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Node node0 = new Node(90);
      NodeUtil.MatchShallowStatement nodeUtil_MatchShallowStatement0 = new NodeUtil.MatchShallowStatement();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0, nodeUtil_MatchShallowStatement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Node node0 = new Node(94);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      Node node0 = new Node(98);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0, nodeUtil_NumbericResultPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Node node0 = new Node(100);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      Node node0 = new Node(101);
      // Undeclared exception!
      try { 
        NodeUtil.evaluatesToLocalValue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      NodeUtil.MatchNodeType nodeUtil_MatchNodeType0 = new NodeUtil.MatchNodeType(88);
      Node node0 = new Node(85);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      Node node1 = NodeUtil.newFunctionNode("&", linkedList0, node0, 92, 1);
      assertEquals(105, node1.getType());
      
      NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MatchNodeType0);
      assertEquals(3, node1.getChildCount());
      assertEquals(1, node1.getCharno());
      assertEquals(92, node1.getLineno());
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      Node node0 = NodeUtil.newQualifiedNameNode(closureCodingConvention0, "wyCFb7Hw=12", 1715, 1715);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node0);
      assertEquals(1715, node0.getLineno());
      assertFalse(boolean0);
      assertEquals(1715, node0.getCharno());
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      NodeUtil.NumbericResultPredicate nodeUtil_NumbericResultPredicate0 = new NodeUtil.NumbericResultPredicate();
      Node node0 = Node.newString("{$%s}", 4, 4);
      Node node1 = new Node(37, node0, node0, 6, 0);
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_NumbericResultPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Node node0 = Node.newString("{$%s}", 4, 4);
      Node node1 = new Node(37, node0, node0, 6, 0);
      NodeUtil.MayBeStringResultPredicate nodeUtil_MayBeStringResultPredicate0 = new NodeUtil.MayBeStringResultPredicate();
      boolean boolean0 = NodeUtil.evaluatesToLocalValue(node1, nodeUtil_MayBeStringResultPredicate0);
      assertTrue(boolean0);
  }
}
