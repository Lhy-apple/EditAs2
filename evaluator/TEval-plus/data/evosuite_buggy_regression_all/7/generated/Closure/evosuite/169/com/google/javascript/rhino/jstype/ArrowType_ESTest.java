/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:26:05 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.Visitor;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrowType_ESTest extends ArrowType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noObjectType0, "var_args_name");
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, enumElementType0);
      // Undeclared exception!
      try { 
        arrowType0.getLeastSupertype(noObjectType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      // Undeclared exception!
      try { 
        arrowType0.getTypesUnderInequality(errorFunctionType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "!zN0+");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      // Undeclared exception!
      try { 
        arrowType0.getTypesUnderShallowEquality(errorFunctionType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ")jD~J(`Vv6RGqJ");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      String string0 = arrowType0.toString();
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertEquals("[ArrowType]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "/p_()=m WSpRkts)B.T");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      // Undeclared exception!
      try { 
        arrowType0.visit((Visitor<InstanceObjectType>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Aga}1R'4^1m$");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      NoType noType0 = (NoType)arrowType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertFalse(noType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      Node node0 = errorFunctionType0.getParametersNode();
      assertNotNull(node0);
      
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType0);
      boolean boolean0 = arrowType0.isSubtype(arrowType0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(node0.hasMoreThanOneChild());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "?Z~Y");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      
      JSType[] jSTypeArray0 = new JSType[9];
      jSTypeArray0[0] = (JSType) arrowType0;
      jSTypeArray0[1] = (JSType) errorFunctionType0;
      jSTypeArray0[2] = (JSType) arrowType0;
      jSTypeArray0[3] = (JSType) errorFunctionType0;
      jSTypeArray0[4] = (JSType) errorFunctionType0;
      jSTypeArray0[5] = (JSType) arrowType0;
      jSTypeArray0[6] = (JSType) arrowType0;
      jSTypeArray0[7] = (JSType) errorFunctionType0;
      jSTypeArray0[8] = (JSType) arrowType0;
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node0);
      boolean boolean0 = arrowType1.isSubtype(jSTypeArray0[2]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
      ArrowType arrowType1 = jSTypeRegistry0.createArrowType((Node) null, arrowType0);
      boolean boolean0 = arrowType1.isSubtype(arrowType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(61, "Not declared as a constructor", 61, 0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType0);
      Node node1 = new Node(36, node0, node0, node0);
      ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
      boolean boolean0 = arrowType1.isSubtype(arrowType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      Node node0 = errorFunctionType0.getParametersNode();
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType0);
      Node node1 = new Node(1, node0, node0, node0, node0);
      ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
      boolean boolean0 = arrowType1.isSubtype(arrowType0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.ArrowType");
      Node node0 = errorFunctionType0.getParametersNode();
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, errorFunctionType0);
      Node node1 = new Node(38, node0, node0, node0, node0);
      ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
      boolean boolean0 = arrowType0.isSubtype(arrowType1);
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
      boolean boolean0 = arrowType0.isSubtype(arrowType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      Node node0 = new Node(1);
      Node node1 = new Node(0, node0, node0, node0);
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
      jSTypeNativeArray0[0] = jSTypeNative0;
      ErrorFunctionType errorFunctionType0 = (ErrorFunctionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1, errorFunctionType0);
      boolean boolean0 = arrowType0.isSubtype(arrowType0);
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.common.collect.AbstractMultimap$AsMap");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      ArrowType arrowType1 = jSTypeRegistry0.createArrowType((Node) null);
      boolean boolean0 = arrowType1.isSubtype(arrowType0);
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      Node node0 = Node.newNumber(0.0, (-1724), 8448);
      ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node0);
      boolean boolean0 = arrowType0.isSubtype(arrowType1);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.ArrowType");
      Node node0 = errorFunctionType0.getParametersNode();
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, errorFunctionType0);
      Node node1 = new Node(38, node0, node0, node0, node0);
      ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
      boolean boolean0 = arrowType0.hasEqualParameters(arrowType1, false);
      assertFalse(boolean0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      Node node0 = errorFunctionType0.getParametersNode();
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType0);
      Node node1 = new Node(1, node0, node0, node0, node0);
      ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node1);
      boolean boolean0 = arrowType1.hasEqualParameters(arrowType0, false);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "?Z~Y");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      JSType[] jSTypeArray0 = new JSType[9];
      jSTypeArray0[0] = (JSType) arrowType0;
      jSTypeArray0[1] = (JSType) errorFunctionType0;
      jSTypeArray0[2] = (JSType) arrowType0;
      jSTypeArray0[3] = (JSType) errorFunctionType0;
      jSTypeArray0[4] = (JSType) errorFunctionType0;
      jSTypeArray0[5] = (JSType) arrowType0;
      jSTypeArray0[6] = (JSType) arrowType0;
      jSTypeArray0[7] = (JSType) errorFunctionType0;
      jSTypeArray0[8] = (JSType) arrowType0;
      ImmutableList<JSType> immutableList0 = ImmutableList.copyOf(jSTypeArray0);
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) immutableList0);
      ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node0);
      boolean boolean0 = arrowType1.hasEqualParameters(arrowType0, true);
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      Node node0 = errorFunctionType0.getParametersNode();
      Node node1 = new Node(1, node0, node0, node0, node0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1);
      boolean boolean0 = arrowType0.hasEqualParameters(arrowType0, false);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(boolean0);
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      boolean boolean0 = arrowType0.checkArrowEquivalenceHelper(arrowType0, false);
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, noObjectType0, "var_args_name");
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null, enumElementType0);
      ArrowType arrowType1 = jSTypeRegistry0.createArrowType((Node) null);
      boolean boolean0 = arrowType0.checkArrowEquivalenceHelper(arrowType1, false);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      Node node0 = Node.newString("Not declared as a constructor", 1, 0);
      Node node1 = new Node(1, node0, node0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node1, errorFunctionType0, true);
      arrowType0.hashCode();
      assertFalse(errorFunctionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.ArrowType");
      Node node0 = errorFunctionType0.getParametersNode();
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, errorFunctionType0);
      arrowType0.resolveInternal(simpleErrorReporter0, errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      NoType noType0 = (NoType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      Node node0 = errorFunctionType0.getParametersNode();
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, noType0);
      boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
      assertTrue(noType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      Node node0 = errorFunctionType0.getParametersNode();
      Node node1 = new Node(1, node0, node0, node0, node0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1);
      boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
      assertTrue(boolean0);
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType((Node) null);
      boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeNative jSTypeNative0 = JSTypeNative.CHECKED_UNKNOWN_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      Node node0 = Node.newString(61, "Not declared as a constructor", 61, 0);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, jSType0);
      boolean boolean0 = arrowType0.hasUnknownParamsOrReturn();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[3];
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "L^K~o^;@6T");
      Node node0 = Node.newNumber((double) (-1508));
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) templateType0, node0);
      jSTypeArray0[0] = (JSType) functionType0;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "Unknown class name");
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) templateType0, (JSType) templateType0, (JSType) arrowType0, (JSType) templateType0, (JSType) arrowType0, (JSType) errorFunctionType0, (JSType) arrowType0, (JSType) templateType0, (JSType) arrowType0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
      ArrowType arrowType1 = jSTypeRegistry0.createArrowType(node0, errorFunctionType0);
      boolean boolean0 = arrowType1.hasAnyTemplateInternal();
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber((double) 1);
      Node node1 = new Node(0, node0, node0, 1, 50);
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node1);
      boolean boolean0 = arrowType0.hasAnyTemplateInternal();
      assertFalse(boolean0);
  }
}
