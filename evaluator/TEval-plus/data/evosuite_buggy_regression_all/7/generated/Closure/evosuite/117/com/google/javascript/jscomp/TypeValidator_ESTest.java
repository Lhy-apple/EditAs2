/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:16:35 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.ObjectPropertyStringPreprocess;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.rhino.jstype.JSType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeValidator_ESTest extends TypeValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      TypeValidator typeValidator0 = null;
      try {
        typeValidator0 = new TypeValidator(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DiagnosticType diagnosticType0 = ObjectPropertyStringPreprocess.QUALIFIED_NAME_EXPECTED_ERROR;
      String[] stringArray0 = new String[9];
      JSError jSError0 = JSError.make("JSCompiler_IgnoreCajaProperties_", 0, 0, diagnosticType0, stringArray0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch((JSType) null, (JSType) null, jSError0);
      String string0 = typeValidator_TypeMismatch0.toString();
      assertEquals("(null, null)", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DiagnosticType diagnosticType0 = ObjectPropertyStringPreprocess.QUALIFIED_NAME_EXPECTED_ERROR;
      String[] stringArray0 = new String[9];
      JSError jSError0 = JSError.make("JSCompiler_IgnoreCajaProperties_", 0, 0, diagnosticType0, stringArray0);
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch((JSType) null, (JSType) null, jSError0);
      boolean boolean0 = typeValidator_TypeMismatch0.equals("JSC_OBJECT_PROPERTY_STRING_QUALIFIED_NAME_EXPECTED");
      assertFalse(boolean0);
  }
}
