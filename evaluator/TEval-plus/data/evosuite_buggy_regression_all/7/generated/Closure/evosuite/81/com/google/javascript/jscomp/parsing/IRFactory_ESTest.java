/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:09:14 GMT 2023
 */

package com.google.javascript.jscomp.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ContextFactory;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.ArrayComprehensionLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.ArrayLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
import com.google.javascript.jscomp.mozilla.rhino.ast.Block;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.ConditionalExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.ContinueStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.DoLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.ElementGet;
import com.google.javascript.jscomp.mozilla.rhino.ast.EmptyExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.ExpressionStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.ForLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.Label;
import com.google.javascript.jscomp.mozilla.rhino.ast.LabeledStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Name;
import com.google.javascript.jscomp.mozilla.rhino.ast.NewExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ObjectLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.PropertyGet;
import com.google.javascript.jscomp.mozilla.rhino.ast.ReturnStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Scope;
import com.google.javascript.jscomp.mozilla.rhino.ast.StringLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.SwitchCase;
import com.google.javascript.jscomp.mozilla.rhino.ast.ThrowStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration;
import com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer;
import com.google.javascript.jscomp.mozilla.rhino.ast.WhileLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.WithStatement;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class IRFactory_ESTest extends IRFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ErrorCollector errorCollector0 = new ErrorCollector();
      EmptyExpression emptyExpression0 = new EmptyExpression();
      astRoot0.addChildrenToFront(emptyExpression0);
      Node node0 = IRFactory.transformTree(astRoot0, "[3AD{9Rd", (Config) null, errorCollector0);
      assertEquals(132, node0.getType());
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      DoLoop doLoop0 = new DoLoop((-294));
      astRoot0.addChildrenToFront(doLoop0);
      ErrorCollector errorCollector0 = new ErrorCollector();
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "l", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ErrorCollector errorCollector0 = new ErrorCollector();
      ElementGet elementGet0 = new ElementGet();
      astRoot0.addChildrenToFront(elementGet0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "setters are not supported in Internet Explorer", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ErrorCollector errorCollector0 = new ErrorCollector();
      Name name0 = new Name(3, 14);
      astRoot0.addChildrenToFront(name0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, (String) null, (Config) null, errorCollector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      WhileLoop whileLoop0 = new WhileLoop(4, 6);
      astRoot0.addChildrenToFront(whileLoop0);
      ErrorCollector errorCollector0 = new ErrorCollector();
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "oQ*+63C%\".=", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      NumberLiteral numberLiteral0 = new NumberLiteral(117);
      astRoot0.addChildrenToFront(numberLiteral0);
      ErrorCollector errorCollector0 = new ErrorCollector();
      Node node0 = IRFactory.transformTree(astRoot0, "=TJ(*:xeZB", (Config) null, errorCollector0);
      assertEquals(132, node0.getType());
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      NewExpression newExpression0 = new NewExpression();
      astRoot0.addChildrenToFront(newExpression0);
      ErrorCollector errorCollector0 = new ErrorCollector();
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "ht:8w", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      StringLiteral stringLiteral0 = new StringLiteral();
      astRoot0.addChildrenToFront(stringLiteral0);
      ErrorCollector errorCollector0 = new ErrorCollector();
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "CONTINUE", (Config) null, errorCollector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ErrorCollector errorCollector0 = new ErrorCollector();
      Scope scope0 = new Scope((-4507));
      astRoot0.addChildrenToFront(scope0);
      Node node0 = IRFactory.transformTree(astRoot0, "RAu\".7u", (Config) null, errorCollector0);
      assertEquals(132, node0.getType());
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      Label label0 = new Label();
      astRoot0.addChildrenToFront(label0);
      ErrorCollector errorCollector0 = new ErrorCollector();
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "97zH!~l9M", (Config) null, errorCollector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
         verifyException("com.google.javascript.rhino.Node$StringNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ErrorCollector errorCollector0 = new ErrorCollector();
      ExpressionStatement expressionStatement0 = new ExpressionStatement();
      astRoot0.addChildrenToFront(expressionStatement0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getModifies();
      Config config0 = new Config(set0, set0, false, false, false);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "mC[m>2U l=Y=Ut", config0, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ErrorCollector errorCollector0 = new ErrorCollector();
      PropertyGet propertyGet0 = new PropertyGet(90);
      astRoot0.addChildrenToFront(propertyGet0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "send", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ErrorCollector errorCollector0 = new ErrorCollector();
      WithStatement withStatement0 = new WithStatement(8, 0);
      astRoot0.addChildrenToFront(withStatement0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "0^\"f:f|4sY}Y5JY|{ Y", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop();
      astRoot0.addChildrenToFront(arrayComprehensionLoop0);
      ErrorCollector errorCollector0 = new ErrorCollector();
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "o5\t5B%DgN66zx0q", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ForLoop forLoop0 = new ForLoop();
      astRoot0.addChildrenToFront(forLoop0);
      ErrorCollector errorCollector0 = new ErrorCollector();
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ErrorCollector errorCollector0 = new ErrorCollector();
      ConditionalExpression conditionalExpression0 = new ConditionalExpression(130);
      astRoot0.addChildrenToFront(conditionalExpression0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "kebcVO>>=wx%9#c", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ErrorNode errorNode0 = new ErrorNode(137, 25);
      astRoot0.addChildrenToFront(errorNode0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = IRFactory.transformTree(astRoot0, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", (Config) null, toolErrorReporter0);
      assertTrue(node0.hasOneChild());
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ErrorCollector errorCollector0 = new ErrorCollector();
      AstRoot astRoot1 = new AstRoot();
      ThrowStatement throwStatement0 = new ThrowStatement(45, astRoot1);
      astRoot0.addChildrenToFront(throwStatement0);
      Node node0 = IRFactory.transformTree(astRoot0, "kebcVO>>=wx%9#c", (Config) null, errorCollector0);
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-1630), (-1259), token_CommentType0, "com.google.javascript.jscomp.parsing.IRFactory$1");
      astRoot0.addComment(comment0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = IRFactory.transformTree(astRoot0, "setIsNoSideEffectsCall only supports CALL and NEW nodes, got ", (Config) null, toolErrorReporter0);
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(11, 132, token_CommentType0, "use strict");
      astRoot0.addComment(comment0);
      Config config0 = new Config(set0, set0, true, true, true);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      IRFactory.transformTree(astRoot0, "ASSIGN_SUB", config0, errorReporter0);
      Node node0 = IRFactory.transformTree(astRoot0, ":Q,eT+.(w]CMP;9", config0, errorReporter0);
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(25, 2, token_CommentType0, "[q#jpY66\"7IDN");
      astRoot0.setJsDocNode(comment0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config config0 = new Config(treeSet0, treeSet0, false, false, false);
      Node node0 = IRFactory.transformTree(astRoot0, "[q#jpY66\"7IDN", config0, toolErrorReporter0);
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      VariableDeclaration variableDeclaration0 = new VariableDeclaration(4);
      astRoot0.addChildrenToFront(variableDeclaration0);
      ErrorCollector errorCollector0 = new ErrorCollector();
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Config config0 = new Config(set0, set0, true, true, true);
      Node node0 = IRFactory.transformTree(astRoot0, ") {\n", config0, errorCollector0);
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      Block block0 = new Block();
      block0.addStatement(astRoot0);
      astRoot0.addChildrenToFront(block0);
      ErrorCollector errorCollector0 = new ErrorCollector();
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "o5\t5B%DgN6zx0q", (Config) null, errorCollector0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ErrorCollector errorCollector0 = new ErrorCollector();
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      astRoot0.addChildrenToFront(arrayLiteral0);
      Node node0 = IRFactory.transformTree(astRoot0, "&P!\"?17QiSnz^", (Config) null, errorCollector0);
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ContinueStatement continueStatement0 = new ContinueStatement(9);
      astRoot0.addChildrenToFront(continueStatement0);
      ErrorCollector errorCollector0 = new ErrorCollector();
      Node node0 = IRFactory.transformTree(astRoot0, ")m(t)", (Config) null, errorCollector0);
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ErrorCollector errorCollector0 = new ErrorCollector();
      LabeledStatement labeledStatement0 = new LabeledStatement(4);
      astRoot0.addChildrenToFront(labeledStatement0);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "L~qH$cF46+o.", (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ObjectLiteral objectLiteral0 = new ObjectLiteral(20, 14);
      astRoot0.addChildrenToFront(objectLiteral0);
      ErrorCollector errorCollector0 = new ErrorCollector();
      Node node0 = IRFactory.transformTree(astRoot0, " 4", (Config) null, errorCollector0);
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ReturnStatement returnStatement0 = new ReturnStatement(0);
      astRoot0.addChildrenToFront(returnStatement0);
      ErrorCollector errorCollector0 = new ErrorCollector();
      Node node0 = IRFactory.transformTree(astRoot0, "&PK!\"?17QiSunz^", (Config) null, errorCollector0);
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      ErrorCollector errorCollector0 = new ErrorCollector();
      ReturnStatement returnStatement0 = new ReturnStatement(56320, 132, astRoot0);
      astRoot0.addChildrenToFront(returnStatement0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config config0 = new Config(treeSet0, treeSet0, true, true, true);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "&PK!\"?17QiSunz^", config0, errorCollector0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      SwitchCase switchCase0 = new SwitchCase();
      switchCase0.setExpression(astRoot0);
      astRoot0.addChildrenToFront(switchCase0);
      ErrorCollector errorCollector0 = new ErrorCollector();
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "o5\t5B%DgN66zx0q", (Config) null, errorCollector0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      SwitchCase switchCase0 = new SwitchCase();
      SwitchCase switchCase1 = new SwitchCase(340, 7);
      switchCase1.addStatement(switchCase0);
      astRoot0.addChildrenToFront(switchCase1);
      ErrorCollector errorCollector0 = new ErrorCollector();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, true, true);
      Node node0 = IRFactory.transformTree(astRoot0, "msg.bad.switch", config0, errorCollector0);
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      VariableDeclaration variableDeclaration0 = new VariableDeclaration(0);
      astRoot0.addChildrenToFront(variableDeclaration0);
      ErrorCollector errorCollector0 = new ErrorCollector();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
      Node node0 = IRFactory.transformTree(astRoot0, "", config0, errorCollector0);
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      VariableDeclaration variableDeclaration0 = new VariableDeclaration(0);
      VariableInitializer variableInitializer0 = new VariableInitializer();
      variableDeclaration0.addVariable(variableInitializer0);
      astRoot0.addChildrenToFront(variableDeclaration0);
      ErrorCollector errorCollector0 = new ErrorCollector();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, false, false);
      // Undeclared exception!
      try { 
        IRFactory.transformTree(astRoot0, "", config0, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
