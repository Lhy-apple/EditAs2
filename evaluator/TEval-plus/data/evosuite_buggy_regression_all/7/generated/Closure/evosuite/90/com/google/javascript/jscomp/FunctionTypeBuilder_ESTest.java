/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:10:26 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FunctionTypeBuilder;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.StaticScope;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionTypeBuilder_ESTest extends FunctionTypeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("DSz7ct;h;:\"=<vaRH7");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("DSz7ct;h;:\"=<vaRH7", compiler0, node0, "DSz7ct;h;:\"=<vaRH7", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setSourceNode(node0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("DSz7ct;h;:\"=<vaRH7");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder((String) null, compiler0, node0, "AUP@_j#5}KF>oc&G3{'", (Scope) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("DSz7ct;h;:\"=<vaRH7");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("DSz7ct;h;:\"=<vaRH7", compiler0, node0, "OxBZ)]b", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction((FunctionType) null, node0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("8");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("8", compiler0, node0, "8", (Scope) null);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      CodingConvention codingConvention0 = compiler0.getCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, (Node) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("KF#EP9Y");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("@extends", compiler0, node0, "", scope0);
      Node node1 = Node.newString("@extends", 38, 0);
      Node node2 = new Node(11, node1, node1, node0, node0);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType jSType0 = jSTypeRegistry0.getType((StaticScope<JSType>) scope0, "", "<nP,J&QG_)Wb~ky3Mm3", 302, 46);
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType(jSType0, (Node) null);
      // Undeclared exception!
      try { 
        functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // BLOCK [sourcename: java.lang.String@0000000603] is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("8");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("8", compiler0, node0, "8", (Scope) null);
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      CodingConvention codingConvention0 = compiler0.getCodingConvention();
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(codingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("", compiler0, node0, "", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
      FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      Node node1 = Node.newNumber(2823.9669);
      Node node2 = new Node(2, node1, node0, 15, 2);
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, node2);
      functionTypeBuilder0.inferFromOverriddenFunction(functionType1, node2);
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("i1jdZJawPL4|i<~");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("function (", compiler0, node0, "i1jdZJawPL4|i<~", scope0);
      Node node1 = Node.newString(26, "function (", 3, 2);
      Node node2 = new Node(2, node1, node0, node1, node1);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) null, node0);
      functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node2);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("DSz7ct;h;:\"=<vaRH7");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("DSz7ct;h;:\"=<vaRH7", compiler0, node0, "DSz7ct;h;:\"=<vaRH7", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType((JSDocInfo) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("DSz7ct;h;:\"=<vaRH7");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("DSz7ct;h;:\"=<vaRH7", compiler0, node0, "DSz7ct;h;:\"=<vaRH7", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType(jSDocInfo0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("8");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("8", compiler0, node0, "8", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnStatementsAsLastResort((Node) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("DSz7ct;h;:\"=<vaRH7");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("DSz7ct;h;:\"=<vaRH7", compiler0, node0, "DSz7ct;h;:\"=<vaRH7", (Scope) null);
      // Undeclared exception!
      try { 
        functionTypeBuilder0.inferReturnStatementsAsLastResort(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FunctionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("DSz7ct;h;:\"=<vaRH7");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("O:R`NmESOlY@#m", compiler0, node0, "OxBZ)]b", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferInheritance((JSDocInfo) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("DSz7ct;h;:\"=<vaRH7");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("DSz7ct;h;:\"=<vaRH7", compiler0, node0, "DSz7ct;h;:\"=<vaRH7", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      functionTypeBuilder0.inferInheritance(jSDocInfo0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("DSz7ct;h;:\"=<vaRH7");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("DSz7ct;h;:\"=<vaRH7", compiler0, node0, "DSz7ct;h;:\"=<vaRH7", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (JSType) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("", compiler0, node0, "", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
      FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
      functionTypeBuilder1.inferThisType(jSDocInfo0, functionType0);
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("F9B%QU-/j");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("F9B%QU-/j", compiler0, node0, "F9B%QU-/j", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, (JSDocInfo) null);
      FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
      functionTypeBuilder1.inferThisType((JSDocInfo) null, functionType0);
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$tqmv!#A:,u4Ky`E(j{");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("$tqmv!#A:,u4Ky`E(j{", compiler0, node0, "$tqmv!#A:,u4Ky`E(j{", (Scope) null);
      // Undeclared exception!
      try { 
        functionTypeBuilder0.inferThisType((JSDocInfo) null, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("JSC_INEXISTANT_PARAM");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_INEXISTANT_PARAM", compiler0, node0, "JSC_INEXISTANT_PARAM", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (Node) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("function (");
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      Scope scope0 = typedScopeCreator0.createScope(node0, (Scope) null);
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("function (", compiler0, node0, "function (", scope0);
      Node node1 = new Node(42, node0, node0, (-2), 0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, node1);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("$", compiler0, node0, "$", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, (JSDocInfo) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("$");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("$", compiler0, node0, "$", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, jSDocInfo0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("0VK");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("0VK", compiler0, node0, "0VK", (Scope) null);
      Node node1 = Node.newString(26, "0VK", 3, 2);
      Node node2 = new Node(2, node1, node0, node1, node1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      functionTypeBuilder0.inferParameterTypes(node2, jSDocInfo0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("0VK");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("0VK", compiler0, node0, "0VK", (Scope) null);
      Node node1 = Node.newString(26, "0VK", 3, 2);
      Node node2 = new Node(2, node1, node0, node1, node1);
      functionTypeBuilder0.inferParameterTypes(node2, (JSDocInfo) null);
      functionTypeBuilder0.inferParameterTypes(node2, (JSDocInfo) null);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("DSz7ct;h;:\"=<vaRH7");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("DSz7ct;h;:\"=<vaRH7", compiler0, node0, "DSz7ct;h;:\"=<vaRH7", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName((JSDocInfo) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("DSz7ct;h;:\"=<vaRH7");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("DSz7ct;h;:\"=<vaRH7", compiler0, node0, "DSz7ct;h;:\"=<vaRH7", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName(jSDocInfo0);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("", compiler0, node0, "", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
      functionTypeBuilder0.buildAndRegister();
      FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("", compiler0, node0, "", (Scope) null);
      // Undeclared exception!
      try { 
        functionTypeBuilder0.buildAndRegister();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // All Function types must have params and a return type
         //
         verifyException("com.google.javascript.jscomp.FunctionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = FunctionTypeBuilder.isFunctionTypeDeclaration(jSDocInfo0);
      assertFalse(boolean0);
  }
}
