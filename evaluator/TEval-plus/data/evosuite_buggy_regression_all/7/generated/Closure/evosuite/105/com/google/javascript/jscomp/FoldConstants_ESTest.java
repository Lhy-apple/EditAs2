/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:14:15 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckAccessControls;
import com.google.javascript.jscomp.CheckAccidentalSemicolon;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckMissingGetCssName;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FoldConstants;
import com.google.javascript.jscomp.InlineGetters;
import com.google.javascript.jscomp.MinimizeExitPoints;
import com.google.javascript.jscomp.MoveFunctionDeclarations;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceInformationAnnotator;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.jscomp.SymbolTable;
import com.google.javascript.jscomp.SyntacticScopeCreator;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FoldConstants_ESTest extends FoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, minimizeExitPoints0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("Shift amount out of bounds: {0}");
      Node node1 = new Node(29, node0);
      foldConstants0.visit(nodeTraversal0, node1, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(3397.425124912672, (-81), (-3071));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.process((Node) null, node0);
      assertEquals(29, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = compiler0.parseSyntheticCode("1gx5kb6TpBj(]F", "1gx5kb6TpBj(]F");
      boolean boolean0 = foldConstants0.hasBreakOrContinue(node0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("RE#EP_TPE");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(105, nodeArray0, 105, 105);
      Node node1 = new Node(32, node0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, typedScopeCreator0);
      foldConstants0.visit(nodeTraversal0, node1, node0);
      assertEquals(12, Node.REGEXP_PROP);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, "O");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("O");
      Node node1 = new Node(26, node0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
      Node node0 = Node.newString("SL/SV/d2m620wD9,.");
      Node node1 = new Node(27, node0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.visit(nodeTraversal0, node1, node1);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseSyntheticCode("Dcik9knSiF'", "Dcik9knSiF'");
      Node node1 = new Node(29, node0);
      foldConstants0.visit(nodeTraversal0, node1, node0);
      assertEquals(2, Node.BREAK_PROP);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, "");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("");
      Node node1 = new Node(26, node0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // node is not a child
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, "REGEXP_TZYE");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("REGEXP_TZYE");
      Node node1 = new Node(30, node0);
      foldConstants0.visit(nodeTraversal0, node1, node1);
      assertFalse(compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      Node node0 = compiler0.parseSyntheticCode("$cik9kncSiF'", "msg.jsdR.fileverviewdextra");
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      nodeTraversal0.traverseAtScope(scope0);
      assertTrue(scope0.isGlobal());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseSyntheticCode("Dcik9knSiF'", "msg.jsdoc.fileoverview.extra");
      Node node1 = new Node(4, node0);
      foldConstants0.visit(nodeTraversal0, node1, node0);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      CheckLevel checkLevel0 = CheckLevel.OFF;
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, "");
      Node node0 = Node.newNumber(599.5656, (-42), 2125);
      Node node1 = compiler0.parseSyntheticCode("RegExp", " r=o;{5J");
      Node node2 = new Node(9, node0, node0, node1, 1772, 9);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
      foldConstants0.visit(nodeTraversal0, node2, node0);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = new Node(101);
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      Node node1 = Node.newString("%hp_r");
      Node node2 = new Node(11, node1, node1, node0);
      foldConstants0.visit(nodeTraversal0, node2, node2);
      assertFalse(node2.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, "");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
      Node node0 = Node.newNumber((-3505.7637814394097));
      Node node1 = compiler0.parseSyntheticCode("4s1", "qakya$6&j!!*J(ydY^");
      Node node2 = new Node(18, node1, node0, node0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.visit(nodeTraversal0, node2, node0);
      assertFalse(node2.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      MinimizeExitPoints minimizeExitPoints0 = new MinimizeExitPoints(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, minimizeExitPoints0);
      Node node0 = Node.newNumber((-3505.0891790194173));
      Node node1 = compiler0.parseSyntheticCode("lrpejE7_7BqX_L*%!", "JrhF\"CfbIckPA\"^;ibl");
      Node node2 = new Node(19, node1, node1, node0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.visit(nodeTraversal0, node2, node0);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
      Node node0 = Node.newNumber((-2797.536587316658));
      Node node1 = compiler0.parseSyntheticCode("hp-:", "hp-:");
      Node node2 = new Node(40, node1, node0, node0);
      node2.setType(20);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.visit(nodeTraversal0, node2, node2);
      assertEquals(49, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineGetters0.getActingCallback();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
      Node node0 = Node.newNumber(3397.2074966, (-81), (-3068));
      Node node1 = Node.newNumber(Double.NaN);
      Node node2 = new Node(37, node0, node1);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.visit(nodeTraversal0, node2, node1);
      assertTrue(node2.hasChildren());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber(1571.0);
      Node node1 = compiler0.parseSyntheticCode("4s1", "4s1");
      Node node2 = new Node(42, node0, node0, node1);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.visit(nodeTraversal0, node2, node0);
      assertFalse(node1.equals((Object)node2));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EGEAP_TYP=", "EGEAP_TYP=");
      Node node1 = compiler0.parseSyntheticCode("EGEAP_TYP=", "5>RqD6yQI,");
      Node node2 = new Node(14, node1, node0, node0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.visit((NodeTraversal) null, node2, node1);
      assertEquals(34, Node.PARENTHESIZED_PROP);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      Node node0 = Node.newNumber(1.0);
      Node node1 = compiler0.parseSyntheticCode("hp-:", "jsdoc");
      Node node2 = new Node(6158, node1, node0, node0);
      node1.setType(122);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.visit(nodeTraversal0, node2, node2);
      assertEquals(19, Node.LABEL_PROP);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("REGEXP_TYPE", "REGEXP_TYPE");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldBlock(nodeTraversal0, node0, node0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(915, nodeArray0, 915, (-1101));
      Node node1 = new Node((-1101), node0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldBlock((NodeTraversal) null, node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      Node node0 = compiler0.parseSyntheticCode("$cik9kncSiF'", "$cik9kncSiF'");
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      nodeTraversal0.traverseAtScope(scope0);
      assertFalse(scope0.isLocal());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("EGEAP_TYP=", "EGEAP_TYP=");
      Node node1 = new Node(14, node0, node0, node0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, typedScopeCreator0);
      foldConstants0.visit(nodeTraversal0, node0, node0);
      assertFalse(node0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseSyntheticCode("VtB$`y", "VtB$`y");
      Node node1 = new Node(132, node0);
      foldConstants0.visit(nodeTraversal0, node0, node1);
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber((-2796.3607900644083));
      Node node1 = compiler0.parseSyntheticCode("f8:#6b7f2KgP~", "f8:#6b7f2KgP~");
      Node node2 = new Node(31, node1, node1, node0, 46, 31);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldHookIf(nodeTraversal0, node2, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, "O");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("O");
      Node node1 = new Node(26, node0);
      node0.setType(46);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      Node node0 = Node.newNumber((-2281.40762047192));
      Node node1 = compiler0.parseSyntheticCode((String) null, "jsdoc");
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_OBJECT_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      jSTypeArray0[0] = (JSType) objectType0;
      Node node2 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      Node node3 = new Node((-3), node2, node0, node1, 20, 24);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      // Undeclared exception!
      try { 
        foldConstants0.tryMinimizeIf(nodeTraversal0, node3, node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber((-2796.9445));
      Node node1 = compiler0.parseSyntheticCode("length", "length");
      Node node2 = new Node(2, node0, node1, node1, 45, 1);
      foldConstants0.tryMinimizeIf(nodeTraversal0, node2, node0);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseSyntheticCode("$cik9kncSiF'", "msg.jsdR.fileverviewdextra");
      foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(38, Node.SOURCEFILE_PROP);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
      Node node0 = Node.newNumber((-2797.536587316658));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
      Node node0 = Node.newNumber((-2797.536587316658));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = new Node(43, 14, 29);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node1, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineGetters0.getActingCallback();
      Node node0 = Node.newNumber(3397.425124912672, (-81), (-3071));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
      Node[] nodeArray0 = new Node[0];
      Node node1 = new Node(100, nodeArray0);
      foldConstants0.tryFoldAndOr(nodeTraversal0, node0, node1, node0, node1);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(113, nodeArray0, 113, 113);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = Node.newString("!bX");
      foldConstants0.tryFoldAndOr(nodeTraversal0, node1, node0, node1, node0);
      assertEquals(9, Node.FIXUPS_PROP);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("REGEXP_TYPE", "REGEXP_TYPE");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, syntacticScopeCreator0);
      foldConstants0.tryFoldLeftChildAdd(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(2, Node.RIGHT);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber((-1370.29687159997));
      foldConstants0.tryFoldLeftChildAdd(nodeTraversal0, node0, node0, node0, node0);
      assertFalse(node0.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SymbolTable symbolTable0 = new SymbolTable(compiler0);
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("5NJ`Q]\" c:$ ");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0, symbolTable0);
      Node node0 = Node.newString(42, "", 46, 2677);
      Node node1 = Node.newString("i'I]:\tXYrXu[");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldAdd(nodeTraversal0, node1, node1, node0, (Node) null);
      assertEquals(1, Node.TARGET_PROP);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("5NJ`Q]\" c:$ ");
      Compiler compiler0 = new Compiler();
      SymbolTable symbolTable0 = compiler0.acquireSymbolTable();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0, symbolTable0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString(8221, "Optimization level outside [-1..9]: ");
      Node node1 = compiler0.parseTestCode("XpYg;");
      foldConstants0.tryFoldAdd(nodeTraversal0, node1, node0, node0, node0);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SourceInformationAnnotator sourceInformationAnnotator0 = new SourceInformationAnnotator("5NJ`Q]\" c:$ ");
      Compiler compiler0 = new Compiler();
      SymbolTable symbolTable0 = compiler0.acquireSymbolTable();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, sourceInformationAnnotator0, symbolTable0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString(8221, "Optimization level outside [-1..9]: ");
      Node node1 = Node.newString("cv^rnyYXRx`|Fvs");
      Node node2 = compiler0.parseTestCode("XpYg;");
      foldConstants0.tryFoldAdd(nodeTraversal0, node2, node0, node1, node2);
      assertEquals(16, Node.SOURCENAME_PROP);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, typedScopeCreator0);
      Node node0 = Node.newString("*t(96Ug.?RK.`KUzs", 72, (-222));
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAdd(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Node node0 = new Node(101);
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node1 = new Node(39, 1738, (-1681));
      foldConstants0.tryFoldArithmetic(nodeTraversal0, node1, node1, node0, node0);
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber(1.0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldAdd(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown arithmetic operator
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, "");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
      Node node0 = Node.newNumber((-3505.7637814394097));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(0, Node.BOTH);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber((-2.1474836485057063E9));
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("REGEXP_TYPE", "REGEXP_TYPE");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = Node.newNumber(4.294967296E9);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node1, node1, node1, node0);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber((-2.147483648E9));
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node0, node0, node0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Unknown bitwise operator
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
      Node node0 = Node.newNumber((-2797.536587316658));
      Node node1 = Node.newNumber((double) 2);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldBitAndOr(nodeTraversal0, node0, node1, node0, node1);
      assertEquals(36, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
      Node node0 = Node.newNumber((-2797.536587316658));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
      Node node0 = Node.newNumber((-2797.536587316658));
      Node node1 = compiler0.parseSyntheticCode("hpp:", "hpp:");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldShift(nodeTraversal0, node1, node0, node1, node1);
      assertFalse(node1.wasEmptyNode());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber(Double.NaN);
      foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(4.294967296E9);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newNumber(96.8);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node0, node0);
      assertTrue(compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber((-2797.536587316658));
      Node node1 = Node.newNumber((double) 19);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      foldConstants0.tryFoldShift(nodeTraversal0, node0, node0, node1, node1);
      assertEquals(1, compiler0.getErrorCount());
      assertTrue(compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, "REGEXP_TYPE");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
      Node node0 = Node.newNumber((-2797.536587316658));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = Node.newNumber((double) 12);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldShift(nodeTraversal0, node0, node1, node1, node0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Unknown shift operator: number
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("REGEXP_TYPE", "REGEXP_TYPE");
      CheckLevel checkLevel0 = CheckLevel.OFF;
      CheckAccidentalSemicolon checkAccidentalSemicolon0 = new CheckAccidentalSemicolon(checkLevel0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccidentalSemicolon0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = new Node(122, node0, node0, node0, node0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node1, node0);
      assertEquals(9, Node.FIXUPS_PROP);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newNumber((double) 113, 122, (-3845));
      Node node1 = new Node(122, node0, node0, node0, node0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, (ScopeCreator) null);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Node node0 = new Node(101);
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      Node node1 = Node.newString("hp-:");
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node0, node0);
      assertFalse(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Node node0 = new Node(101, 101, 101);
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      Node node1 = new Node(41, node0, node0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node0, node0);
      assertEquals(1, Node.LEFT);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(42, 42, 17);
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkAccessControls0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(49, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
      Node node0 = Node.newNumber((-2797.536587316658));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node1 = new Node(43, 14, 29);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node1, node0, node0);
      assertEquals(14, Node.DEFAULT_PROP);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operand out of range, bitwise operation will lose information: {0}");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(44, 2085, 971);
      SymbolTable symbolTable0 = new SymbolTable(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, symbolTable0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(1, Node.PROPERTY_FLAG);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      Node node0 = Node.newString("hp-:");
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
      assertFalse(node0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, "");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
      Node node0 = Node.newNumber((-3505.7637814394097));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node[] nodeArray0 = new Node[2];
      Node node1 = Node.newNumber((double) 40);
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(12, nodeArray0);
      // Undeclared exception!
      try { 
        foldConstants0.visit(nodeTraversal0, node2, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
      Node node0 = Node.newNumber((-2797.536587316658));
      Node node1 = new Node(17, node0, 1, 20);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldComparison(nodeTraversal0, node1, node0, node1, node1);
      assertEquals(33, Node.NAME_PROP);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = Node.newNumber((-2.147483648E9));
      foldConstants0.tryFoldComparison(nodeTraversal0, node0, node0, node0, node0);
      assertFalse(node0.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, "");
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
      Node node0 = Node.newNumber((-3505.0891790194173));
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node[] nodeArray0 = new Node[2];
      Node node1 = new Node(4139, 29, 11);
      nodeArray0[0] = node1;
      nodeArray0[1] = node0;
      Node node2 = new Node(12, nodeArray0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldComparison(nodeTraversal0, node2, node0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Node node0 = new Node(121);
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, typedScopeCreator0);
      foldConstants0.tryFoldGetElem(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(1, Node.TARGET_PROP);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CheckLevel checkLevel0 = CheckLevel.OFF;
      CheckMissingGetCssName checkMissingGetCssName0 = new CheckMissingGetCssName(compiler0, checkLevel0, "v");
      Node node0 = compiler0.parseSyntheticCode("com.google.javascript.jscomp.FoldConstants", "v");
      node0.setType(63);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, checkMissingGetCssName0);
      foldConstants0.tryFoldGetElem(nodeTraversal0, node0, node0, node0, node0);
      assertEquals(26, Node.DIRECTCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseSyntheticCode("Dcik9knSiF'", "Dcik9knSiF'");
      foldConstants0.tryFoldGetProp(nodeTraversal0, node0, node0, node0, node0);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("REGEXP_TYPE", "REGEXP_TYPE");
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      SyntacticScopeCreator syntacticScopeCreator0 = new SyntacticScopeCreator(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, syntacticScopeCreator0);
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node0, node0);
      assertEquals(2, Node.SPECIALCALL_WITH);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      MoveFunctionDeclarations moveFunctionDeclarations0 = new MoveFunctionDeclarations(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, moveFunctionDeclarations0);
      Node node0 = Node.newNumber((-2797.536587316658));
      Node node1 = compiler0.parseSyntheticCode("hp-:", "hp-:");
      Node node2 = new Node(40, node1, node0, node0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryFoldRegularExpressionConstructor(nodeTraversal0, node2, node1);
      assertEquals(36, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      boolean boolean0 = FoldConstants.containsUnicodeEscape("$cik9kncSiF'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = "\\u";
      boolean boolean0 = FoldConstants.containsUnicodeEscape(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Operand out of range, bitwise operation will lose information: {0}");
      Compiler compiler0 = new Compiler(mockPrintStream0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = new Node(44, 2085, 971);
      SymbolTable symbolTable0 = new SymbolTable(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0, symbolTable0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldWhile(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(113, nodeArray0, 113, 113);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldWhile(nodeTraversal0, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.NodeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Node node0 = new Node(101);
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldFor(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, foldConstants0);
      Node node0 = compiler0.parseSyntheticCode("7%d\"", "7%d\"");
      // Undeclared exception!
      try { 
        foldConstants0.tryFoldDo(nodeTraversal0, node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("p");
      Node node1 = new Node(26, node0);
      // Undeclared exception!
      try { 
        foldConstants0.tryMinimizeCondition((NodeTraversal) null, node1, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.FoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      InlineGetters inlineGetters0 = new InlineGetters(compiler0);
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineGetters0.getActingCallback();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, nodeTraversal_Callback0);
      Node[] nodeArray0 = new Node[0];
      Node node0 = new Node(100, nodeArray0);
      foldConstants0.tryMinimizeCondition(nodeTraversal0, node0, node0);
      assertEquals(9, Node.FIXUPS_PROP);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Node node0 = new Node(101);
      FoldConstants foldConstants0 = new FoldConstants((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, foldConstants0);
      foldConstants0.tryMinimizeCondition(nodeTraversal0, node0, node0);
      assertEquals(2, Node.BREAK_PROP);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      Node node0 = Node.newString("");
      // Undeclared exception!
      try { 
        foldConstants0.tryMinimizeCondition((NodeTraversal) null, node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0);
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, strictModeCheck0);
      Node node0 = Node.newNumber(1.0);
      FoldConstants foldConstants0 = new FoldConstants(compiler0);
      foldConstants0.tryMinimizeCondition(nodeTraversal0, node0, node0);
      assertEquals(39, Node.EMPTY_BLOCK);
  }
}
