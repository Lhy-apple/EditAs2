/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:08:38 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.RenameLabels;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeepholeFoldConstants_ESTest extends PeepholeFoldConstants_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(27, 27, 27);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Node node0 = Node.newString(64, "", 64, 64);
      Node node1 = new Node(29, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Node node0 = new Node(64);
      Node node1 = new Node(32, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(37, 33, 79);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(37, node1.getType());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1190);
      Node node1 = new Node(122, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.AbstractPeepholeOptimization", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1766, 1766, 1766);
      Node node1 = Node.newString(1, "() {\n\t[native code]\n}\n", 4, 49);
      Node node2 = new Node(12, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(12, node3.getType());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Node node0 = new Node(1833, 1833, 1833);
      Node node1 = Node.newString(1, "nw:th0rmZkm");
      Node node2 = new Node(9, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(134);
      SyntheticAst syntheticAst0 = new SyntheticAst("crossModuleCodeMotion");
      Node node1 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      Node node2 = new Node(10, node1, node0, node0, 13, 47);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals(13, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(134);
      Node node1 = new Node(16);
      Node node2 = new Node(11, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1904);
      Node node1 = new Node(59);
      Node node2 = new Node(14, node0, node1, 0, 113);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(44, Node.IS_VAR_ARGS_PARAM);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(89);
      Node node1 = new Node(14);
      Node node2 = new Node(15, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(119);
      Node node1 = Node.newString(1, "Rd}D9Jpu");
      Node node2 = new Node(42, node0, node1, node1, 7, 16);
      node2.setType(16);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(22, Node.TARGETBLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("unexpected:");
      Node node1 = new Node((-1551));
      Node node2 = new Node(17, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Node node0 = Node.newNumber(1887.4028);
      SyntheticAst syntheticAst0 = new SyntheticAst("[].join()");
      Node node1 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      Node node2 = new Node(18, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(18, node3.getType());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(137);
      Node node1 = Node.newString(1, "H@>");
      Node node2 = new Node(19, node0, node1, node1, 7, 16);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(19, node3.getType());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(183);
      Node node1 = Node.newString(11, "Rd}D9Jpu");
      Node node2 = new Node(20, node0, node1, node1, 16, 45);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(16, node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Node node0 = new Node(112);
      Node node1 = Node.newString(1545, "length");
      Node node2 = new Node(21, node1, node1, node0, 2, 41);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(137, 137, 137);
      Node node1 = Node.newString(1, "R/}-D9Jpu");
      Node node2 = new Node(22, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(102);
      Node node1 = new Node(48);
      Node node2 = new Node(23, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Node node0 = new Node(87);
      Node node1 = new Node(17);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(24, node0, node1, node1, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(128);
      Node node1 = new Node(39);
      Node node2 = new Node(25, node0, node0, node1, 10, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(25, node3.getType());
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(71);
      Node node1 = new Node(14);
      Node node2 = new Node(31, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(42, Node.IS_CONSTANT_NAME);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(128);
      Node node1 = new Node(39);
      Node node2 = new Node(33, node0, node0, node1, 10, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(29, node3.getCharno());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1950);
      Node node1 = Node.newString((-546), "C^x[VB^R");
      Node node2 = new Node(34, node0, node0, node1, (-36), 43);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(1956, 1956, 1956);
      Node node1 = Node.newString(4, "Ov6ApL*Ym`K$pG");
      Node node2 = new Node(35, node1, node0, node0, 48, 32);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(41, Node.SIDE_EFFECT_FLAGS);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(134);
      Node node1 = new Node(16);
      Node node2 = new Node(36, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isLocalResultCall());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("m7G%0~_Z2n\"[Js@");
      Node node1 = Node.newString(150, "m7G%0~_Z2K\"[Js@");
      Node node2 = new Node(38, node0, node1, node1, 14, 49);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-2689));
      Node node1 = Node.newString(22, "");
      Node node2 = new Node(39, node1, node0, 0, 43);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isOnlyModifiesThisCall());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(131);
      Node node1 = new Node(16);
      Node node2 = new Node(40, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isSyntheticBlock());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(89, 89, 89);
      Node node1 = new Node(14);
      Node node2 = new Node(41, node0, node1, 48, 1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(37, Node.SYNTHETIC_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Node node0 = new Node(89);
      Node node1 = new Node(14);
      Node node2 = new Node(42, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isLocalResultCall());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Node node0 = new Node(137);
      Node node1 = new Node(520, (-1389), 970);
      Node node2 = new Node(43, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertSame(node3, node2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Node node0 = new Node((-110));
      Node node1 = new Node(4108, (-912), 20);
      Node node2 = new Node(44, node1, node0, (-110), 137);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isLocalResultCall());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = Node.newString("nw:th0rmZkm");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("nw:th0rmZkm");
      Node node2 = new Node(45, node0, node1);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(71);
      Node node1 = new Node(16);
      Node node2 = new Node(46, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-2689));
      Node node1 = Node.newString(2, "");
      Node node2 = new Node(47, node1, node0, 5, 38);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(27, Node.SPECIALCALL_PROP);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(137);
      Node node1 = Node.newString("[].Yoivn()");
      Node node2 = new Node(48, node1, node1, node0, (-3), (-3197));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(21, Node.LOCALCOUNT_PROP);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Node node0 = new Node(112);
      Node node1 = new Node(25, 1, 49);
      Node node2 = new Node(49, node0, node0, node1, 2, 0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(119);
      Node node1 = new Node(39);
      Node node2 = new Node(51, node0, node0, node1, 10, 29);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4, Node.DESCENDANTS_FLAG);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      SyntheticAst syntheticAst0 = new SyntheticAst((String) null);
      Node node1 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      Node node2 = new Node(53, node1, node1, node0, 0, 2380);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(48, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-3258));
      Node node1 = Node.newString(2, "VOID");
      Node node2 = new Node(54, node1, node0, 32, 2360);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, node3.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-2179));
      Node node1 = new Node(52);
      Node node2 = new Node(56, node1, node1, node0, 137, 41);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-2663));
      Node node1 = new Node(19);
      Node node2 = new Node(57, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(43, Node.IS_OPTIONAL_PARAM);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-1));
      Node node1 = Node.newString(7, "VOID");
      Node node2 = new Node(58, node0, node1, (-3), 21);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(71);
      Node node1 = new Node(16);
      Node node2 = new Node(59, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(16, Node.SOURCENAME_PROP);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(71);
      Node node1 = new Node(16);
      Node node2 = new Node(60, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(36, Node.OPT_ARG_NAME);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(17, "kAgUUVpSy", 17, 17);
      Node node1 = new Node(2193);
      Node node2 = new Node(61, node0, node1, 97, 16);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(9, Node.FIXUPS_PROP);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Node node0 = new Node(112);
      Node node1 = new Node(25, (-3), 31);
      Node node2 = new Node(63, node0, node1, 48, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("unexpected:");
      Node node1 = Node.newString(85, "unexpected:");
      Node node2 = new Node(64, node1, node1, node0, 10, 49);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = Node.newNumber((-1.0));
      Node node1 = Node.newString("JSC_INDEX_OUT_OF_BOUNDS_ERROR");
      Node node2 = new Node(66, node1, node0, node0, 42, 86);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Node node0 = new Node(112);
      Node node1 = new Node(25, 1, 49);
      Node node2 = new Node(67, node0, node1, 48, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Node node0 = new Node((-1933));
      Node node1 = new Node(64);
      Node node2 = new Node(68, node1, node0, node0, 4, 43);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(48, Node.DIRECT_EVAL);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(134);
      Node node1 = new Node(16);
      Node node2 = new Node(69, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.isUnscopedQualifiedName());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Node node0 = new Node(70);
      Node node1 = Node.newString(922, "length");
      Node node2 = new Node(70, node1, node1, node0, 95, 33);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(122);
      Node node1 = new Node(16);
      Node node2 = new Node(71, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = Node.newString(64, "nw:th0rmZkm", 64, 63);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("nw:th0rmZkm");
      Node node2 = new Node(73, node0, node1, 97, 1792);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(38, Node.EMPTY_BLOCK);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = new Node(96, 96, 96);
      Node node1 = new Node(96);
      Node node2 = new Node(74, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(29, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Node node0 = new Node(89);
      Node node1 = new Node(14);
      Node node2 = new Node(76, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(22, Node.TARGETBLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = new Node(137, 137, 137);
      Node node1 = Node.newString(1, "nw:th0rmZkm");
      Node node2 = new Node(78, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(30, Node.SKIP_INDEXES_PROP);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(117);
      Node node1 = new Node(16);
      Node node2 = new Node(15, node0);
      Node node3 = new Node(79, node1, node2, node2, 489, 2);
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertEquals(23, Node.VARIABLE_PROP);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = Node.newString(63, "nw:th0rmZkm", 49, 49);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      SyntheticAst syntheticAst0 = new SyntheticAst("nw:th0rmZkm");
      Node node1 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      Node node2 = new Node(80, node1, node1, node0, 5, 43);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(33, Node.NAME_PROP);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Node node0 = new Node(89);
      Node node1 = new Node(14);
      Node node2 = new Node(81, node0, node1, 48, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(9, Node.FIXUPS_PROP);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Node node0 = Node.newString(63, "nw:th0rmZkm", 63, 63);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("nw:th0rmZkm");
      Node node2 = new Node(83, node1, node0, node0, 22, 41);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Node node0 = new Node((-1219));
      Node node1 = new Node(42);
      Node node2 = new Node(85, node0, node1, node1, 15, 32);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(22, Node.TARGETBLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(128);
      Node node1 = new Node(39);
      Node node2 = new Node(86, node1, node1, node0, 2, 17);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Node node0 = new Node(89);
      Node node1 = new Node(35);
      Node node2 = new Node(87, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(18, Node.SPECIAL_PROP_PROP);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Node node0 = new Node(89);
      Node node1 = new Node(35);
      Node node2 = new Node(89, node1, node1, node0, 37, 4646);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(40, Node.BRACELESS_TYPE);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Node node0 = new Node(137);
      SyntheticAst syntheticAst0 = new SyntheticAst((String) null);
      Node node1 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      Node node2 = new Node(90, node0, node1, node1, 33, (-3));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(22, Node.TARGETBLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(119, 119, 119);
      Node node1 = Node.newString("L!E");
      Node node2 = new Node(91, node1, node0, 15, 1535);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(39, Node.ORIGINALNAME_PROP);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      SyntheticAst syntheticAst0 = new SyntheticAst((String) null);
      Node node1 = syntheticAst0.getAstRoot((AbstractCompiler) null);
      Node node2 = new Node(92, node0, node0, node1, 41, 0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(28, Node.DEBUGSOURCE_PROP);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(118);
      Node node1 = new Node(39);
      Node node2 = new Node(93, node1, node0, (-623), (-1826));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(0, Node.LABEL_ID_PROP);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(117);
      Node node1 = new Node(16);
      Node node2 = new Node(94, node1, node0, node0, 489, 2);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(49, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Node node0 = new Node(87, 87, 87);
      Node node1 = new Node(1);
      Node node2 = new Node(96, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(5, Node.FUNCTION_PROP);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(89);
      Node node1 = new Node(14);
      Node node2 = new Node(97, node0, node1, 48, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.DECR_FLAG);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Node node0 = new Node(137);
      Node node1 = new Node(3, 74, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = new Node(98, node0, node1);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals((-1), node3.getLineno());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Node node0 = new Node(1833, 1833, 1833);
      Node node1 = Node.newString(1, "nw:th0rmZkm");
      Node node2 = new Node(99, node0, node1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(35, Node.QUOTED_PROP);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Node node0 = new Node(1833, 1833, 1833);
      Node node1 = new Node(39);
      Node node2 = new Node(2, node0, node1, 8, (-1));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(47, Node.DIRECTIVES);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Node node0 = new Node(50, 50, 50);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Node node0 = Node.newString(55, "S@%>:xCGL!,;d");
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(29, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node((-61));
      Node node1 = new Node(62, node0, node0, node0, 0, 724);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertTrue(node2.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(65);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(40, Node.BRACELESS_TYPE);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(72);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(0, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(75, 75, 75);
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(13, Node.CASES_PROP);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Node node0 = Node.newString(77, ")", 77, 77);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(40, Node.BRACELESS_TYPE);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Node node0 = Node.newString(82, ")", 82, 82);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertFalse(node1.isSyntheticBlock());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Node node0 = Node.newString(84, "", 84, (-2495));
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(0, node1.getChildCount());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Node node0 = Node.newString(88, "Unknown shift operator: ", 88, 88);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(95);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Node node0 = new Node(112);
      Node node1 = new Node(21, node0, node0, node0, 2, 41);
      node0.setType(44);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Node node0 = new Node(112);
      Node node1 = Node.newString(1545, "length");
      Node node2 = new Node(21, node1, node1, node0, 2, 41);
      node1.setType(44);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(2, node3.getChildCount());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Node node0 = new Node(38, (-16405), 2012);
      Node node1 = new Node(22, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
         verifyException("com.google.javascript.rhino.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("unexpected:");
      Node node1 = Node.newString(85, "V fr");
      Node node2 = new Node(29, node1, node0, node1, 625, 4905);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(100, 100, 100);
      Node node1 = new Node(25, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Node node0 = new Node(32);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(32, Node.MEMBER_TYPE_PROP);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Node node0 = new Node((-2553));
      Node node1 = new Node(32, node0, node0, node0, 2, 0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(1, node2.getChildCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(39);
      Node node1 = new Node(32, node0, node0, 0, 1930);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Node node0 = new Node(63);
      Node node1 = Node.newString("nw:th,rmZkm", 17, 45);
      Node node2 = new Node(32, node1, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Node node0 = new Node(63);
      Node node1 = new Node(32, node0, node0);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Node node0 = Node.newString(63, "nw:th0rmZkm", 63, 63);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Compiler compiler0 = new Compiler();
      RenameLabels renameLabels0 = new RenameLabels(compiler0);
      RenameLabels.ProcessLabels renameLabels_ProcessLabels0 = renameLabels0.new ProcessLabels();
      NodeTraversal nodeTraversal0 = new NodeTraversal(compiler0, renameLabels_ProcessLabels0);
      peepholeFoldConstants0.beginTraversal(nodeTraversal0);
      Node node1 = new Node(28, node0, node0);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(118);
      Node node1 = new Node(26, node0, node0, node0, 10, 29);
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertNotNull(node2);
      assertEquals(26, node2.getType());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("com.google.protobuf.DescriptorProtos$EnumDescriptorProto$Builder");
      Node node1 = new Node(26, node0, node0, (-2), 24);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString("");
      Node node1 = new Node(26, node0, node0, (-2), 7);
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Node node0 = Node.newString(63, "nw:th0rmZkm", 35, 35);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = new Node(6, node0, node0, node0, node0, 49, 16);
      Node node2 = Node.newString("nw:th0rmZk?m");
      Node node3 = new Node(52, node1, node2, node2, 122, (-50));
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertEquals(2, node4.getChildCount());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Node node0 = Node.newString(63, "nw:th0rmZkm", 64, 64);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck((AbstractCompiler) null);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, strictModeCheck0);
      peepholeFoldConstants0.beginTraversal(nodeTraversal0);
      Node node1 = Node.newString("nw:th0rmZk?m");
      Node node2 = new Node(52, node0, node1, node1, 100, (-50));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Node node0 = Node.newString("nw:th0rmZkm", 64, 64);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      StrictModeCheck strictModeCheck0 = new StrictModeCheck((AbstractCompiler) null, false, false);
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) null, strictModeCheck0);
      peepholeFoldConstants0.beginTraversal(nodeTraversal0);
      Node node1 = Node.newString("nw:th0rmZk?m");
      Node node2 = new Node(52, node0, node1, node1, 100, (-50));
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(131);
      Node node1 = new Node(16);
      Node node2 = new Node(100, node1, node0);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertNotNull(node3);
      assertEquals(100, node3.getType());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = new Node(119);
      Node node1 = Node.newString(1, "Rd}D9Jpu");
      Node node2 = new Node(42, node0, node1, node1, 7, 16);
      node0.setType(44);
      node2.setType(16);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(1, Node.SPECIALCALL_EVAL);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = new Node(64);
      Node node1 = Node.newString("nw:th0rmZkm");
      Node node2 = new Node(13, node1, node0, 47, 157);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertEquals(8, Node.CODEOFFSET_PROP);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Node node0 = Node.newString("nw:th,rmZkm", 17, 45);
      Node node1 = Node.newString("nw:th,rmZkm");
      Node node2 = new Node(13, node1, node0, 27, 38);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      // Undeclared exception!
      try { 
        peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.PeepholeFoldConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node0 = Node.newString(17, "kAgUUVpSy", 17, 17);
      Node node1 = Node.newString(30, "kAgUUVpSy");
      Node node2 = new Node(42, node1, node0, node1, 23, 557);
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals((-3), Node.LOCAL_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = new Node(89);
      Node node1 = new Node(37, node0, node0, 48, 1);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(1, node2.getCharno());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Node node0 = Node.newString(63, "nw:th0rmZkm", 64, 64);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      Node node1 = Node.newString("nw:th0rmZkm");
      Node node2 = new Node(33, node0, node0, node1, 5, (-1876));
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertTrue(node3.hasChildren());
  }
}
