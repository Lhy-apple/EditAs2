/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:28:07 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ModificationVisitor;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.UnresolvedTypeExpression;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "`");
      NullType nullType0 = new NullType(jSTypeRegistry0);
      nullType0.testForEquality(errorFunctionType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "<^W#iX", 1, 1);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = namedType0.setValidator(predicate0);
      assertTrue(boolean0);
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, instanceObjectType0);
      boolean boolean0 = parameterizedType0.isBooleanObjectType();
      assertFalse(boolean0);
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isAllType());
      assertTrue(parameterizedType0.isFunctionType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(instanceObjectType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      Node node0 = Node.newNumber(0.7);
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "~i29?81hl0");
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, unresolvedTypeExpression0, unresolvedTypeExpression0);
      indexedType0.getJSDocInfo();
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNoType();
      String string0 = jSType0.toDebugHashCodeString();
      assertEquals("function (this:me, {10}): me", string0);
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) instanceObjectType0, (JSType) instanceObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) errorFunctionType0);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      boolean boolean0 = unionType0.isRegexpType();
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNoType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(boolean0);
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber((-1.0));
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "~i29?81hl0");
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, unresolvedTypeExpression0, unresolvedTypeExpression0);
      JSType.TypePair jSType_TypePair0 = unresolvedTypeExpression0.getTypesUnderShallowEquality(indexedType0);
      jSType_TypePair0.typeA.isString();
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isResolved());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString(3, "`", 976, 764);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "`", node0, stringType0);
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertFalse(nullType0.isEnumElementType());
      
      nullType0.getTypesUnderInequality(enumType0);
      assertFalse(nullType0.isAllType());
      assertFalse(enumType0.isNullType());
      assertFalse(nullType0.isNoResolvedType());
      assertFalse(nullType0.isResolved());
      assertFalse(nullType0.isNoObjectType());
      assertFalse(nullType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      boolean boolean0 = noObjectType0.isStringObjectType();
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, (JSType) null, true);
      boolean boolean0 = arrowType0.isNumberObjectType();
      assertFalse(boolean0);
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
      jSType0.unboxesTo();
      assertFalse(voidType0.isTemplateType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(voidType0.isAllType());
      assertFalse(jSType0.isResolved());
      assertFalse(voidType0.isNoType());
      assertFalse(jSType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isArrayType();
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      Predicate<JSType> predicate0 = (Predicate<JSType>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).apply(any(com.google.javascript.rhino.jstype.JSType.class));
      noResolvedType0.setValidator(predicate0);
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, voidType0, "Named type with empty name component");
      boolean boolean0 = enumElementType0.canBeCalled();
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(boolean0);
      assertFalse(enumElementType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      JSType jSType0 = modificationVisitor0.caseNumberType();
      boolean boolean0 = jSType0.isNumber();
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoResolvedType());
      assertTrue(boolean0);
      assertFalse(jSType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newNumber((-1.0));
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "~i29?81hl0");
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, unresolvedTypeExpression0, unresolvedTypeExpression0);
      JSType.TypePair jSType_TypePair0 = unresolvedTypeExpression0.getTypesUnderShallowEquality(indexedType0);
      jSType_TypePair0.typeA.matchConstraint(unresolvedTypeExpression0);
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isAllType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, unknownType0, (JSType) null);
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, unknownType0, indexedType0);
      boolean boolean0 = parameterizedType0.isInstanceType();
      assertFalse(boolean0);
      assertFalse(parameterizedType0.isResolved());
      assertFalse(indexedType0.isAllType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      boolean boolean0 = unionType0.isCheckedUnknownType();
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(boolean0);
      assertFalse(unionType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      boolean boolean0 = unknownType0.isTheObjectType();
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isResolved());
      assertFalse(boolean0);
      assertFalse(unknownType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      noResolvedType0.matchesUint32Context();
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.matchesNumberContext());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNoResolvedType());
      
      ArrowType arrowType0 = noObjectType0.getInternalArrowType();
      assertNotNull(arrowType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.matchesNumberContext());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isResolved());
      
      boolean boolean0 = arrowType0.matchesInt32Context();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.matchesNumberContext());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "9di");
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isParameterizedType());
      
      EnumType enumType0 = errorFunctionType0.toMaybeEnumType();
      assertNull(enumType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isParameterizedType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isAllType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isBooleanValueType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesNumberContext());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) noObjectType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0);
      assertNotNull(immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isAllType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isBooleanValueType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesNumberContext());
      assertEquals(7, immutableList0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertNotNull(unionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isAllType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isBooleanValueType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesNumberContext());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isBooleanValueType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isEnumType());
      
      boolean boolean0 = unionType0.isInvariant(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isAllType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isBooleanValueType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isVoidType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesNumberContext());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isBooleanValueType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isEnumType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNullType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNoType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      
      boolean boolean0 = noObjectType0.isNumberValueType();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNullType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNoType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isFunctionType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      
      boolean boolean0 = noObjectType0.canTestForShallowEqualityWith(voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isEnumElementType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isFunctionType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = (NoType)modificationVisitor0.caseNoType();
      assertNotNull(noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isResolved());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isTemplateType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isNullType());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertFalse(noResolvedType0.isNominalType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isNoType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.hasCachedValues());
      
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[4] = (JSType) noResolvedType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noType0, jSTypeArray0);
      assertNotNull(functionType0);
      assertEquals(5, jSTypeArray0.length);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isEnumElementType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNominalConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isParameterizedType());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isAllType());
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createDefaultObjectUnion(voidType0);
      assertNotNull(unionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNullType());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType");
      assertNotNull(templateType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertEquals("com.google.javascript.rhino.jstype.JSType", templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      
      NoType noType0 = (NoType)unionType0.getRestrictedUnion(templateType0);
      assertNotNull(noType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNullType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertEquals("com.google.javascript.rhino.jstype.JSType", templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isTemplateType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) unionType0, (JSType) noObjectType0, (JSType) voidType0, (JSType) voidType0, (JSType) noObjectType0, (JSType) unionType0, (JSType) noType0);
      assertNotNull(immutableList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isAllType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNullType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertEquals("com.google.javascript.rhino.jstype.JSType", templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertFalse(noType0.hasCachedValues());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isTemplateType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertEquals(7, immutableList0.size());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, immutableList0);
      assertNotNull(unionType1);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isAllType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNullType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertEquals("com.google.javascript.rhino.jstype.JSType", templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isTemplateType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.hasCachedValues());
      assertTrue(noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType1.isNoObjectType());
      assertFalse(unionType1.isAllType());
      assertTrue(unionType1.isUnionType());
      assertFalse(unionType1.isBooleanValueType());
      assertFalse(unionType1.isNoType());
      assertFalse(unionType1.isTemplateType());
      assertFalse(unionType1.isNullType());
      assertFalse(unionType1.isNumberValueType());
      assertFalse(unionType1.isConstructor());
      assertFalse(unionType1.isOrdinaryFunction());
      assertFalse(unionType1.isParameterizedType());
      assertFalse(unionType1.isNominalType());
      assertFalse(unionType1.isCheckedUnknownType());
      assertFalse(unionType1.isRecordType());
      assertFalse(unionType1.isResolved());
      assertFalse(unionType1.isEnumType());
      assertFalse(unionType1.isNoResolvedType());
      assertFalse(unionType1.isInterface());
      assertFalse(unionType1.isStringValueType());
      assertFalse(unionType1.isEnumElementType());
      assertFalse(unionType1.isFunctionPrototypeType());
      assertFalse(unionType1.isNominalConstructor());
      assertFalse(unionType1.isFunctionType());
      assertFalse(unionType1.isVoidType());
      
      boolean boolean0 = unionType1.isStruct();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(unionType0, unionType1);
      assertNotSame(unionType1, unionType0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isAllType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNullType());
      assertTrue(templateType0.hasAnyTemplateInternal());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isNullType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isNominalConstructor());
      assertFalse(templateType0.isEnumElementType());
      assertTrue(templateType0.isTemplateType());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isNumberValueType());
      assertEquals("com.google.javascript.rhino.jstype.JSType", templateType0.getReferenceName());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isParameterizedType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isTemplateType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isStringValueType());
      assertTrue(noType0.hasCachedValues());
      assertTrue(noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType1.isNoObjectType());
      assertFalse(unionType1.isAllType());
      assertTrue(unionType1.isUnionType());
      assertFalse(unionType1.isBooleanValueType());
      assertFalse(unionType1.isNoType());
      assertFalse(unionType1.isTemplateType());
      assertFalse(unionType1.isNullType());
      assertFalse(unionType1.isNumberValueType());
      assertFalse(unionType1.isConstructor());
      assertFalse(unionType1.isOrdinaryFunction());
      assertFalse(unionType1.isParameterizedType());
      assertFalse(unionType1.isNominalType());
      assertFalse(unionType1.isCheckedUnknownType());
      assertFalse(unionType1.isRecordType());
      assertFalse(unionType1.isResolved());
      assertFalse(unionType1.isEnumType());
      assertFalse(unionType1.isNoResolvedType());
      assertFalse(unionType1.isInterface());
      assertFalse(unionType1.isStringValueType());
      assertFalse(unionType1.isEnumElementType());
      assertFalse(unionType1.isFunctionPrototypeType());
      assertFalse(unionType1.isNominalConstructor());
      assertFalse(unionType1.isFunctionType());
      assertFalse(unionType1.isVoidType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      assertNotNull(instanceObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoResolvedType());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isEnumElementType());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) instanceObjectType0, (JSType) instanceObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) errorFunctionType0);
      assertNotNull(immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isEnumElementType());
      assertEquals(7, immutableList0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertNotNull(unionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isEnumElementType());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNoResolvedType());
      
      boolean boolean0 = unionType0.isStruct();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isEnumElementType());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
      assertNotNull(jSType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isTemplateType());
      
      boolean boolean0 = jSType0.isDict();
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      assertNotNull(instanceObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isAllType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isObject());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) instanceObjectType0, (JSType) instanceObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) errorFunctionType0);
      assertNotNull(immutableList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isAllType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isObject());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(7, immutableList0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertNotNull(unionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isAllType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isObject());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isOrdinaryFunction());
      
      boolean boolean0 = unionType0.isDict();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isAllType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertTrue(instanceObjectType0.isObject());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isUnionType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalType());
      
      boolean boolean0 = voidType0.isGlobalThisType();
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = new Node(944, 0, 944);
      assertNotNull(node0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.LAST_PROP);
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertEquals(944, node0.getType());
      assertEquals(944, node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(944, node0.getCharno());
      assertFalse(node0.isVar());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isNullType());
      assertEquals("number", numberType0.getDisplayName());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isStringValueType());
      
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, numberType0, false);
      assertNotNull(arrowType0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertEquals(944, node0.getType());
      assertEquals(944, node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(944, node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isNullType());
      assertEquals("number", numberType0.getDisplayName());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isParameterizedType());
      
      JSType jSType0 = JSType.getLeastSupertype((JSType) numberType0, (JSType) arrowType0);
      assertNotNull(jSType0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertEquals(944, node0.getType());
      assertEquals(944, node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(944, node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isNullType());
      assertEquals("number", numberType0.getDisplayName());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isVoidType());
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, jSType0, "Not declared as a constructor");
      assertNotNull(enumElementType0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertEquals(944, node0.getType());
      assertEquals(944, node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(944, node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isNullType());
      assertEquals("number", numberType0.getDisplayName());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isVoidType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isTemplateType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isStringValueType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.hasCachedValues());
      
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "VLc3&s", node0, enumElementType0);
      assertNotNull(enumType0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isContinue());
      assertEquals(944, node0.getType());
      assertEquals(944, node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(944, node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isNullType());
      assertEquals("number", numberType0.getDisplayName());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(numberType0.isInterface());
      assertFalse(numberType0.isResolved());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isVoidType());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertFalse(enumElementType0.isVoidType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.isParameterizedType());
      assertFalse(enumElementType0.isTemplateType());
      assertEquals("Not declared as a constructor", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isAllType());
      assertFalse(enumElementType0.isStringValueType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isInterface());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isUnionType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isVoidType());
      
      // Undeclared exception!
      try { 
        enumType0.testForEquality(enumElementType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.ArrowType", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertNotNull(jSTypeRegistry0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isResolved());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isInterface());
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType(">/", (Node) null, recordType0);
      assertNotNull(enumType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isResolved());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isInterface());
      assertFalse(enumType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isStringValueType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isBooleanValueType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isAllType());
      
      NoObjectType noObjectType0 = (NoObjectType)JSType.getGreatestSubtype((JSType) recordType0, (JSType) enumType0);
      assertNotNull(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isResolved());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isInterface());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(enumType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isStringValueType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isBooleanValueType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isAllType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isObject());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = Node.newNumber((-1.0));
      assertNotNull(node0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertEquals(39, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "~i29?81hl0");
      assertNotNull(unresolvedTypeExpression0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertEquals(39, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertFalse(unresolvedTypeExpression0.isParameterizedType());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) unresolvedTypeExpression0);
      assertNull(parameterizedType0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertEquals(39, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertTrue(node0.isNumber());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertFalse(unresolvedTypeExpression0.isParameterizedType());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType((JSType) null);
      assertNull(parameterizedType0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      assertNotNull(instanceObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      
      Node node0 = Node.newNumber((double) 0);
      assertNotNull(node0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "Unknown class name", node0, instanceObjectType0);
      assertNotNull(enumType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isVoidType());
      assertTrue(enumType0.isEnumType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isFunctionType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesObjectContext());
      
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) enumType0);
      assertNull(templateType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isTemplateType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isInterface());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isVoidType());
      assertTrue(enumType0.isEnumType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isFunctionType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesObjectContext());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
      assertNull(templateType0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      assertNotNull(instanceObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      
      boolean boolean0 = instanceObjectType0.differsFrom(instanceObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      assertNotNull(instanceObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isEnumType());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) instanceObjectType0, (JSType) instanceObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) errorFunctionType0);
      assertNotNull(immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isEnumType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(7, immutableList0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertNotNull(unionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isEnumType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isFunctionPrototypeType());
      
      UnknownType unknownType0 = (UnknownType)JSType.getGreatestSubtype((JSType) noObjectType0, (JSType) unionType0);
      assertNotNull(unknownType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isConstructor());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isEnumType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isNullType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isEnumType());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesObjectContext());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isConstructor());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNoType());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isNullable());
      assertEquals("?", unknownType0.getReferenceName());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.matchesStringContext());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isParameterizedType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = Node.newNumber(0.0);
      assertNotNull(node0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "+ VPi+Z!f\"X>!D");
      assertNotNull(unresolvedTypeExpression0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertFalse(unresolvedTypeExpression0.isParameterizedType());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isEnumType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      
      JSType.TypePair jSType_TypePair0 = unresolvedTypeExpression0.getTypesUnderShallowEquality(noObjectType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertTrue(node0.isNumber());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertFalse(unresolvedTypeExpression0.isParameterizedType());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isEnumType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isAllType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isTemplateType());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0);
      assertNotNull(immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isAllType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isTemplateType());
      assertEquals(7, immutableList0.size());
      
      UnionType unionType0 = new UnionType((JSTypeRegistry) null, immutableList0);
      assertNotNull(unionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isAllType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isTemplateType());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isFunctionType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isNoResolvedType());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, immutableList0);
      assertNotNull(unionType1);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(unionType1.equals((Object)unionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isAllType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isTemplateType());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType1.isOrdinaryFunction());
      assertFalse(unionType1.isCheckedUnknownType());
      assertFalse(unionType1.isFunctionType());
      assertFalse(unionType1.isParameterizedType());
      assertFalse(unionType1.isVoidType());
      assertFalse(unionType1.isRecordType());
      assertFalse(unionType1.isFunctionPrototypeType());
      assertFalse(unionType1.isAllType());
      assertTrue(unionType1.isUnionType());
      assertFalse(unionType1.isBooleanValueType());
      assertFalse(unionType1.isConstructor());
      assertFalse(unionType1.isNoResolvedType());
      assertFalse(unionType1.isNumberValueType());
      assertFalse(unionType1.isEnumType());
      assertFalse(unionType1.isTemplateType());
      assertFalse(unionType1.isEnumElementType());
      assertFalse(unionType1.isNominalConstructor());
      assertFalse(unionType1.isNoType());
      assertFalse(unionType1.isResolved());
      assertFalse(unionType1.isNominalType());
      assertFalse(unionType1.isInterface());
      assertFalse(unionType1.isNoObjectType());
      assertFalse(unionType1.isStringValueType());
      assertFalse(unionType1.isNullType());
      
      JSType jSType0 = JSType.getGreatestSubtype((JSType) unionType1, (JSType) unionType0);
      assertNotNull(jSType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(unionType0, unionType1);
      assertNotSame(unionType0, jSType0);
      assertNotSame(unionType1, unionType0);
      assertSame(unionType1, jSType0);
      assertNotSame(jSType0, unionType0);
      assertSame(jSType0, unionType1);
      assertTrue(unionType0.equals((Object)unionType1));
      assertTrue(unionType1.equals((Object)unionType0));
      assertTrue(jSType0.equals((Object)unionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isAllType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isTemplateType());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isFunctionType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType1.isOrdinaryFunction());
      assertFalse(unionType1.isCheckedUnknownType());
      assertFalse(unionType1.isFunctionType());
      assertFalse(unionType1.isParameterizedType());
      assertFalse(unionType1.isVoidType());
      assertFalse(unionType1.isRecordType());
      assertFalse(unionType1.isFunctionPrototypeType());
      assertFalse(unionType1.isAllType());
      assertTrue(unionType1.isUnionType());
      assertFalse(unionType1.isBooleanValueType());
      assertFalse(unionType1.isConstructor());
      assertFalse(unionType1.isNoResolvedType());
      assertFalse(unionType1.isNumberValueType());
      assertFalse(unionType1.isEnumType());
      assertFalse(unionType1.isTemplateType());
      assertFalse(unionType1.isEnumElementType());
      assertFalse(unionType1.isNominalConstructor());
      assertFalse(unionType1.isNoType());
      assertFalse(unionType1.isResolved());
      assertFalse(unionType1.isNominalType());
      assertFalse(unionType1.isInterface());
      assertFalse(unionType1.isNoObjectType());
      assertFalse(unionType1.isStringValueType());
      assertFalse(unionType1.isNullType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isBooleanValueType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "9di");
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality(errorFunctionType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      assertNotNull(instanceObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) instanceObjectType0;
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) instanceObjectType0, jSTypeArray0);
      assertNotNull(functionType0);
      assertEquals(1, jSTypeArray0.length);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isObject());
      assertTrue(functionType0.isFunctionType());
      
      FunctionType functionType1 = (FunctionType)JSType.getGreatestSubtype((JSType) errorFunctionType0, (JSType) functionType0);
      assertNotNull(functionType1);
      assertEquals(1, jSTypeArray0.length);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNominalType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isNullType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isParameterizedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.isObject());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType1.isParameterizedType());
      assertFalse(functionType1.isNoObjectType());
      assertFalse(functionType1.isUnionType());
      assertFalse(functionType1.isNoResolvedType());
      assertFalse(functionType1.hasInstanceType());
      assertFalse(functionType1.isConstructor());
      assertTrue(functionType1.isObject());
      assertFalse(functionType1.isCheckedUnknownType());
      assertFalse(functionType1.isFunctionPrototypeType());
      assertFalse(functionType1.isNumberValueType());
      assertTrue(functionType1.hasCachedValues());
      assertFalse(functionType1.isEnumType());
      assertFalse(functionType1.isVoidType());
      assertFalse(functionType1.isRecordType());
      assertFalse(functionType1.isResolved());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertFalse(functionType1.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertTrue(functionType1.isFunctionType());
      assertFalse(functionType1.isTemplateType());
      assertFalse(functionType1.isAllType());
      assertFalse(functionType1.isBooleanValueType());
      assertFalse(functionType1.isNullType());
      assertFalse(functionType1.isReturnTypeInferred());
      assertFalse(functionType1.isEnumElementType());
      assertTrue(functionType1.isOrdinaryFunction());
      assertTrue(functionType1.canBeCalled());
      assertFalse(functionType1.isInterface());
      assertFalse(functionType1.isNoType());
      assertFalse(functionType1.isNominalType());
      assertFalse(functionType1.isNominalConstructor());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>(1);
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty((JSType) null, (Node) null);
      assertNotNull(recordTypeBuilder_RecordProperty0);
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put("Unknown class name", recordTypeBuilder_RecordProperty0);
      assertNull(recordTypeBuilder_RecordProperty1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNominalType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNoResolvedType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isInterface());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isNominalConstructor());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNoObjectType());
      
      RecordType recordType1 = null;
      try {
        recordType1 = new RecordType(jSTypeRegistry0, hashMap0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.RecordType", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNoType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isOrdinaryFunction());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isNativeObjectType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNominalType());
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType("com.google.common.base.MediumCharMatcher", (Node) null, recordType0);
      assertNotNull(enumType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isNativeObjectType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNominalType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(recordType0, enumType0);
      assertNotNull(parameterizedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isNativeObjectType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNominalType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      
      NoObjectType noObjectType0 = (NoObjectType)JSType.getGreatestSubtype((JSType) parameterizedType0, (JSType) voidType0);
      assertNotNull(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNoType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isParameterizedType());
      assertFalse(recordType0.isNativeObjectType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isVoidType());
      assertTrue(recordType0.hasCachedValues());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isConstructor());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isFunctionType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isNominalType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isNoObjectType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isResolved());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isUnionType());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isFunctionType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isRecordType());
      assertTrue(parameterizedType0.isParameterizedType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isInterface());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isObject());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, ")rPB-&|)h`s9");
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isResolved());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0);
      assertNotNull(instanceObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isTemplateType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isInterface());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isFunctionType());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noObjectType0, (JSType) instanceObjectType0, (JSType) errorFunctionType0, (JSType) instanceObjectType0, (JSType) instanceObjectType0, (JSType) instanceObjectType0, (JSType) errorFunctionType0);
      assertNotNull(immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isTemplateType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isInterface());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isFunctionType());
      assertEquals(7, immutableList0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertNotNull(unionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isTemplateType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isInterface());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isFunctionType());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isNominalType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNoResolvedType());
      
      ObjectType objectType0 = unionType0.dereference();
      assertNull(objectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isUnionType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(instanceObjectType0.isInterface());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isResolved());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.isNoType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isAllType());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isEnumType());
      assertTrue(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isVoidType());
      assertTrue(instanceObjectType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isStringValueType());
      assertTrue(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isRecordType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isTemplateType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isInterface());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isFunctionType());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isNominalType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionType());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isEnumType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.canBeCalled());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0);
      assertNotNull(immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isEnumType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.canBeCalled());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertEquals(7, immutableList0.size());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "diAZg%iy\"jhJlm>i#", (String) null, 0, 1);
      assertNotNull(namedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isNoObjectType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.hasCachedValues());
      assertEquals("diAZg%iy\"jhJlm>i#", namedType0.getReferenceName());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isEnumElementType());
      
      int int0 = immutableList0.lastIndexOf(namedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals((-1), int0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isFunctionType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isEnumType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.canBeCalled());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertEquals(7, immutableList0.size());
      assertFalse(namedType0.isNoObjectType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.hasCachedValues());
      assertEquals("diAZg%iy\"jhJlm>i#", namedType0.getReferenceName());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isEnumElementType());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isResolved());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isFunctionType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isCheckedUnknownType());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0);
      assertNotNull(immutableList0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isFunctionType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(7, immutableList0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertNotNull(unionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isFunctionType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNullType());
      
      boolean boolean0 = unionType0.equals(simpleErrorReporter0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isFunctionType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isConstructor());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isConstructor());
      assertTrue(voidType0.isVoidType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      
      JSType jSType0 = voidType0.findPropertyType("67d");
      assertNull(jSType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isFunctionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isConstructor());
      assertTrue(voidType0.isVoidType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isNoResolvedType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNullType());
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType("t", (Node) null, noObjectType0);
      assertNotNull(enumType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isNoResolvedType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNullType());
      assertFalse(enumType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isCheckedUnknownType());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, enumType0, noObjectType0);
      assertNotNull(indexedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isNoResolvedType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNullType());
      assertFalse(enumType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isParameterizedType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isAllType());
      assertTrue(indexedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isStringValueType());
      
      boolean boolean0 = indexedType0.canAssignTo(noObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isRecordType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isNoResolvedType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNullType());
      assertFalse(enumType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertTrue(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isParameterizedType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isAllType());
      assertTrue(indexedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isStringValueType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isVoidType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.hasCachedValues());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, noObjectType0);
      assertNotNull(proxyObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isVoidType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(proxyObjectType0.isOrdinaryFunction());
      assertTrue(proxyObjectType0.isConstructor());
      assertFalse(proxyObjectType0.isVoidType());
      assertFalse(proxyObjectType0.isNoType());
      assertFalse(proxyObjectType0.hasReferenceName());
      assertFalse(proxyObjectType0.isNominalConstructor());
      assertTrue(proxyObjectType0.isObject());
      assertFalse(proxyObjectType0.isStringValueType());
      assertTrue(proxyObjectType0.isNoObjectType());
      assertFalse(proxyObjectType0.isAllType());
      assertFalse(proxyObjectType0.isInterface());
      assertFalse(proxyObjectType0.isEnumType());
      assertTrue(proxyObjectType0.isNativeObjectType());
      assertFalse(proxyObjectType0.isFunctionPrototypeType());
      assertFalse(proxyObjectType0.isNumberValueType());
      assertFalse(proxyObjectType0.isBooleanValueType());
      assertFalse(proxyObjectType0.isRecordType());
      assertFalse(proxyObjectType0.isUnionType());
      assertFalse(proxyObjectType0.hasCachedValues());
      assertFalse(proxyObjectType0.isNominalType());
      assertFalse(proxyObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(proxyObjectType0.isCheckedUnknownType());
      assertFalse(proxyObjectType0.isNullType());
      assertFalse(proxyObjectType0.isParameterizedType());
      assertFalse(proxyObjectType0.isEnumElementType());
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isTemplateType());
      
      boolean boolean0 = proxyObjectType0.canAssignTo(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isVoidType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isResolved());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(proxyObjectType0.isOrdinaryFunction());
      assertTrue(proxyObjectType0.isConstructor());
      assertFalse(proxyObjectType0.isVoidType());
      assertFalse(proxyObjectType0.isNoType());
      assertFalse(proxyObjectType0.hasReferenceName());
      assertFalse(proxyObjectType0.isNominalConstructor());
      assertTrue(proxyObjectType0.isObject());
      assertFalse(proxyObjectType0.isStringValueType());
      assertTrue(proxyObjectType0.isNoObjectType());
      assertFalse(proxyObjectType0.isAllType());
      assertFalse(proxyObjectType0.isInterface());
      assertFalse(proxyObjectType0.isEnumType());
      assertTrue(proxyObjectType0.isNativeObjectType());
      assertFalse(proxyObjectType0.isFunctionPrototypeType());
      assertFalse(proxyObjectType0.isNumberValueType());
      assertFalse(proxyObjectType0.isBooleanValueType());
      assertFalse(proxyObjectType0.isRecordType());
      assertFalse(proxyObjectType0.isUnionType());
      assertFalse(proxyObjectType0.hasCachedValues());
      assertFalse(proxyObjectType0.isNominalType());
      assertFalse(proxyObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(proxyObjectType0.isCheckedUnknownType());
      assertFalse(proxyObjectType0.isNullType());
      assertFalse(proxyObjectType0.isParameterizedType());
      assertFalse(proxyObjectType0.isEnumElementType());
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = new Node(944, 0, 944);
      assertNotNull(node0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertEquals(944, node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(944, node0.getType());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertEquals(944, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isNullType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isResolved());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isInterface());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, numberType0, false);
      assertNotNull(arrowType0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertEquals(944, node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(944, node0.getType());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertEquals(944, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isNullType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isResolved());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isInterface());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isConstructor());
      
      JSType jSType0 = JSType.getLeastSupertype((JSType) numberType0, (JSType) arrowType0);
      assertNotNull(jSType0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertEquals(944, node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(944, node0.getType());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertEquals(944, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isNullType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isResolved());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isInterface());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
      
      ObjectType objectType0 = jSType0.dereference();
      assertNull(objectType0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertEquals(944, node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertEquals(944, node0.getType());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertEquals(944, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(numberType0.isTemplateType());
      assertTrue(numberType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertFalse(numberType0.isNullType());
      assertEquals("number", numberType0.getDisplayName());
      assertFalse(numberType0.isBooleanValueType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertFalse(numberType0.isResolved());
      assertTrue(numberType0.matchesObjectContext());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isInterface());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isTemplateType());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isEnumType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isAllType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isParameterizedType());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MxeSPQhv");
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      
      Node node0 = Node.newString("}IR}~", 1, 0);
      assertNotNull(node0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertTrue(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = modificationVisitor0.caseAllType();
      assertNotNull(jSType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.canBeCalled());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isResolved());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isUnionType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a constructor", node0, errorFunctionType0);
      assertNotNull(enumType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isBooleanValueType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isVoidType());
      
      enumType0.testForEquality(jSType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertTrue(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.canBeCalled());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isResolved());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertTrue(jSType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isUnionType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isParameterizedType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isBooleanValueType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Named type with empty name component", "S", 0, 0);
      assertNotNull(namedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isEnumType());
      assertEquals("Named type with empty name component", namedType0.getReferenceName());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isNoResolvedType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isTemplateType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isFunctionType());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, namedType0, noObjectType0);
      assertNotNull(indexedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isEnumType());
      assertEquals("Named type with empty name component", namedType0.getReferenceName());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isNoResolvedType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isTemplateType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isNoResolvedType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertTrue(indexedType0.hasReferenceName());
      assertTrue(indexedType0.isNominalType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNoType());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      
      Node node0 = errorFunctionType0.getParametersNode();
      assertNotNull(node0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertEquals(3, node0.getChildCount());
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertEquals(83, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Unknown class name", node0, indexedType0);
      assertNotNull(enumType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isEnumType());
      assertEquals("Named type with empty name component", namedType0.getReferenceName());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isNoResolvedType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isTemplateType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isNoResolvedType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertTrue(indexedType0.hasReferenceName());
      assertTrue(indexedType0.isNominalType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertEquals(3, node0.getChildCount());
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertEquals(83, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isNoType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isNoResolvedType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isCheckedUnknownType());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noObjectType0);
      assertNotNull(instanceObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      
      ObjectType objectType0 = instanceObjectType0.getImplicitPrototype();
      assertNotNull(objectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.canBeCalled());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isFunctionType());
      assertTrue(objectType0.matchesNumberContext());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isTemplateType());
      assertEquals(Integer.MAX_VALUE, objectType0.getPropertiesCount());
      assertFalse(objectType0.isAllType());
      assertEquals("Unknown", objectType0.getDisplayName());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.isUnknownType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertTrue(objectType0.matchesObjectContext());
      assertEquals("?", objectType0.getReferenceName());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isResolved());
      assertTrue(objectType0.matchesStringContext());
      assertTrue(objectType0.hasDisplayName());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.isNullable());
      assertFalse(objectType0.isInterface());
      
      enumType0.testForEquality(objectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isEnumType());
      assertEquals("Named type with empty name component", namedType0.getReferenceName());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isNoResolvedType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isTemplateType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isNoResolvedType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isParameterizedType());
      assertFalse(indexedType0.isEnumElementType());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertTrue(indexedType0.hasReferenceName());
      assertTrue(indexedType0.isNominalType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isNoType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertEquals(3, node0.getChildCount());
      assertTrue(node0.isParamList());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertEquals(83, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(enumType0.matchesNumberContext());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isTemplateType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isStringValueType());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isNoType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isNoResolvedType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertTrue(instanceObjectType0.matchesObjectContext());
      assertFalse(instanceObjectType0.isRecordType());
      assertFalse(instanceObjectType0.isParameterizedType());
      assertFalse(instanceObjectType0.isUnionType());
      assertFalse(instanceObjectType0.isFunctionPrototypeType());
      assertFalse(instanceObjectType0.isNumberValueType());
      assertFalse(instanceObjectType0.isConstructor());
      assertFalse(instanceObjectType0.isFunctionType());
      assertFalse(instanceObjectType0.isCheckedUnknownType());
      assertFalse(instanceObjectType0.isNominalType());
      assertFalse(instanceObjectType0.isAllType());
      assertTrue(instanceObjectType0.isObject());
      assertFalse(instanceObjectType0.isNullType());
      assertFalse(instanceObjectType0.isNoObjectType());
      assertFalse(instanceObjectType0.isNominalConstructor());
      assertFalse(instanceObjectType0.isNoType());
      assertTrue(instanceObjectType0.isInstanceType());
      assertFalse(instanceObjectType0.hasCachedValues());
      assertFalse(instanceObjectType0.isEnumElementType());
      assertFalse(instanceObjectType0.isBooleanValueType());
      assertFalse(instanceObjectType0.isEnumType());
      assertFalse(instanceObjectType0.isTemplateType());
      assertFalse(instanceObjectType0.isOrdinaryFunction());
      assertFalse(instanceObjectType0.isStringValueType());
      assertFalse(instanceObjectType0.isNoResolvedType());
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(instanceObjectType0.hasReferenceName());
      assertFalse(instanceObjectType0.isVoidType());
      assertFalse(instanceObjectType0.isNativeObjectType());
      assertFalse(instanceObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.canBeCalled());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isFunctionType());
      assertTrue(objectType0.matchesNumberContext());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isTemplateType());
      assertEquals(Integer.MAX_VALUE, objectType0.getPropertiesCount());
      assertFalse(objectType0.isAllType());
      assertEquals("Unknown", objectType0.getDisplayName());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.isUnknownType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertTrue(objectType0.matchesObjectContext());
      assertEquals("?", objectType0.getReferenceName());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isParameterizedType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isResolved());
      assertTrue(objectType0.matchesStringContext());
      assertTrue(objectType0.hasDisplayName());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.isNullable());
      assertFalse(objectType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isEnumType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isAllType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isInterface());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isParameterizedType());
      
      noObjectType0.testForEquality(noObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isEnumType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isAllType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isInterface());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = (NoType)modificationVisitor0.caseNoType();
      assertNotNull(noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeArray0[0] = (JSType) noType0;
      jSTypeArray0[1] = (JSType) noType0;
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      assertNotNull(node0);
      assertEquals(2, jSTypeArray0.length);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, jSTypeArray0[0]);
      assertNotNull(enumType0);
      assertEquals(2, jSTypeArray0.length);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isVoidType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isNoResolvedType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isStringValueType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
      
      enumType0.testForEquality(noType0);
      assertEquals(2, jSTypeArray0.length);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesStringContext());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isFunctionType());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertEquals(83, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isContinue());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertTrue(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isUnionType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isNominalType());
      assertTrue(enumType0.isObject());
      assertFalse(enumType0.isNullType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isVoidType());
      assertTrue(enumType0.isEnumType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isNoResolvedType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isParameterizedType());
      assertFalse(enumType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isStringValueType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.matchesNumberContext());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoObjectType());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.canBeCalled());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesStringContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) voidType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) noObjectType0);
      assertNotNull(immutableList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.canBeCalled());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesStringContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertEquals(7, immutableList0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertNotNull(unionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.canBeCalled());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesStringContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumElementType());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isInterface());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertEquals("number", numberType0.getDisplayName());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isBooleanValueType());
      
      numberType0.testForEquality(unionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isResolved());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.canBeCalled());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isNoObjectType());
      assertTrue(noObjectType0.matchesStringContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(numberType0.isStringValueType());
      assertFalse(numberType0.isUnionType());
      assertFalse(numberType0.isNoResolvedType());
      assertFalse(numberType0.isParameterizedType());
      assertFalse(numberType0.isCheckedUnknownType());
      assertFalse(numberType0.isNoType());
      assertFalse(numberType0.isNoObjectType());
      assertFalse(numberType0.isVoidType());
      assertFalse(numberType0.isNominalConstructor());
      assertFalse(numberType0.isNominalType());
      assertFalse(numberType0.isEnumElementType());
      assertFalse(numberType0.isTemplateType());
      assertFalse(numberType0.isFunctionType());
      assertFalse(numberType0.isOrdinaryFunction());
      assertTrue(numberType0.matchesObjectContext());
      assertFalse(numberType0.isAllType());
      assertFalse(numberType0.isNullType());
      assertFalse(numberType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertTrue(numberType0.matchesNumberContext());
      assertFalse(numberType0.isNullable());
      assertFalse(numberType0.isInterface());
      assertTrue(numberType0.matchesStringContext());
      assertFalse(numberType0.isFunctionPrototypeType());
      assertEquals("number", numberType0.getDisplayName());
      assertTrue(numberType0.isNumberValueType());
      assertFalse(numberType0.isEnumType());
      assertFalse(numberType0.isConstructor());
      assertFalse(numberType0.isRecordType());
      assertFalse(numberType0.isBooleanValueType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNoType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesNumberContext());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isEnumElementType());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "com.google.javascript.rhino.jstype.JSType$2", "`j4", 1794, 43);
      assertNotNull(namedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isUnionType());
      assertEquals("com.google.javascript.rhino.jstype.JSType$2", namedType0.getReferenceName());
      assertFalse(namedType0.isNoResolvedType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isFunctionType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isInterface());
      
      boolean boolean0 = noObjectType0.canTestForShallowEqualityWith(namedType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isNoType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesNumberContext());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(namedType0.isObject());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isParameterizedType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isUnionType());
      assertEquals("com.google.javascript.rhino.jstype.JSType$2", namedType0.getReferenceName());
      assertFalse(namedType0.isNoResolvedType());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isEnumElementType());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isFunctionType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.hasCachedValues());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isBooleanValueType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.isStringValueType());
      assertFalse(namedType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = (NoType)modificationVisitor0.caseNoType();
      assertNotNull(noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isStringValueType());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isNominalType());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)errorFunctionType0.getLeastSupertype(noType0);
      assertNotNull(errorFunctionType1);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isParameterizedType());
      assertFalse(noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.matchesStringContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isStringValueType());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isResolved());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isTemplateType());
      assertTrue(noType0.hasCachedValues());
      assertTrue(noType0.canBeCalled());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isNominalType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType1.isEnumElementType());
      assertFalse(errorFunctionType1.isVoidType());
      assertFalse(errorFunctionType1.isOrdinaryFunction());
      assertFalse(errorFunctionType1.isNominalType());
      assertTrue(errorFunctionType1.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType1.isCheckedUnknownType());
      assertTrue(errorFunctionType1.isFunctionType());
      assertFalse(errorFunctionType1.isStringValueType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertFalse(errorFunctionType1.isNullType());
      assertFalse(errorFunctionType1.isNoResolvedType());
      assertFalse(errorFunctionType1.isNumberValueType());
      assertTrue(errorFunctionType1.isObject());
      assertFalse(errorFunctionType1.isRecordType());
      assertFalse(errorFunctionType1.isBooleanValueType());
      assertFalse(errorFunctionType1.isEnumType());
      assertFalse(errorFunctionType1.isUnionType());
      assertTrue(errorFunctionType1.hasInstanceType());
      assertTrue(errorFunctionType1.hasCachedValues());
      assertFalse(errorFunctionType1.isFunctionPrototypeType());
      assertTrue(errorFunctionType1.isConstructor());
      assertFalse(errorFunctionType1.isResolved());
      assertFalse(errorFunctionType1.isNoObjectType());
      assertFalse(errorFunctionType1.isNoType());
      assertFalse(errorFunctionType1.isInterface());
      assertFalse(errorFunctionType1.isAllType());
      assertFalse(errorFunctionType1.isParameterizedType());
      assertFalse(errorFunctionType1.isReturnTypeInferred());
      assertTrue(errorFunctionType1.canBeCalled());
      assertFalse(errorFunctionType1.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = Node.newNumber((-1.0));
      assertNotNull(node0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "~i29?81hl0");
      assertNotNull(unresolvedTypeExpression0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isParameterizedType());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) unresolvedTypeExpression0, (JSType) voidType0);
      assertNotNull(immutableList0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isParameterizedType());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertEquals(2, immutableList0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertNotNull(unionType0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isParameterizedType());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertEquals(2, immutableList0.size());
      assertFalse(unionType0.isEnumElementType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNumberValueType());
      
      UnknownType unknownType0 = (UnknownType)unresolvedTypeExpression0.getLeastSupertype(unionType0);
      assertNotNull(unknownType0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertTrue(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isParameterizedType());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isRecordType());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertEquals(2, immutableList0.size());
      assertFalse(unionType0.isEnumElementType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isAllType());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isNominalType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isEnumElementType());
      assertFalse(unknownType0.isBooleanValueType());
      assertFalse(unknownType0.isNoType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNullType());
      assertFalse(unknownType0.isNoObjectType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.hasCachedValues());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isConstructor());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isResolved());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(unknownType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isAllType());
      assertTrue(unknownType0.canBeCalled());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isParameterizedType());
      assertTrue(unknownType0.matchesObjectContext());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNullType());
      
      JSType jSType0 = JSType.getLeastSupertype((JSType) voidType0, (JSType) voidType0);
      assertNotNull(jSType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(voidType0, jSType0);
      assertSame(jSType0, voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNullType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertEquals("undefined", jSType0.getDisplayName());
      assertFalse(jSType0.isInterface());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.matchesObjectContext());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalConstructor());
      assertTrue(jSType0.isVoidType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.matchesNumberContext());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ModificationVisitor modificationVisitor0 = new ModificationVisitor(jSTypeRegistry0);
      assertNotNull(modificationVisitor0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = modificationVisitor0.caseNumberType();
      assertNotNull(jSType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isUnionType());
      assertTrue(jSType0.isNumberValueType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isStringValueType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isTemplateType());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isRecordType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNullable());
      assertFalse(jSType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.matchesNumberContext());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      
      NoResolvedType noResolvedType1 = (NoResolvedType)JSType.getGreatestSubtype((JSType) noResolvedType0, jSType0);
      assertNotNull(noResolvedType1);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertNotSame(noResolvedType0, noResolvedType1);
      assertNotSame(noResolvedType1, noResolvedType0);
      assertFalse(noResolvedType1.equals((Object)noResolvedType0));
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isUnionType());
      assertTrue(jSType0.isNumberValueType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isStringValueType());
      assertTrue(jSType0.matchesObjectContext());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isTemplateType());
      assertEquals("number", jSType0.getDisplayName());
      assertFalse(jSType0.isRecordType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isNullable());
      assertFalse(jSType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.matchesNumberContext());
      assertFalse(noResolvedType0.isEnumType());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNominalType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isParameterizedType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isFunctionType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertFalse(noResolvedType0.isAllType());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isInterface());
      assertTrue(noResolvedType0.hasCachedValues());
      assertTrue(noResolvedType0.canBeCalled());
      assertTrue(noResolvedType0.hasInstanceType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isResolved());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isStringValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isNumberValueType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertFalse(noResolvedType1.isParameterizedType());
      assertFalse(noResolvedType1.isUnionType());
      assertTrue(noResolvedType1.isObject());
      assertFalse(noResolvedType1.isCheckedUnknownType());
      assertFalse(noResolvedType1.isNoObjectType());
      assertTrue(noResolvedType1.isNullable());
      assertFalse(noResolvedType1.isFunctionPrototypeType());
      assertFalse(noResolvedType1.isNumberValueType());
      assertTrue(noResolvedType1.matchesStringContext());
      assertTrue(noResolvedType1.hasCachedValues());
      assertTrue(noResolvedType1.hasInstanceType());
      assertFalse(noResolvedType1.isEnumType());
      assertFalse(noResolvedType1.isVoidType());
      assertFalse(noResolvedType1.isRecordType());
      assertFalse(noResolvedType1.isResolved());
      assertTrue(noResolvedType1.isNoResolvedType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertFalse(noResolvedType1.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType1.getPropertiesCount());
      assertFalse(noResolvedType1.isBooleanValueType());
      assertFalse(noResolvedType1.isAllType());
      assertFalse(noResolvedType1.isTemplateType());
      assertFalse(noResolvedType1.isNullType());
      assertFalse(noResolvedType1.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertTrue(noResolvedType1.matchesObjectContext());
      assertFalse(noResolvedType1.isEnumElementType());
      assertTrue(noResolvedType1.canBeCalled());
      assertFalse(noResolvedType1.isInterface());
      assertFalse(noResolvedType1.isNoType());
      assertFalse(noResolvedType1.isFunctionType());
      assertTrue(noResolvedType1.matchesNumberContext());
      assertFalse(noResolvedType1.isNominalType());
      assertFalse(noResolvedType1.isNominalConstructor());
      assertFalse(noResolvedType1.isOrdinaryFunction());
      assertTrue(noResolvedType1.isConstructor());
      assertNull(noResolvedType1.getReferenceName());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isConstructor());
      
      JSType jSType0 = voidType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertNotNull(jSType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(voidType0, jSType0);
      assertSame(jSType0, voidType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isInterface());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.matchesNumberContext());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.matchesObjectContext());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isVoidType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isStringValueType());
      assertTrue(jSType0.matchesStringContext());
      assertEquals("undefined", jSType0.getDisplayName());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isEnumElementType());
      
      NoType noType0 = (NoType)noObjectType0.getRestrictedTypeGivenToBooleanOutcome(false);
      assertNotNull(noType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noType0.isVoidType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.isNullable());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isResolved());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isParameterizedType());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      assertNotNull(unknownType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isNoType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isParameterizedType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isNominalType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.isUnknownType());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, unknownType0, (JSType) null);
      assertNotNull(indexedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unknownType0.isNoType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isParameterizedType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isNominalType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isParameterizedType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isEnumElementType());
      
      JSType.TypePair jSType_TypePair0 = indexedType0.getTypesUnderEquality(voidType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalConstructor());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      assertFalse(unknownType0.isNoType());
      assertEquals(Integer.MAX_VALUE, unknownType0.getPropertiesCount());
      assertFalse(unknownType0.isParameterizedType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertTrue(unknownType0.matchesStringContext());
      assertFalse(unknownType0.isInterface());
      assertFalse(unknownType0.isNominalType());
      assertTrue(unknownType0.isObject());
      assertFalse(unknownType0.isNoObjectType());
      assertTrue(unknownType0.isNullable());
      assertFalse(unknownType0.isCheckedUnknownType());
      assertFalse(unknownType0.isStringValueType());
      assertFalse(unknownType0.isVoidType());
      assertFalse(unknownType0.isConstructor());
      assertTrue(unknownType0.hasDisplayName());
      assertFalse(unknownType0.hasCachedValues());
      assertFalse(unknownType0.isNoResolvedType());
      assertFalse(unknownType0.isEnumType());
      assertFalse(unknownType0.isFunctionPrototypeType());
      assertFalse(unknownType0.isNumberValueType());
      assertFalse(unknownType0.isUnionType());
      assertFalse(unknownType0.isRecordType());
      assertFalse(unknownType0.isAllType());
      assertFalse(unknownType0.isBooleanValueType());
      assertTrue(unknownType0.canBeCalled());
      assertFalse(unknownType0.isFunctionType());
      assertFalse(unknownType0.isNativeObjectType());
      assertFalse(unknownType0.isResolved());
      assertFalse(unknownType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertFalse(unknownType0.isNominalConstructor());
      assertFalse(unknownType0.isEnumElementType());
      assertTrue(unknownType0.matchesObjectContext());
      assertFalse(unknownType0.isOrdinaryFunction());
      assertTrue(unknownType0.matchesNumberContext());
      assertFalse(unknownType0.isTemplateType());
      assertFalse(unknownType0.hasReferenceName());
      assertTrue(unknownType0.isUnknownType());
      assertFalse(indexedType0.isNoResolvedType());
      assertFalse(indexedType0.isStringValueType());
      assertFalse(indexedType0.isUnionType());
      assertFalse(indexedType0.isNumberValueType());
      assertFalse(indexedType0.isParameterizedType());
      assertTrue(indexedType0.isObject());
      assertFalse(indexedType0.isOrdinaryFunction());
      assertFalse(indexedType0.isInterface());
      assertFalse(indexedType0.isNativeObjectType());
      assertFalse(indexedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertFalse(indexedType0.isFunctionPrototypeType());
      assertFalse(indexedType0.isRecordType());
      assertFalse(indexedType0.isBooleanValueType());
      assertFalse(indexedType0.isNoObjectType());
      assertFalse(indexedType0.isConstructor());
      assertFalse(indexedType0.isEnumType());
      assertFalse(indexedType0.isNoType());
      assertFalse(indexedType0.isVoidType());
      assertFalse(indexedType0.isFunctionType());
      assertFalse(indexedType0.hasCachedValues());
      assertFalse(indexedType0.isNullType());
      assertFalse(indexedType0.isCheckedUnknownType());
      assertFalse(indexedType0.isResolved());
      assertFalse(indexedType0.isNominalConstructor());
      assertFalse(indexedType0.hasReferenceName());
      assertFalse(indexedType0.isTemplateType());
      assertFalse(indexedType0.isNominalType());
      assertFalse(indexedType0.isEnumElementType());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isParameterizedType());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isConstructor());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowInequality(voidType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isParameterizedType());
      assertTrue(voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isConstructor());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.hasInstanceType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isEnumElementType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNoResolvedType());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isBooleanValueType());
      
      ImmutableList<JSType> immutableList0 = ImmutableList.of((JSType) noObjectType0, (JSType) voidType0, (JSType) voidType0, (JSType) noObjectType0, (JSType) noObjectType0, (JSType) voidType0, (JSType) noObjectType0);
      assertNotNull(immutableList0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.hasInstanceType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isEnumElementType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNoResolvedType());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertEquals(7, immutableList0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, immutableList0);
      assertNotNull(unionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.hasInstanceType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isEnumElementType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNoResolvedType());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNoType());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality(noObjectType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNominalType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isTemplateType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertTrue(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.hasInstanceType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isEnumElementType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNominalType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isNoResolvedType());
      assertTrue(noObjectType0.isObject());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertEquals(7, immutableList0.size());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isVoidType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Vector<JSType> vector0 = new Vector<JSType>(2, 2);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(2, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, vector0);
      assertNotNull(unionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, vector0.size());
      assertEquals(2, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isVoidType());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      
      boolean boolean0 = vector0.add((JSType) errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertTrue(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(2, vector0.capacity());
      assertEquals("[function (new:Unknown class name, *=, *=, *=): Unknown class name]", vector0.toString());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      
      FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
      assertNotNull(functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      
      JSType jSType0 = functionType0.getLeastSupertype(unionType0);
      assertNotNull(jSType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertSame(unionType0, jSType0);
      assertSame(jSType0, unionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(2, vector0.capacity());
      assertEquals("[function (new:Unknown class name, *=, *=, *=): Unknown class name]", vector0.toString());
      assertFalse(unionType0.isNumberValueType());
      assertFalse(unionType0.isStringValueType());
      assertFalse(unionType0.isNoResolvedType());
      assertFalse(unionType0.isCheckedUnknownType());
      assertFalse(unionType0.isTemplateType());
      assertFalse(unionType0.isResolved());
      assertFalse(unionType0.isBooleanValueType());
      assertFalse(unionType0.isConstructor());
      assertFalse(unionType0.isOrdinaryFunction());
      assertFalse(unionType0.isParameterizedType());
      assertFalse(unionType0.isInterface());
      assertFalse(unionType0.isEnumElementType());
      assertFalse(unionType0.isRecordType());
      assertFalse(unionType0.isEnumType());
      assertFalse(unionType0.isNullType());
      assertFalse(unionType0.isNoObjectType());
      assertFalse(unionType0.isAllType());
      assertTrue(unionType0.isUnionType());
      assertFalse(unionType0.isNominalType());
      assertFalse(unionType0.isNoType());
      assertFalse(unionType0.isFunctionPrototypeType());
      assertFalse(unionType0.isNominalConstructor());
      assertFalse(unionType0.isFunctionType());
      assertFalse(unionType0.isVoidType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isAllType());
      assertTrue(errorFunctionType0.isObject());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isParameterizedType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(functionType0.hasInstanceType());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isParameterizedType());
      assertTrue(functionType0.canBeCalled());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isEnumElementType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isVoidType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoObjectType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isAllType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.matchesObjectContext());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isTemplateType());
      
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(voidType0);
      assertNotNull(jSType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isAllType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.matchesObjectContext());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isTemplateType());
      
      NoType noType0 = (NoType)JSType.getGreatestSubtype(jSType0, (JSType) noObjectType0);
      assertNotNull(noType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isTemplateType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isAllType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.matchesObjectContext());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isParameterizedType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isParameterizedType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.hasCachedValues());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isInterface());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isTemplateType());
      assertFalse(noType0.isNominalType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isCheckedUnknownType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNumberValueType());
      assertTrue(noType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isParameterizedType());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isBooleanValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNullType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, (Node) null, (JSType) null, true);
      assertNotNull(arrowType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isResolved());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isTemplateType());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>(1);
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNominalType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isParameterizedType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isVoidType());
      
      JSType jSType0 = JSType.safeResolve(arrowType0, (ErrorReporter) null, recordType0);
      assertNotNull(jSType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertSame(arrowType0, jSType0);
      assertSame(jSType0, arrowType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(arrowType0.isNoType());
      assertFalse(arrowType0.isNoObjectType());
      assertFalse(arrowType0.isParameterizedType());
      assertFalse(arrowType0.isStringValueType());
      assertFalse(arrowType0.isInterface());
      assertFalse(arrowType0.isCheckedUnknownType());
      assertFalse(arrowType0.isFunctionPrototypeType());
      assertFalse(arrowType0.isVoidType());
      assertFalse(arrowType0.isNumberValueType());
      assertFalse(arrowType0.isNoResolvedType());
      assertFalse(arrowType0.isConstructor());
      assertFalse(arrowType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, arrowType0.getPossibleToBooleanOutcomes());
      assertFalse(arrowType0.isRecordType());
      assertFalse(arrowType0.isUnionType());
      assertFalse(arrowType0.isNullType());
      assertFalse(arrowType0.isBooleanValueType());
      assertFalse(arrowType0.isAllType());
      assertFalse(arrowType0.isNominalConstructor());
      assertFalse(arrowType0.isNominalType());
      assertFalse(arrowType0.isEnumElementType());
      assertFalse(arrowType0.isOrdinaryFunction());
      assertTrue(arrowType0.isResolved());
      assertFalse(arrowType0.isFunctionType());
      assertFalse(arrowType0.isTemplateType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.hasCachedValues());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isNominalType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isFunctionType());
      assertFalse(recordType0.isNoObjectType());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.isParameterizedType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.hasReferenceName());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isNativeObjectType());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isVoidType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isEnumType());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isParameterizedType());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNominalConstructor());
  }
}
