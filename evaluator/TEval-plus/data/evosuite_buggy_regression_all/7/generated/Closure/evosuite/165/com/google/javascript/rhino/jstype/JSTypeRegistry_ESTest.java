/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:26:17 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnresolvedTypeExpression;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSTypeRegistry_ESTest extends JSTypeRegistry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      JSType[] jSTypeArray0 = new JSType[2];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, false, jSTypeArray0);
      jSTypeRegistry0.getGreatestSubtypeWithProperty(functionType0, (String) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.isNominalConstructor());
      assertTrue(functionType0.hasInstanceType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.identifyNonNullableName("O)OWmRhAusE[VE");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorReporter errorReporter0 = jSTypeRegistry0.getErrorReporter();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorReporter0);
      assertSame(simpleErrorReporter0, errorReporter0);
      assertSame(errorReporter0, simpleErrorReporter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNominalType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isInterface());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNoResolvedType());
      assertNotNull(allType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(allType0, jSTypeArray0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isOrdinaryFunction());
      assertTrue(allType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNominalType());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isEnumElementType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isNoObjectType());
      assertFalse(allType0.isNoType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isRecordType());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isInterface());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isUnionType());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isFunctionPrototypeType());
      assertFalse(allType0.isNoResolvedType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isReturnTypeInferred());
      assertTrue(functionType0.hasCachedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertTrue(functionType0.hasInstanceType());
      assertNotNull(functionType0);
      assertEquals(0, jSTypeArray0.length);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) null, (JSType) null, (List<JSType>) linkedList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isStringValueType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.hasInstanceType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertNotNull(functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isResolved());
      assertNotNull(objectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isResolved());
      assertFalse(proxyObjectType0.isStringValueType());
      assertFalse(proxyObjectType0.isNumberValueType());
      assertFalse(proxyObjectType0.isNoType());
      assertFalse(proxyObjectType0.isNoObjectType());
      assertFalse(proxyObjectType0.isConstructor());
      assertFalse(proxyObjectType0.isEnumType());
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isUnionType());
      assertFalse(proxyObjectType0.isFunctionPrototypeType());
      assertFalse(proxyObjectType0.hasReferenceName());
      assertFalse(proxyObjectType0.isNominalConstructor());
      assertFalse(proxyObjectType0.isEnumElementType());
      assertFalse(proxyObjectType0.isNominalType());
      assertFalse(proxyObjectType0.isNativeObjectType());
      assertTrue(proxyObjectType0.isObject());
      assertFalse(proxyObjectType0.isCheckedUnknownType());
      assertFalse(proxyObjectType0.isNullType());
      assertFalse(proxyObjectType0.hasCachedValues());
      assertFalse(proxyObjectType0.isFunctionType());
      assertFalse(proxyObjectType0.isBooleanValueType());
      assertFalse(proxyObjectType0.isRecordType());
      assertFalse(proxyObjectType0.isTemplateType());
      assertFalse(proxyObjectType0.isInterface());
      assertFalse(proxyObjectType0.isAllType());
      assertFalse(proxyObjectType0.isVoidType());
      assertFalse(proxyObjectType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(proxyObjectType0.isResolved());
      assertNotNull(proxyObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a constructor");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertNotNull(errorFunctionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(errorFunctionType0, proxyObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isResolved());
      assertFalse(proxyObjectType0.isStringValueType());
      assertFalse(proxyObjectType0.isNumberValueType());
      assertFalse(proxyObjectType0.isNoType());
      assertFalse(proxyObjectType0.isNoObjectType());
      assertFalse(proxyObjectType0.isConstructor());
      assertFalse(proxyObjectType0.isEnumType());
      assertFalse(proxyObjectType0.isNoResolvedType());
      assertFalse(proxyObjectType0.isUnionType());
      assertFalse(proxyObjectType0.isFunctionPrototypeType());
      assertFalse(proxyObjectType0.hasReferenceName());
      assertFalse(proxyObjectType0.isNominalConstructor());
      assertFalse(proxyObjectType0.isEnumElementType());
      assertFalse(proxyObjectType0.isNominalType());
      assertFalse(proxyObjectType0.isNativeObjectType());
      assertTrue(proxyObjectType0.isObject());
      assertFalse(proxyObjectType0.isCheckedUnknownType());
      assertFalse(proxyObjectType0.isNullType());
      assertFalse(proxyObjectType0.hasCachedValues());
      assertFalse(proxyObjectType0.isFunctionType());
      assertFalse(proxyObjectType0.isBooleanValueType());
      assertFalse(proxyObjectType0.isRecordType());
      assertFalse(proxyObjectType0.isTemplateType());
      assertFalse(proxyObjectType0.isInterface());
      assertFalse(proxyObjectType0.isAllType());
      assertFalse(proxyObjectType0.isVoidType());
      assertFalse(proxyObjectType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(proxyObjectType0.isResolved());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isNoType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertFalse(errorFunctionType0.isNominalType());
      assertTrue(errorFunctionType0.isConstructor());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertFalse(errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isTemplateType());
      assertTrue(functionType0.isFunctionType());
      assertNull(functionType0.getTemplateTypeName());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertTrue(functionType0.isConstructor());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNullType());
      assertNotNull(functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertEquals(83, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertNotNull(node0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertNotNull(noResolvedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      EnumType enumType0 = jSTypeRegistry0.createEnumType("O_EBq<S%gV^Sugw", node0, noResolvedType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isBlock());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertEquals(83, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertNull(noResolvedType0.getReferenceName());
      assertFalse(noResolvedType0.isInterface());
      assertFalse(noResolvedType0.isReturnTypeInferred());
      assertTrue(noResolvedType0.matchesNumberContext());
      assertFalse(noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertFalse(noResolvedType0.isNullType());
      assertFalse(noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertFalse(noResolvedType0.hasCachedValues());
      assertFalse(noResolvedType0.isOrdinaryFunction());
      assertTrue(noResolvedType0.isConstructor());
      assertFalse(noResolvedType0.isNoType());
      assertFalse(noResolvedType0.isNoObjectType());
      assertFalse(noResolvedType0.isAllType());
      assertFalse(noResolvedType0.isEnumElementType());
      assertTrue(noResolvedType0.canBeCalled());
      assertFalse(noResolvedType0.isTemplateType());
      assertFalse(noResolvedType0.isCheckedUnknownType());
      assertTrue(noResolvedType0.isNullable());
      assertFalse(noResolvedType0.isNominalType());
      assertFalse(noResolvedType0.isVoidType());
      assertTrue(noResolvedType0.isObject());
      assertFalse(noResolvedType0.isNominalConstructor());
      assertFalse(noResolvedType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noResolvedType0.getPropertiesCount());
      assertTrue(noResolvedType0.hasInstanceType());
      assertTrue(noResolvedType0.matchesObjectContext());
      assertFalse(noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertFalse(noResolvedType0.isNumberValueType());
      assertFalse(noResolvedType0.isFunctionPrototypeType());
      assertTrue(noResolvedType0.isNoResolvedType());
      assertTrue(noResolvedType0.matchesStringContext());
      assertFalse(noResolvedType0.isBooleanValueType());
      assertFalse(noResolvedType0.isUnionType());
      assertFalse(noResolvedType0.isRecordType());
      assertFalse(enumType0.isFunctionPrototypeType());
      assertFalse(enumType0.isNoType());
      assertFalse(enumType0.isConstructor());
      assertFalse(enumType0.isRecordType());
      assertFalse(enumType0.isNoResolvedType());
      assertFalse(enumType0.isUnionType());
      assertTrue(enumType0.matchesObjectContext());
      assertFalse(enumType0.isOrdinaryFunction());
      assertFalse(enumType0.isStringValueType());
      assertTrue(enumType0.isEnumType());
      assertTrue(enumType0.matchesStringContext());
      assertFalse(enumType0.isInterface());
      assertFalse(enumType0.isResolved());
      assertFalse(enumType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertFalse(enumType0.isNominalConstructor());
      assertFalse(enumType0.isVoidType());
      assertFalse(enumType0.isTemplateType());
      assertFalse(enumType0.isAllType());
      assertFalse(enumType0.isEnumElementType());
      assertFalse(enumType0.isBooleanValueType());
      assertFalse(enumType0.isCheckedUnknownType());
      assertFalse(enumType0.isFunctionType());
      assertFalse(enumType0.isNumberValueType());
      assertFalse(enumType0.isNominalType());
      assertFalse(enumType0.isNoObjectType());
      assertFalse(enumType0.isNullType());
      assertTrue(enumType0.isObject());
      assertNotNull(enumType0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isEnumType());
      assertNotNull(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) noObjectType0, (List<JSType>) linkedList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertTrue(noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isStringValueType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isEnumType());
      assertEquals(0, linkedList0.size());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isRecordType());
      assertTrue(functionType0.isObject());
      assertNull(functionType0.getTemplateTypeName());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isStringValueType());
      assertNotNull(functionType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      Collection<FunctionType> collection0 = jSTypeRegistry0.getDirectImplementors(errorFunctionType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.isTemplateType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isEnumType());
      assertNotNull(collection0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      jSTypeRegistry0.forwardDeclareType("7oN&>1tUhW@>D|uv`\u0000");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isTemplateType());
      assertNotNull(voidType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoType noType0 = (NoType)voidType0.restrictByNotNullOrUndefined();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isCheckedUnknownType());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNullType());
      assertNotNull(noType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType(noType0, noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isFunctionType());
      assertTrue(voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertFalse(voidType0.isRecordType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isAllType());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.hasInstanceType());
      assertTrue(noType0.hasCachedValues());
      assertFalse(noType0.isRecordType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.isNoType());
      assertFalse(noType0.isUnionType());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isInterface());
      assertFalse(noType0.isCheckedUnknownType());
      assertNull(noType0.getReferenceName());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isNominalConstructor());
      assertFalse(noType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isNullType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isResolved());
      assertFalse(functionType0.isInterface());
      assertTrue(functionType0.isConstructor());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isNoResolvedType());
      assertTrue(functionType0.isObject());
      assertTrue(functionType0.hasInstanceType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertTrue(functionType0.isNominalConstructor());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isReturnTypeInferred());
      assertNotNull(functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NamedType namedType0 = (NamedType)jSTypeRegistry0.createNamedType("size must be non-negative", "com.google.javascript.rhino.jstype.JSTypeRegistry", 1, 8203);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(namedType0.isCheckedUnknownType());
      assertFalse(namedType0.isResolved());
      assertFalse(namedType0.hasCachedValues());
      assertEquals("size must be non-negative", namedType0.getReferenceName());
      assertFalse(namedType0.isRecordType());
      assertFalse(namedType0.isFunctionPrototypeType());
      assertTrue(namedType0.hasReferenceName());
      assertFalse(namedType0.isNativeObjectType());
      assertFalse(namedType0.isAllType());
      assertFalse(namedType0.isNoObjectType());
      assertFalse(namedType0.isNumberValueType());
      assertFalse(namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertFalse(namedType0.isUnionType());
      assertFalse(namedType0.isInterface());
      assertFalse(namedType0.isNoType());
      assertFalse(namedType0.isConstructor());
      assertFalse(namedType0.isVoidType());
      assertFalse(namedType0.isEnumType());
      assertFalse(namedType0.isNominalConstructor());
      assertFalse(namedType0.isNoResolvedType());
      assertFalse(namedType0.isStringValueType());
      assertTrue(namedType0.isObject());
      assertTrue(namedType0.isNominalType());
      assertFalse(namedType0.isOrdinaryFunction());
      assertFalse(namedType0.isNullType());
      assertFalse(namedType0.isTemplateType());
      assertFalse(namedType0.isFunctionType());
      assertFalse(namedType0.isEnumElementType());
      assertNotNull(namedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      jSTypeRegistry0.clearTemplateTypeName();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isConstructor());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isResolved());
      assertNotNull(objectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ObjectType objectType1 = jSTypeRegistry0.createObjectType(objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isConstructor());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType1.hasCachedValues());
      assertFalse(objectType1.isEnumElementType());
      assertFalse(objectType1.isVoidType());
      assertFalse(objectType1.isNullType());
      assertFalse(objectType1.isNominalConstructor());
      assertFalse(objectType1.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, objectType1.getPossibleToBooleanOutcomes());
      assertFalse(objectType1.isNoResolvedType());
      assertFalse(objectType1.hasReferenceName());
      assertFalse(objectType1.isCheckedUnknownType());
      assertFalse(objectType1.isNativeObjectType());
      assertFalse(objectType1.isBooleanValueType());
      assertTrue(objectType1.matchesObjectContext());
      assertFalse(objectType1.isConstructor());
      assertFalse(objectType1.isEnumType());
      assertFalse(objectType1.isFunctionPrototypeType());
      assertFalse(objectType1.isNumberValueType());
      assertFalse(objectType1.isUnionType());
      assertFalse(objectType1.isRecordType());
      assertFalse(objectType1.isNoType());
      assertTrue(objectType1.isObject());
      assertFalse(objectType1.isResolved());
      assertFalse(objectType1.isNoObjectType());
      assertFalse(objectType1.isInterface());
      assertFalse(objectType1.isStringValueType());
      assertFalse(objectType1.isFunctionType());
      assertFalse(objectType1.isOrdinaryFunction());
      assertFalse(objectType1.isAllType());
      assertFalse(objectType1.isTemplateType());
      assertNotNull(objectType1);
      assertFalse(objectType1.equals((Object)objectType0));
      assertNotSame(objectType0, objectType1);
      assertNotSame(objectType1, objectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionType((ObjectType) null, (JSType) null, (List<JSType>) linkedList0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, linkedList0.size());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.isNominalConstructor());
      assertNull(functionType0.getTemplateTypeName());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isBooleanValueType());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isInterface());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isNominalType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertFalse(functionType0.hasInstanceType());
      assertTrue(functionType0.isObject());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isUnionType());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isResolved());
      assertNotNull(functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(recordType0.isInterface());
      assertFalse(recordType0.isFunctionPrototypeType());
      assertFalse(recordType0.isNoObjectType());
      assertTrue(recordType0.matchesObjectContext());
      assertFalse(recordType0.isConstructor());
      assertFalse(recordType0.hasReferenceName());
      assertFalse(recordType0.isNoResolvedType());
      assertFalse(recordType0.isResolved());
      assertFalse(recordType0.isNumberValueType());
      assertFalse(recordType0.isStringValueType());
      assertFalse(recordType0.isUnionType());
      assertFalse(recordType0.isVoidType());
      assertFalse(recordType0.isNativeObjectType());
      assertTrue(recordType0.isRecordType());
      assertFalse(recordType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertFalse(recordType0.isEnumType());
      assertFalse(recordType0.isNullType());
      assertFalse(recordType0.isBooleanValueType());
      assertFalse(recordType0.isOrdinaryFunction());
      assertFalse(recordType0.isCheckedUnknownType());
      assertFalse(recordType0.isTemplateType());
      assertFalse(recordType0.isNominalType());
      assertTrue(recordType0.isObject());
      assertFalse(recordType0.isAllType());
      assertFalse(recordType0.isNoType());
      assertFalse(recordType0.isNominalConstructor());
      assertFalse(recordType0.isEnumElementType());
      assertFalse(recordType0.isFunctionType());
      assertNotNull(recordType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Node node0 = Node.newNumber(1.0);
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getLineno());
      assertTrue(node0.isNumber());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isName());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertEquals(39, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isSwitch());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabel());
      assertNotNull(node0);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createInterfaceType((String) null, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.matchesStringContext());
      assertNotNull(voidType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      NoType noType0 = (NoType)voidType0.restrictByNotNullOrUndefined();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.isNullable());
      assertNull(noType0.getTemplateTypeName());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertNotNull(noType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noType0, (List<JSType>) linkedList0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(voidType0.isFunctionPrototypeType());
      assertTrue(voidType0.isVoidType());
      assertFalse(voidType0.isEnumType());
      assertFalse(voidType0.isNominalType());
      assertFalse(voidType0.isNominalConstructor());
      assertFalse(voidType0.isStringValueType());
      assertFalse(voidType0.isCheckedUnknownType());
      assertFalse(voidType0.isAllType());
      assertFalse(voidType0.isTemplateType());
      assertFalse(voidType0.isNullType());
      assertFalse(voidType0.isNoObjectType());
      assertFalse(voidType0.isNoType());
      assertFalse(voidType0.isFunctionType());
      assertFalse(voidType0.isEnumElementType());
      assertFalse(voidType0.matchesNumberContext());
      assertFalse(voidType0.matchesObjectContext());
      assertFalse(voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.getDisplayName());
      assertFalse(voidType0.isInterface());
      assertFalse(voidType0.isConstructor());
      assertFalse(voidType0.isOrdinaryFunction());
      assertFalse(voidType0.isResolved());
      assertFalse(voidType0.isBooleanValueType());
      assertFalse(voidType0.isNumberValueType());
      assertFalse(voidType0.isUnionType());
      assertFalse(voidType0.isNoResolvedType());
      assertTrue(voidType0.matchesStringContext());
      assertFalse(noType0.isFunctionPrototypeType());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isNoObjectType());
      assertTrue(noType0.isNoType());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isStringValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isNoResolvedType());
      assertFalse(noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.isVoidType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isEnumType());
      assertTrue(noType0.isNullable());
      assertNull(noType0.getTemplateTypeName());
      assertTrue(noType0.matchesObjectContext());
      assertFalse(noType0.isBooleanValueType());
      assertTrue(noType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertTrue(noType0.isObject());
      assertFalse(noType0.isTemplateType());
      assertFalse(noType0.isFunctionType());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isOrdinaryFunction());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isNullType());
      assertTrue(noType0.isConstructor());
      assertFalse(noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertEquals(0, linkedList0.size());
      assertFalse(functionType0.isResolved());
      assertTrue(functionType0.canBeCalled());
      assertFalse(functionType0.isRecordType());
      assertFalse(functionType0.isAllType());
      assertFalse(functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertFalse(functionType0.hasCachedValues());
      assertFalse(functionType0.isConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertFalse(functionType0.isTemplateType());
      assertFalse(functionType0.isReturnTypeInferred());
      assertFalse(functionType0.isNominalType());
      assertFalse(functionType0.isCheckedUnknownType());
      assertFalse(functionType0.isNumberValueType());
      assertFalse(functionType0.isStringValueType());
      assertFalse(functionType0.isUnionType());
      assertFalse(functionType0.isEnumElementType());
      assertFalse(functionType0.isEnumType());
      assertFalse(functionType0.isNominalConstructor());
      assertFalse(functionType0.isNoResolvedType());
      assertFalse(functionType0.isVoidType());
      assertFalse(functionType0.hasInstanceType());
      assertFalse(functionType0.isBooleanValueType());
      assertTrue(functionType0.isFunctionType());
      assertFalse(functionType0.isNoType());
      assertTrue(functionType0.isOrdinaryFunction());
      assertFalse(functionType0.isNoObjectType());
      assertFalse(functionType0.isNullType());
      assertTrue(functionType0.isObject());
      assertFalse(functionType0.isFunctionPrototypeType());
      assertNull(functionType0.getTemplateTypeName());
      assertNotNull(functionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isResolved());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertNotNull(allType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      JSType jSType0 = allType0.forceResolve(simpleErrorReporter0, (StaticScope<JSType>) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(allType0.matchesObjectContext());
      assertFalse(allType0.isTemplateType());
      assertTrue(allType0.isResolved());
      assertFalse(allType0.isFunctionType());
      assertFalse(allType0.isOrdinaryFunction());
      assertFalse(allType0.canBeCalled());
      assertFalse(allType0.isBooleanValueType());
      assertFalse(allType0.isRecordType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertFalse(allType0.isInterface());
      assertFalse(allType0.isNumberValueType());
      assertFalse(allType0.isUnionType());
      assertTrue(allType0.matchesStringContext());
      assertFalse(allType0.isStringValueType());
      assertFalse(allType0.isVoidType());
      assertFalse(allType0.isEnumType());
      assertFalse(allType0.isFunctionPrototypeType());
      assertTrue(allType0.isAllType());
      assertFalse(allType0.isNoResolvedType());
      assertTrue(allType0.hasDisplayName());
      assertFalse(allType0.isEnumElementType());
      assertFalse(allType0.isConstructor());
      assertFalse(allType0.isNominalConstructor());
      assertFalse(allType0.isNullType());
      assertFalse(allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertFalse(allType0.isNoType());
      assertFalse(allType0.isNominalType());
      assertFalse(allType0.isCheckedUnknownType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertTrue(jSType0.hasDisplayName());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isTemplateType());
      assertTrue(jSType0.isAllType());
      assertTrue(jSType0.matchesStringContext());
      assertFalse(jSType0.isOrdinaryFunction());
      assertTrue(jSType0.matchesObjectContext());
      assertTrue(jSType0.isResolved());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, jSType0.getPossibleToBooleanOutcomes());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoResolvedType());
      assertEquals("<Any Type>", jSType0.getDisplayName());
      assertFalse(jSType0.isUnionType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isConstructor());
      assertNotNull(jSType0);
      assertSame(allType0, jSType0);
      assertSame(jSType0, allType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      jSTypeRegistry0.clearNamedTypes();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      jSTypeRegistry0.setLastGeneration(false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ObjectType objectType0 = jSTypeRegistry0.createNativeAnonymousObjectType();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isNoResolvedType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isStringValueType());
      assertTrue(objectType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertNotNull(objectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      jSTypeRegistry0.setTemplateTypeName("ReferenceError");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TemplateType templateType0 = (TemplateType)jSTypeRegistry0.getType("ReferenceError");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(templateType0.hasCachedValues());
      assertFalse(templateType0.isResolved());
      assertFalse(templateType0.isFunctionType());
      assertFalse(templateType0.isVoidType());
      assertFalse(templateType0.isNominalConstructor());
      assertTrue(templateType0.isObject());
      assertFalse(templateType0.isStringValueType());
      assertFalse(templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("ReferenceError", templateType0.getReferenceName());
      assertFalse(templateType0.isEnumElementType());
      assertFalse(templateType0.isEnumType());
      assertFalse(templateType0.isFunctionPrototypeType());
      assertFalse(templateType0.isRecordType());
      assertFalse(templateType0.isUnionType());
      assertFalse(templateType0.isBooleanValueType());
      assertFalse(templateType0.isNumberValueType());
      assertTrue(templateType0.isTemplateType());
      assertNotNull(templateType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.registerTypeImplementingInterface((FunctionType) null, (ObjectType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "}xF&,mPQ=L<p#2o.g");
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isResolved());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertTrue(objectType0.isObject());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertNotNull(objectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, objectType0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isNullType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertFalse(errorFunctionType0.isVoidType());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isResolved());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNoObjectType());
      assertTrue(objectType0.isObject());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(parameterizedType0.isTemplateType());
      assertFalse(parameterizedType0.hasCachedValues());
      assertTrue(parameterizedType0.isNativeObjectType());
      assertFalse(parameterizedType0.isBooleanValueType());
      assertFalse(parameterizedType0.isEnumType());
      assertFalse(parameterizedType0.isRecordType());
      assertFalse(parameterizedType0.isVoidType());
      assertFalse(parameterizedType0.isOrdinaryFunction());
      assertFalse(parameterizedType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertFalse(parameterizedType0.isResolved());
      assertFalse(parameterizedType0.isStringValueType());
      assertFalse(parameterizedType0.isInterface());
      assertFalse(parameterizedType0.isNoType());
      assertTrue(parameterizedType0.isObject());
      assertFalse(parameterizedType0.isNoObjectType());
      assertFalse(parameterizedType0.isUnionType());
      assertTrue(parameterizedType0.isConstructor());
      assertFalse(parameterizedType0.isNoResolvedType());
      assertFalse(parameterizedType0.isFunctionPrototypeType());
      assertFalse(parameterizedType0.isNumberValueType());
      assertFalse(parameterizedType0.isEnumElementType());
      assertFalse(parameterizedType0.isNominalType());
      assertTrue(parameterizedType0.hasReferenceName());
      assertTrue(parameterizedType0.isNominalConstructor());
      assertFalse(parameterizedType0.isNullType());
      assertFalse(parameterizedType0.isCheckedUnknownType());
      assertTrue(parameterizedType0.isFunctionType());
      assertNotNull(parameterizedType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      JSTypeNative jSTypeNative1 = JSTypeNative.RANGE_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[1] = jSTypeNative1;
      jSTypeNativeArray0[2] = jSTypeNative0;
      jSTypeNativeArray0[3] = jSTypeNativeArray0[2];
      JSTypeNative jSTypeNative2 = JSTypeNative.BOOLEAN_OBJECT_TYPE;
      jSTypeNativeArray0[4] = jSTypeNative2;
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, true);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      boolean boolean0 = jSTypeRegistry0.declareType("snpd4N4^Fmz.", (JSType) null);
      assertTrue(boolean0);
      assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.matchesStringContext());
      assertNull(noObjectType0.getTemplateTypeName());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.hasInstanceType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isEnumType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isVoidType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertNotNull(noObjectType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      Node node0 = Node.newString("Not declared as a type name", 105, 0);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(430080, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertNotNull(node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      JSType jSType0 = jSTypeRegistry0.createFromTypeNodes(node0, "b", noObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.matchesStringContext());
      assertNull(noObjectType0.getTemplateTypeName());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.hasInstanceType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isEnumType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isVoidType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(430080, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isStringValueType());
      assertNotNull(jSType0);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      jSTypeRegistry0.registerPropertyOnType("Unknown class name", jSType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noObjectType0.matchesStringContext());
      assertNull(noObjectType0.getTemplateTypeName());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isInterface());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.hasInstanceType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isEnumType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isVoidType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(105, node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(430080, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isAllType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isStringValueType());
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertNotNull(objectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      jSTypeRegistry0.unregisterPropertyOnType("4\"GzFava", objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isNativeObjectType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isOrdinaryFunction());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[0];
      NoType noType0 = (NoType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.isNoType());
      assertNull(noType0.getTemplateTypeName());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isTemplateType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isResolved());
      assertNotNull(noType0);
      assertEquals(0, jSTypeNativeArray0.length);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      jSTypeRegistry0.unregisterPropertyOnType("prototype", noType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(noType0.isNullable());
      assertFalse(noType0.isNominalType());
      assertFalse(noType0.isCheckedUnknownType());
      assertFalse(noType0.isVoidType());
      assertFalse(noType0.isEnumType());
      assertFalse(noType0.isEnumElementType());
      assertFalse(noType0.isNoResolvedType());
      assertTrue(noType0.matchesStringContext());
      assertFalse(noType0.isNumberValueType());
      assertFalse(noType0.isUnionType());
      assertFalse(noType0.isOrdinaryFunction());
      assertTrue(noType0.isConstructor());
      assertTrue(noType0.matchesObjectContext());
      assertTrue(noType0.hasInstanceType());
      assertFalse(noType0.isAllType());
      assertFalse(noType0.isNominalConstructor());
      assertTrue(noType0.isObject());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertFalse(noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertFalse(noType0.isReturnTypeInferred());
      assertFalse(noType0.isInterface());
      assertTrue(noType0.matchesNumberContext());
      assertFalse(noType0.isFunctionType());
      assertTrue(noType0.isNoType());
      assertNull(noType0.getTemplateTypeName());
      assertTrue(noType0.canBeCalled());
      assertFalse(noType0.isBooleanValueType());
      assertFalse(noType0.isFunctionPrototypeType());
      assertFalse(noType0.isRecordType());
      assertFalse(noType0.isTemplateType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertFalse(noType0.hasCachedValues());
      assertFalse(noType0.isNoObjectType());
      assertFalse(noType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noType0.getPropertiesCount());
      assertFalse(noType0.isResolved());
      assertEquals(0, jSTypeNativeArray0.length);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      boolean boolean0 = jSTypeRegistry0.canPropertyBeDefined((JSType) null, "xO92Sh<");
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Iterable<JSType> iterable0 = jSTypeRegistry0.getTypesWithProperty((String) null);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertTrue(noObjectType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertNull(noObjectType0.getTemplateTypeName());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isEnumType());
      assertNotNull(noObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      jSTypeRegistry0.registerPropertyOnType("=C*@H&r_@", noObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isNullType());
      assertFalse(noObjectType0.isResolved());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertTrue(noObjectType0.canBeCalled());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isStringValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertTrue(noObjectType0.isObject());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertNull(noObjectType0.getTemplateTypeName());
      assertTrue(noObjectType0.hasInstanceType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isEnumType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      Iterable<JSType> iterable0 = jSTypeRegistry0.getTypesWithProperty("=C*@H&r_@");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Iterable<ObjectType> iterable0 = jSTypeRegistry0.getEachReferenceTypeWithProperty("Undefined");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Iterable<ObjectType> iterable0 = jSTypeRegistry0.getEachReferenceTypeWithProperty("prototype");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Node node0 = Node.newString(")");
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertNotNull(node0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, ";v^~_N");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertNotNull(unresolvedTypeExpression0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(unresolvedTypeExpression0, unresolvedTypeExpression0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertFalse(objectType0.isInterface());
      assertTrue(objectType0.isUnknownType());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.hasCachedValues());
      assertFalse(objectType0.isRecordType());
      assertTrue(objectType0.matchesNumberContext());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isTemplateType());
      assertTrue(objectType0.isNullable());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isStringValueType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertTrue(objectType0.canBeCalled());
      assertTrue(objectType0.matchesStringContext());
      assertFalse(objectType0.isResolved());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.hasReferenceName());
      assertFalse(objectType0.isVoidType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isBooleanValueType());
      assertTrue(objectType0.hasDisplayName());
      assertFalse(objectType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isNumberValueType());
      assertEquals("?", objectType0.getReferenceName());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isNominalType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isNativeObjectType());
      assertEquals("Unknown", objectType0.getDisplayName());
      assertEquals(Integer.MAX_VALUE, objectType0.getPropertiesCount());
      assertFalse(objectType0.isNullType());
      assertTrue(objectType0.isObject());
      assertNotNull(objectType0);
      assertSame(unresolvedTypeExpression0, objectType0);
      assertSame(objectType0, unresolvedTypeExpression0);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      Node node0 = Node.newNumber(0.0, (-35), 7);
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertNotNull(node0);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, ")");
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertNotNull(unresolvedTypeExpression0);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(unresolvedTypeExpression0, (ObjectType) null);
      assertTrue(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.isWhile());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(objectType0.isFunctionType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isInterface());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isResolved());
      assertTrue(objectType0.hasReferenceName());
      assertTrue(objectType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.matchesObjectContext());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isEnumType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isUnionType());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isNominalConstructor());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isStringValueType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isAllType());
      assertNotNull(objectType0);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesStringContext());
      assertNull(noObjectType0.getTemplateTypeName());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isEnumType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.canBeCalled());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertNotNull(noObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      Node node0 = Node.newString("Unknown class name");
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertNotNull(node0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, "Mb-;D9TmT&");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertNotNull(unresolvedTypeExpression0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, unresolvedTypeExpression0, "NULL");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isUnionType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isAllType());
      assertEquals("NULL", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertNotNull(enumElementType0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      ObjectType objectType0 = jSTypeRegistry0.findCommonSuperObject(enumElementType0, noObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesStringContext());
      assertNull(noObjectType0.getTemplateTypeName());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isEnumType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.canBeCalled());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isUnionType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isAllType());
      assertEquals("NULL", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.matchesObjectContext());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isUnionType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isInterface());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isStringValueType());
      assertNotNull(objectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      jSTypeRegistry0.resolveTypesInScope(objectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.isTemplateType());
      assertTrue(noObjectType0.matchesStringContext());
      assertNull(noObjectType0.getTemplateTypeName());
      assertFalse(noObjectType0.isBooleanValueType());
      assertFalse(noObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertFalse(noObjectType0.isAllType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isFunctionType());
      assertFalse(noObjectType0.isEnumType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isNoType());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isUnionType());
      assertFalse(noObjectType0.isNumberValueType());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isNominalType());
      assertTrue(noObjectType0.isConstructor());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumElementType());
      assertTrue(noObjectType0.canBeCalled());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.hasCachedValues());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVoid());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(unresolvedTypeExpression0.isNoObjectType());
      assertFalse(unresolvedTypeExpression0.isNoType());
      assertEquals(Integer.MAX_VALUE, unresolvedTypeExpression0.getPropertiesCount());
      assertTrue(unresolvedTypeExpression0.isObject());
      assertFalse(unresolvedTypeExpression0.isUnionType());
      assertTrue(unresolvedTypeExpression0.isUnknownType());
      assertFalse(unresolvedTypeExpression0.isNumberValueType());
      assertFalse(unresolvedTypeExpression0.isFunctionPrototypeType());
      assertTrue(unresolvedTypeExpression0.matchesObjectContext());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertFalse(unresolvedTypeExpression0.isConstructor());
      assertFalse(unresolvedTypeExpression0.isResolved());
      assertFalse(unresolvedTypeExpression0.hasCachedValues());
      assertFalse(unresolvedTypeExpression0.isRecordType());
      assertTrue(unresolvedTypeExpression0.hasDisplayName());
      assertFalse(unresolvedTypeExpression0.isEnumType());
      assertTrue(unresolvedTypeExpression0.matchesStringContext());
      assertFalse(unresolvedTypeExpression0.isInterface());
      assertFalse(unresolvedTypeExpression0.isNoResolvedType());
      assertFalse(unresolvedTypeExpression0.isCheckedUnknownType());
      assertFalse(unresolvedTypeExpression0.isStringValueType());
      assertTrue(unresolvedTypeExpression0.isNullable());
      assertFalse(unresolvedTypeExpression0.isVoidType());
      assertTrue(unresolvedTypeExpression0.canBeCalled());
      assertFalse(unresolvedTypeExpression0.isAllType());
      assertFalse(unresolvedTypeExpression0.isBooleanValueType());
      assertFalse(unresolvedTypeExpression0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertTrue(unresolvedTypeExpression0.matchesNumberContext());
      assertFalse(unresolvedTypeExpression0.isTemplateType());
      assertFalse(unresolvedTypeExpression0.hasReferenceName());
      assertFalse(unresolvedTypeExpression0.isOrdinaryFunction());
      assertFalse(unresolvedTypeExpression0.isNominalType());
      assertFalse(unresolvedTypeExpression0.isNativeObjectType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertFalse(unresolvedTypeExpression0.isEnumElementType());
      assertFalse(unresolvedTypeExpression0.isFunctionType());
      assertFalse(unresolvedTypeExpression0.isNominalConstructor());
      assertFalse(enumElementType0.isNoType());
      assertFalse(enumElementType0.isNoObjectType());
      assertFalse(enumElementType0.isFunctionPrototypeType());
      assertFalse(enumElementType0.isNumberValueType());
      assertFalse(enumElementType0.isNoResolvedType());
      assertFalse(enumElementType0.isConstructor());
      assertFalse(enumElementType0.isRecordType());
      assertFalse(enumElementType0.isUnionType());
      assertTrue(enumElementType0.isEnumElementType());
      assertFalse(enumElementType0.hasCachedValues());
      assertFalse(enumElementType0.isNominalConstructor());
      assertFalse(enumElementType0.isFunctionType());
      assertFalse(enumElementType0.isCheckedUnknownType());
      assertFalse(enumElementType0.isNativeObjectType());
      assertFalse(enumElementType0.isNullType());
      assertFalse(enumElementType0.isBooleanValueType());
      assertFalse(enumElementType0.isAllType());
      assertEquals("NULL", enumElementType0.getReferenceName());
      assertFalse(enumElementType0.isEnumType());
      assertTrue(enumElementType0.isNominalType());
      assertFalse(enumElementType0.isTemplateType());
      assertTrue(enumElementType0.hasReferenceName());
      assertFalse(enumElementType0.isOrdinaryFunction());
      assertFalse(enumElementType0.isVoidType());
      assertFalse(enumElementType0.isStringValueType());
      assertFalse(enumElementType0.isResolved());
      assertFalse(enumElementType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
      assertTrue(objectType0.matchesObjectContext());
      assertTrue(objectType0.isObject());
      assertFalse(objectType0.isNoResolvedType());
      assertFalse(objectType0.isNumberValueType());
      assertFalse(objectType0.isFunctionPrototypeType());
      assertFalse(objectType0.isUnionType());
      assertTrue(objectType0.isInstanceType());
      assertFalse(objectType0.isNominalConstructor());
      assertFalse(objectType0.isConstructor());
      assertFalse(objectType0.isEnumElementType());
      assertFalse(objectType0.isCheckedUnknownType());
      assertTrue(objectType0.isNominalType());
      assertFalse(objectType0.isNullType());
      assertFalse(objectType0.isNoObjectType());
      assertFalse(objectType0.isNoType());
      assertFalse(objectType0.isAllType());
      assertFalse(objectType0.isFunctionType());
      assertFalse(objectType0.isOrdinaryFunction());
      assertFalse(objectType0.isBooleanValueType());
      assertFalse(objectType0.isTemplateType());
      assertFalse(objectType0.isRecordType());
      assertFalse(objectType0.isEnumType());
      assertTrue(objectType0.hasCachedValues());
      assertFalse(objectType0.isVoidType());
      assertTrue(objectType0.isNativeObjectType());
      assertFalse(objectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertFalse(objectType0.isInterface());
      assertTrue(objectType0.hasReferenceName());
      assertFalse(objectType0.isStringValueType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertNotNull(noObjectType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      Node node0 = Node.newString("Not declared as a constructor", 1, (-1692));
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isFunction());
      assertNotNull(node0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      JSType jSType0 = jSTypeRegistry0.createFromTypeNodes(node0, (String) null, noObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertFalse(node0.isUnscopedQualifiedName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertFalse(node0.isQualifiedName());
      assertFalse(node0.isFunction());
      assertFalse(jSType0.isFunctionType());
      assertFalse(jSType0.isStringValueType());
      assertFalse(jSType0.isNoResolvedType());
      assertFalse(jSType0.isOrdinaryFunction());
      assertFalse(jSType0.isTemplateType());
      assertFalse(jSType0.isNominalType());
      assertFalse(jSType0.isBooleanValueType());
      assertFalse(jSType0.isNumberValueType());
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isResolved());
      assertFalse(jSType0.isCheckedUnknownType());
      assertFalse(jSType0.isEnumType());
      assertFalse(jSType0.isNominalConstructor());
      assertFalse(jSType0.isConstructor());
      assertFalse(jSType0.isRecordType());
      assertFalse(jSType0.isInterface());
      assertFalse(jSType0.isNoObjectType());
      assertFalse(jSType0.isNoType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isFunctionPrototypeType());
      assertTrue(jSType0.isUnionType());
      assertFalse(jSType0.isEnumElementType());
      assertFalse(jSType0.isAllType());
      assertNotNull(jSType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(54, Node.LAST_PROP);
      assertEquals(35, Node.PARENTHESIZED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(16, Node.SOURCENAME_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(44, Node.IS_OPTIONAL_PARAM);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(45, Node.IS_VAR_ARGS_PARAM);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(41, Node.BRACELESS_TYPE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, JSType.ENUMDECL);
      assertEquals(0, JSType.NOT_ENUMDECL);
      
      jSTypeRegistry0.resolveTypesInScope(noObjectType0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(noObjectType0.hasCachedValues());
      assertTrue(noObjectType0.matchesObjectContext());
      assertFalse(noObjectType0.isRecordType());
      assertFalse(noObjectType0.isFunctionPrototypeType());
      assertFalse(noObjectType0.isNumberValueType());
      assertTrue(noObjectType0.hasInstanceType());
      assertFalse(noObjectType0.isInterface());
      assertFalse(noObjectType0.isCheckedUnknownType());
      assertFalse(noObjectType0.isFunctionType());
      assertTrue(noObjectType0.canBeCalled());
      assertTrue(noObjectType0.isObject());
      assertFalse(noObjectType0.isNoType());
      assertFalse(noObjectType0.isEnumElementType());
      assertFalse(noObjectType0.isAllType());
      assertFalse(noObjectType0.isNominalType());
      assertFalse(noObjectType0.isNominalConstructor());
      assertFalse(noObjectType0.isOrdinaryFunction());
      assertTrue(noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertFalse(noObjectType0.isNullType());
      assertTrue(noObjectType0.matchesNumberContext());
      assertFalse(noObjectType0.isEnumType());
      assertFalse(noObjectType0.isTemplateType());
      assertFalse(noObjectType0.isBooleanValueType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(Integer.MAX_VALUE, noObjectType0.getPropertiesCount());
      assertFalse(noObjectType0.isStringValueType());
      assertFalse(noObjectType0.isReturnTypeInferred());
      assertFalse(noObjectType0.isResolved());
      assertFalse(noObjectType0.isNoResolvedType());
      assertFalse(noObjectType0.isUnionType());
      assertTrue(noObjectType0.matchesStringContext());
      assertFalse(noObjectType0.isVoidType());
      assertTrue(noObjectType0.isNoObjectType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      jSTypeRegistry0.incrementGeneration();
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "ReferenceError");
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertNotNull(errorFunctionType0);
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
      
      boolean boolean0 = jSTypeRegistry0.declareType("ReferenceError", errorFunctionType0);
      assertFalse(boolean0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(errorFunctionType0.isObject());
      assertFalse(errorFunctionType0.isNoResolvedType());
      assertFalse(errorFunctionType0.isNoType());
      assertFalse(errorFunctionType0.isNumberValueType());
      assertFalse(errorFunctionType0.isUnionType());
      assertFalse(errorFunctionType0.isNoObjectType());
      assertFalse(errorFunctionType0.isStringValueType());
      assertTrue(errorFunctionType0.isNominalConstructor());
      assertFalse(errorFunctionType0.isCheckedUnknownType());
      assertFalse(errorFunctionType0.hasCachedValues());
      assertFalse(errorFunctionType0.isEnumElementType());
      assertTrue(errorFunctionType0.canBeCalled());
      assertFalse(errorFunctionType0.isNominalType());
      assertFalse(errorFunctionType0.isOrdinaryFunction());
      assertTrue(errorFunctionType0.isConstructor());
      assertFalse(errorFunctionType0.isAllType());
      assertFalse(errorFunctionType0.isInterface());
      assertFalse(errorFunctionType0.isTemplateType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertFalse(errorFunctionType0.isBooleanValueType());
      assertFalse(errorFunctionType0.isNullType());
      assertTrue(errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertFalse(errorFunctionType0.isResolved());
      assertFalse(errorFunctionType0.isReturnTypeInferred());
      assertFalse(errorFunctionType0.isEnumType());
      assertTrue(errorFunctionType0.hasInstanceType());
      assertFalse(errorFunctionType0.isFunctionPrototypeType());
      assertFalse(errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertFalse(errorFunctionType0.isVoidType());
      assertEquals(0, JSType.NOT_ENUMDECL);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      // Undeclared exception!
      try { 
        jSTypeRegistry0.overwriteDeclaredType((String) null, (JSType) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      jSTypeRegistry0.overwriteDeclaredType("EvalError", noObjectType0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.hasNamespace("U^l@yHI");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      jSTypeRegistry0.resolveTypesInScope((StaticScope<JSType>) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSType jSType0 = jSTypeRegistry0.getType("ReferenceError");
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[6] = jSType0;
      jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "FnDE$VQI=Yh6@^s|lV");
      jSTypeRegistry0.createDefaultObjectUnion(errorFunctionType0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[2];
      jSTypeRegistry0.createFunctionType((JSType) null, false, jSTypeArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      JSType[] jSTypeArray0 = new JSType[1];
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createConstructorType((JSType) allType0, true, jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.FunctionParamBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, (ObjectType) null, (JSType) null);
      jSTypeRegistry0.resetImplicitPrototype((JSType) null, indexedType0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
      jSTypeRegistry0.resetImplicitPrototype(objectType0, errorFunctionType0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry.ResolveMode jSTypeRegistry_ResolveMode0 = JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
      jSTypeRegistry0.setResolveMode(jSTypeRegistry_ResolveMode0);
      Node node0 = new Node(705, 0, 0);
      Node node1 = new Node(0, node0, node0, node0, node0);
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node1, "Named type with empty name component");
      // Undeclared exception!
      try { 
        unresolvedTypeExpression0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 0
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSTypeRegistry.ResolveMode jSTypeRegistry_ResolveMode0 = JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
      jSTypeRegistry0.setResolveMode(jSTypeRegistry_ResolveMode0);
      Node node0 = Node.newString("Named type with empty name component", 705, 0);
      Node node1 = new Node(0, node0, node0, node0, node0);
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node1, "Named type with empty name component");
      unresolvedTypeExpression0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Not declared as a constructor", (-1), (-1));
      Node node1 = new Node(105, node0, 52, 54);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Function");
      ObjectType objectType0 = errorFunctionType0.getInstanceType();
      jSTypeRegistry0.createFromTypeNodes(node1, "Not declared as a constructor", objectType0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = Node.newNumber((double) 304, 304, 304);
      Node node1 = new Node(304, node0, node0, node0, node0);
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node1, ")");
      // Undeclared exception!
      try { 
        unresolvedTypeExpression0.resolveInternal((ErrorReporter) null, unresolvedTypeExpression0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node in type expression: NUMBER 304.0 304
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      Node node0 = Node.newString(305, "Not declared as a type name", 0, (-243));
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFromTypeNodes(node0, "Unknown class name", errorFunctionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "}xF&,mPQ=L<p#2o.g");
      ObjectType objectType0 = errorFunctionType0.getTypeOfThis();
      Node node0 = new Node(306, 878, (-836));
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFromTypeNodes(node0, "Not declared as a constructor", objectType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      Node node0 = new Node(307, 0, 309);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFromTypeNodes(node0, "", errorFunctionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSTypeRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      Node node0 = new Node(1536, 1536, 1536);
      Node node1 = new Node(308, node0, node0, node0, 0, 1751);
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node1, "NoObject");
      unresolvedTypeExpression0.resolveInternal((ErrorReporter) null, (StaticScope<JSType>) null);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      Node node0 = Node.newString("Not declared as a type name");
      Node node1 = new Node(309, node0, node0, 15, 54);
      jSTypeRegistry0.createFromTypeNodes(node1, "|tr^9}fXxAW", errorFunctionType0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
      Node node0 = new Node(304);
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, ")");
      unresolvedTypeExpression0.resolveInternal((ErrorReporter) null, unresolvedTypeExpression0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoType noType0 = new NoType(jSTypeRegistry0);
      Node node0 = Node.newString("Undefined", 97, (-1994091941));
      jSTypeRegistry0.createFromTypeNodes(node0, "y", noType0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      Node node0 = Node.newString("Not declared as a constructor");
      node0.addChildAfter(node0, (Node) null);
      jSTypeRegistry0.createFromTypeNodes(node0, "Not(", (StaticScope<JSType>) null);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      Node node0 = Node.newString("Not declared as a constructor");
      Node node1 = new Node(309, node0, node0, 15, 54);
      node0.addChildAfter(node1, (Node) null);
      // Undeclared exception!
      try { 
        jSTypeRegistry0.createFromTypeNodes(node1, "comgoogle.common.base.CharMatcher$7", errorFunctionType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 309
         //
         verifyException("com.google.javascript.rhino.Token", e);
      }
  }
}
