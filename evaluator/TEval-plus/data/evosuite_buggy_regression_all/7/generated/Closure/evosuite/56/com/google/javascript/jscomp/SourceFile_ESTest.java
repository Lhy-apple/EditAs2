/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:03:11 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SourceFile;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SourceFile_ESTest extends SourceFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromGenerator("'Ba9jO-g5oTC7IDvC", (SourceFile.Generator) null);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("UTF-16BE", sourceFile_Generator0);
      sourceFile_Generated0.clearCachedSource();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SourceFile sourceFile0 = SourceFile.fromFile("\nAc tual: ", (Charset) null);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile(" <hr", charset0);
      // Undeclared exception!
      try { 
        sourceFile0.getLineOffset(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: 0
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+1HS|>s_f9}tlwyc");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      sourceFile_OnDisk0.clearCachedSource();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode("lnIPIs@k", "lnIPIs@k", "lnIPIs@k");
      assertFalse(sourceFile_Preloaded0.isExtern());
      
      sourceFile_Preloaded0.setIsExtern(true);
      assertTrue(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\nActual:");
      SourceFile sourceFile0 = SourceFile.fromReader("\nActual:", stringReader0);
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\nActual: ", "\nActual: ");
      sourceFile_Preloaded0.clearCachedSource();
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("J83|=", sourceFile_Generator0);
      sourceFile_Generated0.getCodeNoCache();
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("com.google.javascript.jscomp.SourceFile");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      sourceFile_OnDisk0.getName();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SourceFile sourceFile0 = SourceFile.fromInputStream("!|D:|hZH", "]wJp5OL2Z?R]", (InputStream) byteArrayInputStream0);
      String string0 = sourceFile0.toString();
      assertEquals("!|D:|hZH", string0);
      assertEquals("]wJp5OL2Z?R]", sourceFile0.getOriginalPath());
      assertFalse(sourceFile0.isExtern());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        SourceFile.fromInputStream("\nAct8al: ", (InputStream) mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("h+J^~mA3k}e.8e6Y#");
      SourceFile sourceFile0 = SourceFile.fromFile((File) mockFile0);
      boolean boolean0 = sourceFile0.isExtern();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = null;
      try {
        sourceFile_Preloaded0 = new SourceFile.Preloaded((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = null;
      try {
        sourceFile_Preloaded0 = new SourceFile.Preloaded("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile("+BF/>|_%mYeA87bU4");
      sourceFile_OnDisk0.getNumLines();
      int int0 = sourceFile_OnDisk0.getLineOffset(1);
      assertEquals(0, int0);
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\nAc ual:", "\nAc ual:", "\nAc ual:");
      int int0 = sourceFile_Preloaded0.getLineOffset(2);
      assertEquals(1, int0);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      SourceFile sourceFile0 = SourceFile.fromFile(" <hr", charset0);
      // Undeclared exception!
      try { 
        sourceFile0.getLineOffset(123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: 123
         //
         verifyException("com.google.javascript.jscomp.SourceFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("com.google.javascript.jscomp.SourceFile$Preloaded", "com.google.javascript.jscomp.SourceFile$Preloaded");
      sourceFile_Preloaded0.getNumLines();
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertEquals(1, int0);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("J83|=", sourceFile_Generator0);
      String string0 = sourceFile_Generated0.getOriginalPath();
      assertNotNull(string0);
      assertFalse(sourceFile_Generated0.isExtern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("com.google.javascript.jscomp.SourceFile$Preloaded", "com.google.javascript.jscomp.SourceFile$Preloaded");
      sourceFile_Preloaded0.getOriginalPath();
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("+1HS|>s_f9}tlwyc");
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      try { 
        sourceFile_OnDisk0.getCodeReader();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      File file0 = MockFile.createTempFile("len is negative", (String) null);
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(file0);
      Region region0 = sourceFile_OnDisk0.getRegion(140);
      assertNull(region0);
      
      sourceFile_OnDisk0.getCodeReader();
      assertFalse(sourceFile_OnDisk0.isExtern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("com.google.javascrit.jscomp.SourceFile$Preloaded", "\n");
      String string0 = sourceFile_Preloaded0.getLine((-71));
      assertNotNull(string0);
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertEquals("com.google.javascrit.jscomp.SourceFile$Preloaded", sourceFile_Preloaded0.getOriginalPath());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\nAct8al: ", "\nAct8al: ", "\nAct8al: ");
      String string0 = sourceFile_Preloaded0.getLine(2232);
      assertNull(string0);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("com.google.javascript.jscomp.SourceFile$Preloaded", "com.google.javascript.jscomp.SourceFile$Preloaded");
      sourceFile_Preloaded0.getLine(1);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\nAct8al: ", "\nAct8al: ", "\nAct8al: ");
      Region region0 = sourceFile_Preloaded0.getRegion((-2469));
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertNotNull(region0);
      assertEquals(2, region0.getEndingLineNumber());
      assertEquals(1, region0.getBeginningLineNumber());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\nAc ual:", "\nAc ual:", "\nAc ual:");
      Region region0 = sourceFile_Preloaded0.getRegion(2003);
      assertNull(region0);
      assertFalse(sourceFile_Preloaded0.isExtern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded("\n", "\n");
      Region region0 = sourceFile_Preloaded0.getRegion((-34));
      assertEquals(2, region0.getEndingLineNumber());
      assertEquals("", region0.getSourceExcerpt());
      assertEquals(1, region0.getBeginningLineNumber());
      assertFalse(sourceFile_Preloaded0.isExtern());
      assertNotNull(region0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SourceFile.Generator sourceFile_Generator0 = mock(SourceFile.Generator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(sourceFile_Generator0).getCode();
      SourceFile.Generated sourceFile_Generated0 = new SourceFile.Generated("J83|=", sourceFile_Generator0);
      String string0 = sourceFile_Generated0.getCode();
      assertNotNull(string0);
      
      sourceFile_Generated0.getNumLines();
      assertFalse(sourceFile_Generated0.isExtern());
  }
}
