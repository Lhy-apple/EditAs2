/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:08:18 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.CodeConsumer;
import com.google.javascript.jscomp.CodeGenerator;
import com.google.javascript.rhino.Node;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CodeGenerator_ESTest extends CodeGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Node node0 = Node.newString(";");
      CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
      // Undeclared exception!
      try { 
        codeGenerator0.addLeftExpr(node0, 20, codeGenerator_Context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = CodeGenerator.regexpEscape("\u06DD\u070F\u1680\u17B4\u17B51\u180E");
      assertEquals("/\\u06dd\\u070f\\u1680\\u17b4\\u17b51\\u180e/", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      codeGenerator0.addList((Node) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null, charset0);
      // Undeclared exception!
      try { 
        codeGenerator0.tagAsStrict();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = CodeGenerator.escapeToDoubleQuotedJsString("!-->xuj");
      assertEquals("\"!--\\>xuj\"", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      // Undeclared exception!
      try { 
        codeGenerator0.addCaseBody((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Node node0 = Node.newNumber(1.0);
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      // Undeclared exception!
      try { 
        codeGenerator0.addAllSiblings(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      Node node0 = Node.newString("?<!--1]a7ikg5");
      CodeGenerator.Context codeGenerator_Context0 = CodeGenerator.Context.IN_FOR_INIT_CLAUSE;
      // Undeclared exception!
      try { 
        codeGenerator0.addLeftExpr(node0, 10, codeGenerator_Context0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = Node.newNumber(0.0);
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      // Undeclared exception!
      try { 
        codeGenerator0.addList(node0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.CodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CodeGenerator codeGenerator0 = new CodeGenerator((CodeConsumer) null);
      codeGenerator0.addAllSiblings((Node) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = CodeGenerator.jsString("'(2p ag\"o<!--cipt\n'", (CharsetEncoder) null);
      assertEquals("\"'(2p ag\\\"o<\\!--cipt\\n'\"", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = CodeGenerator.jsString("kAnn1\"fJ^GjJ47j", (CharsetEncoder) null);
      assertEquals("'kAnn1\"fJ^GjJ47j'", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = CodeGenerator.escapeToDoubleQuotedJsString("\r");
      assertEquals("\"\\r\"", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = CodeGenerator.regexpEscape("g>K8J?jgBuz@");
      assertEquals("/g>K8J?jgBuz@/", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = CodeGenerator.regexpEscape("#Y`NNt]>^UJl>7iff7?");
      assertEquals("/#Y`NNt]>^UJl>7iff7?/", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = CodeGenerator.escapeToDoubleQuotedJsString("!-r->xu");
      assertEquals("\"!-r->xu\"", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = CodeGenerator.escapeToDoubleQuotedJsString("g3y</scriptdm");
      assertEquals("\"g3y<\\/scriptdm\"", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = CodeGenerator.regexpEscape(" =E?z<ik&0");
      assertEquals("/ =E?z<ik&0/", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      String string0 = CodeGenerator.jsString("/{(c,U]82v##<!--LJ/", charsetEncoder0);
      assertEquals("\"/{(c,U]82v##<\\!--LJ/\"", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = CodeGenerator.identifierEscape("\n google/protobuf/descriptor.proto\u0012\u000Fgoogle.protobuf\"G\n\u0011FileDesriptorSet\u00122\n\u0004file\u0018\u0001 \u0003(\u000B2$.google.protobuf.FileDescriptorProto\"\u00DC\u0002\n\u0013FileDescriptorProto\u0012\f\n\u0004name\u0018\u0001 \u0001\t\u0012\u000F\n\u0007package\u0018\u0002 \u0001(\t\u0012\u0012\n\nependency\u0018\u0003 \u0003(\t\u00126\n\fmssage_type\u0018\u0004 \u0003(\u000B2 .google.protobuf.DescriptorProo\u00127\n\tenum_type\u0018\u0005 \u0003(\u000B2$.google.protobuf.EnumDescriptorProto\u00128\n\u0007service\u0018\u0006 \u0003(\u000B2'.google.protobuf.ServiceDescriptorProto\u00128\n\textension\u0018\u0007 \u0003(\u000B2%.google.p");
      assertEquals("\\u000a google/protobuf/descriptor.proto\\u0012\\u000fgoogle.protobuf\"G\\u000a\\u0011FileDesriptorSet\\u00122\\u000a\\u0004file\\u0018\\u0001 \\u0003(\\u000b2$.google.protobuf.FileDescriptorProto\"\\u00dc\\u0002\\u000a\\u0013FileDescriptorProto\\u0012\\u000c\\u000a\\u0004name\\u0018\\u0001 \\u0001\\u0009\\u0012\\u000f\\u000a\\u0007package\\u0018\\u0002 \\u0001(\\u0009\\u0012\\u0012\\u000a\\u000aependency\\u0018\\u0003 \\u0003(\\u0009\\u00126\\u000a\\u000cmssage_type\\u0018\\u0004 \\u0003(\\u000b2 .google.protobuf.DescriptorProo\\u00127\\u000a\\u0009enum_type\\u0018\\u0005 \\u0003(\\u000b2$.google.protobuf.EnumDescriptorProto\\u00128\\u000a\\u0007service\\u0018\\u0006 \\u0003(\\u000b2'.google.protobuf.ServiceDescriptorProto\\u00128\\u000a\\u0009extension\\u0018\\u0007 \\u0003(\\u000b2%.google.p", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = CodeGenerator.identifierEscape("");
      assertEquals("", string0);
  }
}
