/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:20:26 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.NameAnonymousFunctionsMapped;
import com.google.javascript.jscomp.RenameVars;
import com.google.javascript.jscomp.VariableMap;
import com.google.javascript.rhino.Node;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RenameVars_ESTest extends RenameVars_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.options_;
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      char[] charArray0 = new char[0];
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, true, true, variableMap0, charArray0, compilerOptions0.stripNameSuffixes);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      renameVars_ProcessVars0.incCount("M", (CompilerInput) null);
      Node node0 = compiler0.parseSyntheticCode("a:g}EP1", "M");
      renameVars0.process(node0, node0);
      assertEquals(12, Node.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.options_;
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      char[] charArray0 = new char[1];
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, variableMap0, charArray0, compilerOptions0.stripNameSuffixes);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      renameVars_ProcessVars0.incCount("&!", (CompilerInput) null);
      Node node0 = Node.newString("");
      renameVars0.process(node0, node0);
      assertEquals((-1), Node.CATCH_SCOPE_PROP);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.getOptions();
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, (VariableMap) null, (char[]) null, compilerOptions0.stripNamePrefixes);
      VariableMap variableMap0 = renameVars0.getVariableMap();
      assertNotNull(variableMap0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      RenameVars renameVars0 = new RenameVars(compiler0, "spo}$u$li", true, true, true, (VariableMap) null, (char[]) null, compilerOptions0.stripNameSuffixes);
      RenameVars.Assignment renameVars_Assignment0 = renameVars0.new Assignment((String) null, (CompilerInput) null);
      renameVars_Assignment0.setNewName("RU/zyDkM(yh&Dr");
      // Undeclared exception!
      try { 
        renameVars_Assignment0.setNewName((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      RenameVars renameVars0 = new RenameVars(compiler0, "w", true, true, true, (VariableMap) null, (char[]) null, (Set<String>) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.options_;
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      char[] charArray0 = new char[0];
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, true, true, variableMap0, charArray0, compilerOptions0.stripNameSuffixes);
      Node node0 = compiler0.parseSyntheticCode("a:g}EP1", "M");
      renameVars0.process(node0, node0);
      assertEquals(11, Node.USES_PROP);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      char[] charArray0 = new char[8];
      CompilerOptions compilerOptions0 = compiler0.options_;
      RenameVars renameVars0 = new RenameVars(compiler0, "O:W),`rWPDn\"0XG9", false, false, false, (VariableMap) null, charArray0, compilerOptions0.aliasableStrings);
      Node node0 = Node.newString(38, "", 2297, 67);
      // Undeclared exception!
      try { 
        renameVars0.process(node0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // prefix has invalid characters, must be one of: [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, _, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $]
         //
         verifyException("com.google.javascript.jscomp.NameGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.createDefaultOptions();
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, true, false, false, (VariableMap) null, (char[]) null, compilerOptions0.stripTypePrefixes);
      Node node0 = compiler0.parseSyntheticCode((String) null, "com.google.javascript.jscomp.RenameVars$Assignment");
      renameVars0.process(node0, node0);
      assertEquals(46, Node.IS_NAMESPACE);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.createDefaultOptions();
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, (VariableMap) null, (char[]) null, compilerOptions0.stripNameSuffixes);
      Node node0 = compiler0.parseSyntheticCode((String) null, "com.google.javascript.jscomp.RenameVars$ProcessVars");
      renameVars0.process(node0, node0);
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      NameAnonymousFunctionsMapped nameAnonymousFunctionsMapped0 = new NameAnonymousFunctionsMapped(compiler0);
      VariableMap variableMap0 = nameAnonymousFunctionsMapped0.getFunctionMap();
      char[] charArray0 = new char[0];
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, true, true, variableMap0, charArray0, compilerOptions0.stripNameSuffixes);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      renameVars_ProcessVars0.incCount("&M", (CompilerInput) null);
      renameVars_ProcessVars0.incCount("&M", (CompilerInput) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.createDefaultOptions();
      RenameVars renameVars0 = new RenameVars(compiler0, "js9kV", true, false, false, (VariableMap) null, (char[]) null, compilerOptions0.aliasableStrings);
      Node node0 = compiler0.parseSyntheticCode((String) null, "");
      renameVars0.process(node0, node0);
      assertEquals(9, Node.FIXUPS_PROP);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = compiler0.createDefaultOptions();
      RenameVars renameVars0 = new RenameVars(compiler0, (String) null, false, false, false, (VariableMap) null, (char[]) null, compilerOptions0.stripTypePrefixes);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      renameVars_ProcessVars0.incCount("", (CompilerInput) null);
      Node node0 = compiler0.parseSyntheticCode("", "");
      renameVars0.process(node0, node0);
      renameVars0.process(node0, node0);
      assertFalse(node0.hasMoreThanOneChild());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      CompilerOptions compilerOptions0 = new CompilerOptions();
      RenameVars renameVars0 = new RenameVars(compiler0, "", false, false, false, (VariableMap) null, (char[]) null, compilerOptions0.stripTypePrefixes);
      RenameVars.ProcessVars renameVars_ProcessVars0 = renameVars0.new ProcessVars(false);
      renameVars_ProcessVars0.incCount("L L com.google.javascript.jscomp.CollapseVariableDeclarations$GatherCollapses", (CompilerInput) null);
      Node node0 = Node.newNumber(0.0);
      renameVars0.process(node0, node0);
      assertEquals(39, Node.EMPTY_BLOCK);
  }
}
