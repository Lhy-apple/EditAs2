/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:03:12 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FunctionRewriter;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionRewriter_ESTest extends FunctionRewriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_identityFn() {  return function(JSCompiler_identityFn_value) {return JSCompiler_identityFn_value}}", "function JSCompiler_identityFn() {  return function(JSCompiler_identityFn_value) {return JSCompiler_identityFn_value}}");
      functionRewriter0.process(node0, node0);
      assertTrue(node0.isSyntheticBlock());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_emptyFn() {  return function() {}}", "function JSCompiler_emptyFn() {  return function() {}}");
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      functionRewriter0.process(node0, node0);
      assertTrue(node0.isSyntheticBlock());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_emptyFn() {  return function() {}}", "function JSCompiler_emptyFn() {  return function() {}}");
      Node node1 = Normalize.parseAndNormalizeTestCode(compiler0, "T}dN(549^Gcb:", "T}dN(549^Gcb:");
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      functionRewriter0.process(node1, node0);
      assertEquals(8, Node.FLAG_NO_THROWS);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompile_set(JSCompiler_set_name) {  return function(JSCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}", "function JSCompile_set(JSCompiler_set_name) {  return function(JSCompiler_set_value) {this[JSCompiler_set_name] = JSCompiler_set_value}}");
      functionRewriter0.process(node0, node0);
      assertEquals(4, Node.ENUM_PROP);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("function JSCompiler_get(JSCompiler_get_name) {  return function() {return this[JSCompiler_get_name]}}");
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      functionRewriter0.process(node0, node0);
      assertEquals((-2), Node.OBJECT_IDS_PROP);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_identityFn() {  return function(JSCompiler_identityFn_value) {return JSCompiler.identityFn_value}}", "function JSCompiler_identityFn() {  return function(JSCompiler_identityFn_value) {return JSCompiler.identityFn_value}}");
      functionRewriter0.process(node0, node0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      FunctionRewriter functionRewriter0 = new FunctionRewriter(compiler0);
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "function JSCompiler_identityFn() {  return function(JSCompiler_identityFn_value) {return JSCompiler_identityFn_vlue}}", "function JSCompiler_identityFn() {  return function(JSCompiler_identityFn_value) {return JSCompiler_identityFn_vlue}}");
      functionRewriter0.process(node0, node0);
      assertEquals(53, Node.LAST_PROP);
  }
}
