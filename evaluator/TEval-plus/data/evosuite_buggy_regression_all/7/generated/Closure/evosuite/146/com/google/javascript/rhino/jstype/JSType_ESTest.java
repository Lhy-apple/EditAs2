/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:22:36 GMT 2023
 */

package com.google.javascript.rhino.jstype;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionPrototypeType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import com.google.javascript.rhino.testing.EmptyScope;
import java.util.HashMap;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JSType_ESTest extends JSType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderShallowEquality(booleanType0);
      jSType_TypePair0.typeB.getTypesUnderEquality(jSType_TypePair0.typeA);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(booleanType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isResolved();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      boolean boolean0 = instanceObjectType0.isStringValueType();
      assertFalse(instanceObjectType0.isResolved());
      assertFalse(boolean0);
      assertTrue(noType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      boolean boolean0 = stringType0.isBooleanObjectType();
      assertFalse(boolean0);
      assertFalse(stringType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      booleanType0.getJSDocInfo();
      assertFalse(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      String string0 = numberType0.toDebugHashCodeString();
      assertEquals("{1}", string0);
      assertFalse(numberType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      boolean boolean0 = booleanType0.isRegexpType();
      assertFalse(boolean0);
      assertFalse(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = booleanType0.isString();
      assertFalse(booleanType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = booleanType0.isDateType();
      assertFalse(booleanType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
      assertFalse(jSType0.isEnumElementType());
      
      booleanType0.getTypesUnderEquality(jSType0);
      assertFalse(jSType0.isNullType());
      assertFalse(jSType0.isVoidType());
      assertFalse(jSType0.isResolved());
      assertFalse(booleanType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.isStringObjectType();
      assertFalse(boolean0);
      assertFalse(voidType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = booleanType0.isNumberObjectType();
      assertFalse(booleanType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        stringType0.isNullable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      booleanType0.unboxesTo();
      assertFalse(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      EnumElementType enumElementType0 = new EnumElementType(jSTypeRegistry0, booleanType0, "Named type with empty name component");
      boolean boolean0 = booleanType0.canTestForEqualityWith(enumElementType0);
      assertTrue(enumElementType0.hasCachedValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, "");
      boolean boolean0 = templateType0.isConstructor();
      assertFalse(boolean0);
      assertFalse(templateType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = booleanType0.isArrayType();
      assertFalse(booleanType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      JSType[] jSTypeArray0 = new JSType[1];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) unknownType0, false, jSTypeArray0);
      boolean boolean0 = functionType0.isBooleanValueType();
      assertFalse(boolean0);
      assertFalse(functionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = booleanType0.canBeCalled();
      assertFalse(boolean0);
      assertFalse(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        stringType0.isNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      boolean boolean0 = unknownType0.isTemplateType();
      assertFalse(boolean0);
      assertFalse(unknownType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      NoType noType0 = new NoType(jSTypeRegistry0);
      boolean boolean0 = noType0.isNamedType();
      assertFalse(boolean0);
      assertFalse(noType0.isResolved());
      assertTrue(noType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      jSType0.matchesInt32Context();
      assertFalse(jSType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      EnumType enumType0 = new EnumType(jSTypeRegistry0, "Not declared as a type name", voidType0);
      ObjectType objectType0 = enumType0.getImplicitPrototype();
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, objectType0, objectType0);
      boolean boolean0 = parameterizedType0.isInterface();
      assertFalse(parameterizedType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = booleanType0.isInstanceType();
      assertFalse(boolean0);
      assertFalse(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      PrototypeObjectType prototypeObjectType0 = new PrototypeObjectType(jSTypeRegistry0, (String) null, (ObjectType) null, false);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(prototypeObjectType0, (JSType) null);
      boolean boolean0 = parameterizedType0.isCheckedUnknownType();
      assertFalse(parameterizedType0.isResolved());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      assertFalse(errorFunctionType0.isResolved());
      
      errorFunctionType0.resolveInternal(simpleErrorReporter0, (StaticScope<JSType>) null);
      assertTrue(errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = booleanType0.isTheObjectType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      RecordType recordType0 = jSTypeRegistry0.createRecordType(hashMap0);
      errorFunctionType0.getTypesUnderShallowEquality(recordType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      boolean boolean0 = stringType0.matchesUint32Context();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      AllType allType0 = new AllType(jSTypeRegistry0);
      boolean boolean0 = allType0.matchesNumberContext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderInequality(booleanType0);
      JSType[] jSTypeArray0 = new JSType[0];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs(jSType_TypePair0.typeB, jSTypeArray0);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(functionType0, jSType_TypePair0.typeA);
      boolean boolean0 = parameterizedType0.isEnumType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "$u-{");
      boolean boolean0 = errorFunctionType0.isNumberValueType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      EmptyScope emptyScope0 = new EmptyScope();
      booleanType0.forceResolve(simpleErrorReporter0, emptyScope0);
      assertTrue(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      booleanType0.forgiveUnknownNames();
      assertFalse(booleanType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      booleanType0.clearResolved();
      assertFalse(booleanType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MW2B6P");
      boolean boolean0 = errorFunctionType0.isFunctionPrototypeType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MWB6P");
      FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = functionPrototypeType0.getLeastSupertype(booleanType0);
      String string0 = ((UnionType) jSType0).toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, true);
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = unknownType0.getTypesUnderShallowInequality(noObjectType0);
      assertFalse(noObjectType0.isVoidType());
      assertFalse(noObjectType0.isNullType());
      
      NoObjectType noObjectType1 = (NoObjectType)JSType.getLeastSupertype(jSType_TypePair0.typeB, jSType_TypePair0.typeB);
      assertFalse(noObjectType1.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, (String) null);
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(errorFunctionType0, errorFunctionType0);
      errorFunctionType0.getTypesUnderShallowEquality(parameterizedType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Named type with empty name component", 0, 0);
      EmptyScope emptyScope0 = new EmptyScope();
      JSType jSType0 = namedType0.resolveInternal(simpleErrorReporter0, emptyScope0);
      JSType.getGreatestSubtype(jSType0, jSType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = JSType.isEquivalent((JSType) null, (JSType) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = JSType.isEquivalent(voidType0, (JSType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = JSType.isEquivalent(voidType0, voidType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null, false);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      boolean boolean0 = voidType0.equals(jSTypeRegistry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, true);
      boolean boolean0 = booleanType0.equals(unknownType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = voidType0.findPropertyType("G6grc2@[MM(u");
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      JSType jSType0 = stringType0.findPropertyType("x[!;2x)w&0%7f^7");
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      BooleanType booleanType1 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = booleanType1.canAssignTo(booleanType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderInequality(booleanType0);
      boolean boolean0 = jSType_TypePair0.typeA.canAssignTo(jSType_TypePair0.typeB);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ObjectType objectType0 = booleanType0.dereference();
      assertFalse(objectType0.isUnionType());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderEquality(allType0);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      ObjectType objectType0 = voidType0.dereference();
      assertNotNull(objectType0);
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderInequality(objectType0);
      assertFalse(objectType0.hasCachedValues());
      
      jSType_TypePair0.typeA.getTypesUnderShallowInequality(voidType0);
      assertTrue(objectType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, "Unknown class name", "Named type with empty name component", 0, 0);
      EmptyScope emptyScope0 = new EmptyScope();
      JSType jSType0 = namedType0.resolveInternal(simpleErrorReporter0, emptyScope0);
      booleanType0.getTypesUnderEquality(jSType0);
      assertTrue(namedType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderInequality(booleanType0);
      JSType jSType0 = jSTypeRegistry0.createDefaultObjectUnion(jSType_TypePair0.typeB);
      EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a constructor", jSType0);
      enumType0.testForEquality(jSType0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "$u-{");
      FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = functionPrototypeType0.getLeastSupertype(booleanType0);
      StringType stringType0 = new StringType(jSTypeRegistry0);
      stringType0.testForEquality(jSType0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      boolean boolean0 = unknownType0.canTestForShallowEqualityWith(unknownType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      boolean boolean0 = booleanType0.canTestForShallowEqualityWith(stringType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderInequality(voidType0);
      boolean boolean0 = jSType_TypePair0.typeB.canTestForShallowEqualityWith(noType0);
      assertTrue(noType0.hasCachedValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "MW2B6P");
      FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      JSType jSType0 = functionPrototypeType0.getLeastSupertype(unionType0);
      assertFalse(jSType0.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      JSType jSType0 = unionType0.getLeastSupertype(allType0);
      assertSame(jSType0, allType0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Not declared as a type name");
      NoType noType0 = (NoType)errorFunctionType0.getGreatestSubtype(booleanType0);
      booleanType0.getTypesUnderShallowEquality(noType0);
      assertTrue(errorFunctionType0.hasCachedValues());
      assertFalse(noType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      AllType allType0 = new AllType(jSTypeRegistry0);
      JSType jSType0 = booleanType0.getGreatestSubtype(allType0);
      assertEquals(1, JSType.ENUMDECL);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      UnknownType unknownType0 = new UnknownType((JSTypeRegistry) null, false);
      // Undeclared exception!
      try { 
        stringType0.getGreatestSubtype(unknownType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createOptionalNullableType(booleanType0);
      JSType.TypePair jSType_TypePair0 = jSType0.getTypesUnderShallowEquality(jSType0);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = booleanType0.autoboxesTo();
      JSType jSType1 = booleanType0.getLeastSupertype(jSType0);
      Node node0 = Node.newString("", 0, 0);
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, jSType0);
      JSType jSType2 = JSType.getGreatestSubtype(jSType1, (JSType) arrowType0);
      assertTrue(jSType2.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Unknown class name");
      JSType jSType0 = jSTypeRegistry0.createOptionalType(booleanType0);
      errorFunctionType0.getTypesUnderShallowEquality(jSType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringType stringType0 = new StringType((JSTypeRegistry) null);
      BooleanType booleanType0 = new BooleanType((JSTypeRegistry) null);
      // Undeclared exception!
      try { 
        stringType0.getGreatestSubtype(booleanType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.jstype.JSType", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "ykpt47f:iE");
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      JSType jSType0 = numberType0.autoboxesTo();
      errorFunctionType0.getTypesUnderShallowEquality(jSType0);
      assertTrue(errorFunctionType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType jSType0 = voidType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertTrue(jSType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      NumberType numberType0 = new NumberType((JSTypeRegistry) null);
      JSType jSType0 = numberType0.getRestrictedTypeGivenToBooleanOutcome(true);
      assertFalse(jSType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderInequality(jSType0);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderInequality(voidType0);
      assertNotNull(jSType_TypePair0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      JSType jSType0 = jSTypeRegistry0.createNullableType(booleanType0);
      JSType.TypePair jSType_TypePair0 = unknownType0.getTypesUnderShallowInequality(jSType0);
      JSType.TypePair jSType_TypePair1 = jSType_TypePair0.typeB.getTypesUnderShallowInequality(jSType0);
      assertNotSame(jSType_TypePair0, jSType_TypePair1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      NoType noType0 = new NoType(jSTypeRegistry0);
      JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderInequality(voidType0);
      jSType_TypePair0.typeB.getTypesUnderShallowInequality(jSType_TypePair0.typeA);
      assertTrue(noType0.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, false);
      boolean boolean0 = unknownType0.differsFrom(unknownType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("Named type with empty name component", "Named type with empty name component", 0, 302);
      boolean boolean0 = booleanType0.differsFrom(jSType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "Named type with empty name component");
      boolean boolean0 = errorFunctionType0.differsFrom(booleanType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      boolean boolean0 = booleanType0.differsFrom(booleanType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType jSType0 = jSTypeRegistry0.createNamedType("Unknown class name", "", 0, 2);
      boolean boolean0 = JSType.isSubtype(jSType0, jSType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, "");
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertFalse(allType0.isFunctionType());
      
      boolean boolean0 = errorFunctionType0.isSubtype(allType0);
      assertTrue(boolean0);
  }
}
