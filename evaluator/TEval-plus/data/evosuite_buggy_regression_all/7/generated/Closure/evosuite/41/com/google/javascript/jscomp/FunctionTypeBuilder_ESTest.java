/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:00:46 GMT 2023
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FunctionTypeBuilder;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FunctionTypeBuilder_ESTest extends FunctionTypeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, 0);
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      functionTypeBuilder_AstFunctionContents0.getSourceNode();
      assertFalse(functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, 0, (-675));
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      assertFalse(functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns());
      
      functionTypeBuilder_AstFunctionContents0.recordNonEmptyReturn();
      assertTrue(functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("^b1F,r");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("^b1F,r", compiler0, node0, "^b1F,r", (Scope) null);
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setContents(functionTypeBuilder_AstFunctionContents0);
      // Undeclared exception!
      try { 
        functionTypeBuilder1.buildAndRegister();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // All Function types must have params and a return type
         //
         verifyException("com.google.javascript.jscomp.FunctionTypeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FunctionTypeBuilder.UnknownFunctionContents functionTypeBuilder_UnknownFunctionContents0 = new FunctionTypeBuilder.UnknownFunctionContents();
      Iterable<String> iterable0 = functionTypeBuilder_UnknownFunctionContents0.getEscapedVarNames();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FunctionTypeBuilder.UnknownFunctionContents functionTypeBuilder_UnknownFunctionContents0 = new FunctionTypeBuilder.UnknownFunctionContents();
      boolean boolean0 = functionTypeBuilder_UnknownFunctionContents0.mayBeFromExterns();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_TIS_TYP_NON_OBJECT", "JSC_TIS_TYP_NON_OBJECT");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_TIS_TYP_NON_OBJECT", compiler0, node0, "JSC_TIS_TYP_NON_OBJECT", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
      FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
      functionTypeBuilder1.inferFromOverriddenFunction(functionType0, node0);
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(functionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("^b1F,r");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder((String) null, compiler0, node0, "^b1F,r", (Scope) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("#%@LHA7ltZ=yt q");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("#%@LHA7ltZ=yt q", compiler0, node0, "#%@LHA7ltZ=yt q", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setContents((FunctionTypeBuilder.FunctionContents) null);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("JSC_THIS_TYPENON_OBJECT");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_THIS_TYPENON_OBJECT", compiler0, node0, "JSC_THIS_TYPENON_OBJECT", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction((FunctionType) null, node0);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_TIS_TYP_NON_OBJECT", "JSC_TIS_TYP_NON_OBJECT");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_TIS_TYP_NON_OBJECT", compiler0, node0, "JSC_TIS_TYP_NON_OBJECT", (Scope) null);
      functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
      FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
      functionTypeBuilder0.inferFromOverriddenFunction(functionType0, (Node) null);
      assertFalse(functionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("", compiler0, node0, "", (Scope) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      JSType[] jSTypeArray0 = new JSType[5];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("(hY:?ea", compiler0, node0, "(hY:?ea", (Scope) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      JSType[] jSTypeArray0 = new JSType[5];
      Node node1 = jSTypeRegistry0.createParameters(jSTypeArray0);
      functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("", compiler0, node0, "", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType((JSDocInfo) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_THIS_TYPE_NON_OBJECT", "JSC_THIS_TYPE_NON_OBJECT");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_THIS_TYPE_NON_OBJECT", compiler0, node0, "JSC_THIS_TYPE_NON_OBJECT", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType(jSDocInfo0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("JSC_THIS_TYPE_NN_OBJEaT");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_THIS_TYPE_NN_OBJEaT", compiler0, node0, "JSC_THIS_TYPE_NN_OBJEaT", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferInheritance((JSDocInfo) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_THIS_TYPE_NON_OBJECT", "JSC_THIS_TYPE_NON_OBJECT");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_THIS_TYPE_NON_OBJECT", compiler0, node0, "JSC_THIS_TYPE_NON_OBJECT", (Scope) null);
      functionTypeBuilder0.inferInheritance(jSDocInfo0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_TIS_TYP_NON_OBJECT", "JSC_TIS_TYP_NON_OBJECT");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_TIS_TYP_NON_OBJECT", compiler0, node0, "JSC_TIS_TYP_NON_OBJECT", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
      FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
      functionTypeBuilder1.inferThisType(jSDocInfo0, functionType0);
      functionTypeBuilder0.inferThisType(jSDocInfo0, functionType0);
      assertFalse(functionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("f ");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("f ", compiler0, node0, "f ", (Scope) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, (JSType) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("JSC_THIS_TYPENON_OBJECT");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_THIS_TYPENON_OBJECT", compiler0, node0, "JSC_THIS_TYPENON_OBJECT", (Scope) null);
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType((JSDocInfo) null, functionType0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("ZF;7 z89^vu");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("ZF;7 z89^vu", compiler0, node0, "ZF;7 z89^vu", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, jSDocInfo0);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("", compiler0, node0, "", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes((Node) null, (JSDocInfo) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_THIS_TYPE_NON_OBJECT", "JSC_THIS_TYPE_NON_OBJECT");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_THIS_TYPE_NON_OBJECT", compiler0, node0, "JSC_THIS_TYPE_NON_OBJECT", (Scope) null);
      Node node1 = node0.removeChildren();
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node1, (JSDocInfo) null);
      functionTypeBuilder1.inferParameterTypes(node1, (JSDocInfo) null);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("_", "_");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("_", compiler0, node0, "_", (Scope) null);
      Node node1 = node0.removeChildren();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_THIS_TYPE_NON_OBJECT", "JSC_THIS_TYPE_NON_OBJECT");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_THIS_TYPE_NON_OBJECT", compiler0, node0, "JSC_THIS_TYPE_NON_OBJECT", (Scope) null);
      Node node1 = node0.removeChildren();
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      JSType[] jSTypeArray0 = new JSType[5];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) null, jSTypeArray0);
      functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
      functionTypeBuilder0.inferParameterTypes(node1, (JSDocInfo) null);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("JSC_THIS_TYPE_NON_OBJECT");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_THIS_TYPE_NON_OBJECT", compiler0, node0, "JSC_THIS_TYPE_NON_OBJECT", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName((JSDocInfo) null);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_THIS_TYPE_NON_OBJECT", "JSC_THIS_TYPE_NON_OBJECT");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_THIS_TYPE_NON_OBJECT", compiler0, node0, "JSC_THIS_TYPE_NON_OBJECT", (Scope) null);
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName(jSDocInfo0);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseSyntheticCode("JSC_TIS_TYP_NON_OBJECT", "JSC_TIS_TYP_NON_OBJECT");
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder("JSC_TIS_TYP_NON_OBJECT", compiler0, node0, "JSC_TIS_TYP_NON_OBJECT", (Scope) null);
      functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
      functionTypeBuilder0.buildAndRegister();
      FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
      assertFalse(functionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      boolean boolean0 = FunctionTypeBuilder.isFunctionTypeDeclaration(jSDocInfo0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Node node0 = Node.newNumber(0.0, (-638), (-638));
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      functionTypeBuilder_AstFunctionContents0.recordEscapedVarName((String) null);
      functionTypeBuilder_AstFunctionContents0.getEscapedVarNames();
      assertFalse(functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = compiler0.parseTestCode("^b1F,r");
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      Iterable<String> iterable0 = functionTypeBuilder_AstFunctionContents0.getEscapedVarNames();
      assertNotNull(iterable0);
      assertFalse(functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents((Node) null);
      functionTypeBuilder_AstFunctionContents0.recordEscapedVarName((String) null);
      functionTypeBuilder_AstFunctionContents0.recordEscapedVarName("Q");
      assertFalse(functionTypeBuilder_AstFunctionContents0.mayHaveNonEmptyReturns());
  }
}
