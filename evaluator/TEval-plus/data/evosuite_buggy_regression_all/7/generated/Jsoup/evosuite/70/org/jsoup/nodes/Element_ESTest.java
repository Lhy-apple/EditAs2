/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:27:30 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("multiple");
      // Undeclared exception!
      try { 
        document0.wrap("checkbox");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("0gqo");
      document0.appendText("0gqo");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("i<w}kXGUG>P`V|wM");
      document0.prepend("i<w}kXGUG>P`V|wM");
      document0.getElementsMatchingText("<html>\n <head></head>\n <body></body>\n</html>");
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Element element0 = new Element("multiple");
      // Undeclared exception!
      try { 
        element0.child(447);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 447, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      document0.prependText("org.jsoup.nodes.Element$NodeList");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("noscrip#t");
      Element element0 = document0.tagName("noscrip#t");
      assertEquals("noscrip#t", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      document0.title("textarea");
      String string0 = document0.html();
      assertEquals("<html>\n <head>\n  <title>textarea</title>\n </head>\n <body></body>\n</html>", string0);
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("nKp\"Q*4GM");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("nKp\"Q*4GM", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("cqEH3E");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Element element0 = new Element("multiple");
      element0.html("multiple");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("Digle");
      Element element0 = document0.attr("Digle", true);
      assertEquals("Digle", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      document0.getElementsByAttributeValue("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("jd8A!z0oqdE");
      document0.getElementsByAttributeValueStarting("jd8A!z0oqdE", "mz/*=YnFuxN");
      assertEquals(1, document0.childNodeSize());
      assertEquals("jd8A!z0oqdE", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("multiple");
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.html();
      assertEquals("multiple", document1.baseUri());
      assertEquals("<html>\n <head>\n  <meta charset=\"UTF-8\" />\n </head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("cqEH3E");
      Elements elements0 = document0.getElementsMatchingOwnText("6?D");
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("cqEH3E", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("YtOnLpTeFTzP5{");
      // Undeclared exception!
      try { 
        document0.after("YtOnLpTeFTzP5{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("(rQ3duS&>-$i;QBx");
      Elements elements0 = document0.getElementsByIndexLessThan(66);
      assertEquals(1, document0.childNodeSize());
      assertEquals("(rQ3duS&>-$i;QBx", document0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("Wfx8ja~c&5gm;>");
      Document document1 = document0.normalise();
      Element element0 = document1.appendChild(document0);
      element0.lastElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("v0<)5~VF/U");
      document0.getElementsByAttributeStarting("v0<)5~VF/U");
      assertEquals("v0<)5~VF/U", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("mualtiple");
      document0.getElementsByAttributeValueMatching("mualtiple", "mualtiple");
      assertEquals("mualtiple", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("cqEH3E");
      document0.is("cqEH3E");
      assertEquals("cqEH3E", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("0{Y+hA~0jg|8Coa");
      document0.getElementsByAttributeValueEnding("0{Y+hA~0jg|8Coa", "0{Y+hA~0jg|8Coa");
      assertEquals("0{Y+hA~0jg|8Coa", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Element element0 = new Element("multiple");
      Elements elements0 = element0.getElementsByAttributeValueContaining("multiple", "multiple");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("=U5%J^m6p%Fu NgaS;");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("0{Y+hA~0jg|8Coa");
      document0.setBaseUri("0{Y+hA~0jg|8Coa");
      assertEquals("0{Y+hA~0jg|8Coa", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Element element0 = new Element("ultipln");
      Element element1 = element0.clone();
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Document.createShell("Queue did not match expected sequence");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("Queue did not match expected sequence", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document(":OR9v(+{ig)");
      document0.getElementsByAttributeValueNot(":OR9v(+{ig)", "inert");
      assertEquals(":OR9v(+{ig)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("Ln`9TYu#qq");
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertEquals("Ln`9TYu#qq", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      document0.getElementsByAttribute("org.jsoup.nodes.Element$NodeList");
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("multiple");
      Element element0 = document0.removeClass("multiple");
      assertEquals("multiple", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("title");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("title", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell(">cR |I)K&-<5F59\"+2~");
      // Undeclared exception!
      try { 
        document0.selectFirst(">cR |I)K&-<5F59\"+2~");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '|I)K&-<5F59\"': unexpected token at '|I)K&-<5F59\"'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell(":matchesOwn");
      Elements elements0 = document0.getElementsByIndexGreaterThan(54);
      assertEquals(":matchesOwn", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("80LgU");
      Element element0 = document0.head();
      assertEquals(0, element0.siblingIndex());
      
      element0.before("V%H4l<Vq`");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(3)", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("o");
      Element element0 = document0.head();
      element0.prepend("o");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.head();
      element0.replaceWith(document0);
      document0.getElementsByIndexEquals((-319));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("Wfx8ja~c&5gm;>");
      document0.append("E|");
      Element element0 = document0.appendChild(document0);
      element0.lastElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertEquals("Wfx8ja~c&5gm;>", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("w");
      Element element0 = document0.append("#document");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(2, document0.childNodeSize());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("Ln`9TYu#qq");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
      assertEquals("Ln`9TYu#qq", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("title");
      Elements elements0 = document0.siblingElements();
      // Undeclared exception!
      try { 
        document0.insertChildren(4, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("%");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1385), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("rFU#S>D+lg");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals("rFU#S>D+lg", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("feV|");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren(10, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Document.createShell("org.jsou.nodes.Elment$NodeList");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1433506051), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("title");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(0, nodeArray0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("title", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.toggleClass("");
      document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("80LgU");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("80LgU", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("multipl$");
      document0.appendTo(document0);
      document0.siblingElements();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("keygen");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("keygen", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("");
      document0.reparentChild(document0);
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("Wfx8j-~c&5gm;Op)");
      document0.normalise();
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("Wfxs-8ja~c&5gm;>");
      document0.reparentChild(document0);
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("Wfxs-8ja~c&5gm;>", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("w");
      document0.previousElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("w", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("Wfxs-8ja~c&5gm;>");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      assertNotNull(element1);
      assertEquals(0, element1.siblingIndex());
      assertEquals("Wfxs-8ja~c&5gm;>", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      document0.setParentNode(document0);
      Element element0 = document0.firstElementSibling();
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("o");
      Element element0 = document0.head();
      Element element1 = element0.firstElementSibling();
      assertEquals("o", element1.baseUri());
      assertNotNull(element1);
      assertEquals("head", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("cqEH3E");
      Element element0 = document0.getElementById("cqEH3E");
      assertEquals(1, document0.childNodeSize());
      assertEquals("cqEH3E", document0.baseUri());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("jMM0N,qu");
      DataNode dataNode0 = new DataNode("jMM0N,qu");
      document0.prependChild(dataNode0);
      Elements elements0 = document0.getElementsContainingText("jMM0N,qu");
      assertEquals("jMM0N,qu", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("$k2g");
      document0.title("$k2g");
      Elements elements0 = document0.getElementsContainingOwnText("$k2g");
      assertEquals(1, elements0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("$k2g", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("mualtiple");
      Comment comment0 = new Comment("c0!INO6\"CbOA{;#`N");
      document0.appendChild(comment0);
      document0.getElementsContainingOwnText("mualtiple");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      boolean boolean0 = Element.preserveWhitespace(textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.text("R:t<7x7");
      boolean boolean0 = element0.hasText();
      assertTrue(boolean0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      document1.title("");
      boolean boolean0 = document0.hasText();
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell("Wfx8ja~c&5gm;>");
      Comment comment0 = new Comment("Wfx8ja~c&5gm;>");
      document0.appendChild(comment0);
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = Document.createShell("Wfx8ja~c&5gm;>");
      Comment comment0 = new Comment("Wfx8ja~c&5gm;>");
      document0.appendChild(comment0);
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Document.createShell("jd8A!z0oqdE");
      document0.text("jd8A!z0oqdE");
      document0.data();
      assertEquals("jd8A!z0oqdE", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      document0.toggleClass("org.jsoup.nodes.Element$NodeList");
      Elements elements0 = document0.getElementsByClass("org.jsoup.nodes.Element$NodeList");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      document0.addClass("Tag name must not be empty.");
      Elements elements0 = document0.getElementsByClass("Tag name must not be empty.");
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals("Tag name must not be empty.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = Document.createShell("80L4gU");
      document0.toggleClass("80L4gU");
      Element element0 = document0.addClass("dt");
      Elements elements0 = element0.getElementsByClass("dt");
      assertEquals(1, elements0.size());
      assertEquals("80L4gU", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = Document.createShell("mulZipl7");
      document0.addClass("mulZipl7");
      document0.toggleClass(" > ");
      Elements elements0 = document0.getElementsByClass(" > ");
      assertEquals("mulZipl7", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("80L4gU");
      document0.toggleClass("80L4gU");
      document0.toggleClass("tag name must not be empty.");
      Elements elements0 = document0.getElementsByClass("dt");
      assertEquals("80L4gU", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("80L4gU");
      document0.toggleClass("80L4gU");
      Element element0 = document0.addClass("dt");
      document0.toggleClass("tag name must not be empty.");
      Elements elements0 = element0.getElementsByClass("dt");
      assertEquals("80L4gU", element0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      document0.addClass("'S&M");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element$NodeList");
      Element element1 = element0.toggleClass("org.jsoup.nodes.Element$NodeList");
      assertEquals("org.jsoup.nodes.Element$NodeList", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell("Wfxs-8ja~c&5gm;>");
      document0.val();
      assertEquals(1, document0.childNodeSize());
      assertEquals("Wfxs-8ja~c&5gm;>", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "}hiy{jeQFKT+`'-|YS", attributes0);
      formElement0.val();
      assertEquals("}hiy{jeQFKT+`'-|YS", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = Document.createShell("Wfx8ja~c&5gm;>");
      Element element0 = document0.val("Wfx8ja~c&5gm;>");
      assertEquals(1, element0.childNodeSize());
      assertEquals("Wfx8ja~c&5gm;>", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "mult7ple", attributes0);
      element0.val("V]Nmy]7Md<3wcEpd<");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = Document.createShell("code");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.html();
      assertEquals("<html><head></head><body></body></html>", string0);
      assertEquals("code", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Element element0 = new Element("br");
      MockFileWriter mockFileWriter0 = new MockFileWriter(":nth-child(%d)");
      element0.outerHtmlHead(mockFileWriter0, (-482), document_OutputSettings0);
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("0{Y+hA~0jg|8Coa");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      Element element0 = document0.createElement("br");
      File file0 = MockFile.createTempFile(":nth-child(%d)", "0{Y+hA~0jg|8Coa");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      element0.outerHtmlHead(mockFileWriter0, 12, document_OutputSettings0);
      assertEquals("0{Y+hA~0jg|8Coa", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      document0.outputSettings(document_OutputSettings0);
      document0.title("textarea");
      String string0 = document0.html();
      assertEquals("<html>\n <head>\n  <title>textarea</title>\n </head>\n <body></body>\n</html>", string0);
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = Document.createShell("0{Y;+h~0jg|8Coa");
      MockFileWriter mockFileWriter0 = new MockFileWriter(":nth-child(%d)");
      document0.html((Appendable) mockFileWriter0);
      assertEquals("0{Y;+h~0jg|8Coa", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.clone();
      assertNotSame(document1, document0);
  }
}
