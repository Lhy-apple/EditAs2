/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:18:43 GMT 2023
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.InputStream;
import java.nio.charset.IllegalCharsetNameException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.helper.DataUtil;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DataUtil_ESTest extends DataUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        DataUtil.load((InputStream) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.DataUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      // Undeclared exception!
      try { 
        DataUtil.load((InputStream) null, "+Q", "+Q", parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.DataUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      File file0 = MockFile.createTempFile("p;~0ZfLK]W1Vn)m.q", "p;~0ZfLK]W1Vn)m.q");
      Document document0 = DataUtil.load(file0, (String) null, "p;~0ZfLK]W1Vn)m.q");
      assertEquals("p;~0ZfLK]W1Vn)m.q", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        DataUtil.load((File) null, "? t1GNt", "? t1GNt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      File file0 = MockFile.createTempFile("p;~0ZfLK]W1Vn)m.q", "p;~0ZfLK]W1Vn)m.q");
      // Undeclared exception!
      try { 
        DataUtil.load(file0, "p;~0ZfLK]W1Vn)m.q", "p;~0ZfLK]W1Vn)m.q");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // p;~0ZfLK]W1Vn)m.q
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/p;~0ZfLK]W1Vn)m.q0p;~0ZfLK]W1Vn)m.q");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "p;~0ZfLK]W1Vn)m.q");
      File file0 = MockFile.createTempFile("p;~0ZfLK]W1Vn)m.q", "p;~0ZfLK]W1Vn)m.q");
      Document document0 = DataUtil.load(file0, "UTF-8", "p;~0ZfLK]W1Vn)m.q");
      assertEquals("p;~0ZfLK]W1Vn)m.q", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String string0 = DataUtil.getCharsetFromContentType("p;~0ZfLK]W1Vn)m.q");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = DataUtil.getCharsetFromContentType((String) null);
      assertNull(string0);
  }
}
