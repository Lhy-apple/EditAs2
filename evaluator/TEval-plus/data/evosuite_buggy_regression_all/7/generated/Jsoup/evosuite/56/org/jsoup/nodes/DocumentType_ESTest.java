/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:23:09 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.OutputStreamWriter;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DocumentType_ESTest extends DocumentType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("K-<E4RhoXyaC}D", "", "", "");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      documentType0.outerHtmlHead(stringBuilder0, 1264, document_OutputSettings0);
      assertEquals("<!doctype K-<E4RhoXyaC}D>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("VHv>%3", "VHv>%3", "PX>Ev:=RIlq*pP.H", "PX>Ev:=RIlq*pP.H");
      String string0 = documentType0.nodeName();
      assertEquals("#doctype", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("VHv>%3", "VHv>%3", "PX>Ev:=RIlq*pP.H", "PX>Ev:=RIlq*pP.H");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      documentType0.outerHtmlTail(outputStreamWriter0, 3400, document_OutputSettings0);
      assertEquals(0, documentType0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("|?f+nYVaG;Ql$@j,", "|?f+nYVaG;Ql$@j,", "|?f+nYVaG;Ql$@j,", "|?f+nYVaG;Ql$@j,");
      StringBuffer stringBuffer0 = new StringBuffer("PUBLIC");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      documentType0.outerHtmlHead(stringBuffer0, 1696, document_OutputSettings1);
      assertEquals("PUBLIC<!DOCTYPE |?f+nYVaG;Ql$@j, PUBLIC \"|?f+nYVaG;Ql$@j,\" \"|?f+nYVaG;Ql$@j,\">", stringBuffer0.toString());
      assertEquals(78, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("VHv>%3", "VHv>%3", "PX>Ev:=RIlq*pP.H", "PX>Ev:=RIlq*pP.H");
      StringBuffer stringBuffer0 = new StringBuffer("PUBLIC");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      documentType0.outerHtmlHead(stringBuffer0, 1948, document_OutputSettings0);
      assertEquals("PUBLIC<!DOCTYPE VHv>%3 PUBLIC \"VHv>%3\" \"PX>Ev:=RIlq*pP.H\">", stringBuffer0.toString());
      assertEquals(59, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "pre", "PUBLIC");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      documentType0.outerHtmlHead(stringBuffer0, 887, document_OutputSettings0);
      assertEquals("<!DOCTYPE \"pre\">", stringBuffer0.toString());
      assertEquals("<!DOCTYPE \"pre\">", stringWriter0.toString());
  }
}
