/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:26:35 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("# ");
      // Undeclared exception!
      try { 
        document0.wrap("# ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendText("");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("6jFje0 m@*~");
      document0.addClass("SBYT4+WG");
      boolean boolean0 = document0.hasClass("java.lang.string@0000000016");
      assertEquals("6jFje0 m@*~", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("#data");
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsMatchingText("#data");
      assertEquals("#data", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("&:QG:hf-[6o !0T(>!");
      // Undeclared exception!
      try { 
        document0.child(837);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 837, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("9Ox31\"B");
      document0.prependText("9Ox31\"B");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("dasefont");
      Element element0 = document0.tagName("dasefont");
      assertEquals("dasefont", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("m3@H2hfc@V+%R5Hbup*");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("m3@H2hfc@V+%R5Hbup*", document0.baseUri());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("m3@H2hfc0V(Rc5Hbup*");
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsContainingOwnText("m3@H2hfc0V(Rc5Hbup*");
      assertEquals("m3@H2hfc0V(Rc5Hbup*", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Element element0 = new Element("pp");
      // Undeclared exception!
      try { 
        element0.before("pp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("basefont");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("7zg}");
      document0.html("<html>\n <head></head>\n <body></body>\n</html>\n<#root>\n <html>\n  <head></head>\n  <body></body>\n </html>\n</#root>");
      document0.text();
      assertEquals(9, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.attr("", true);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("bPj.A66Cp_B:A:");
      document0.getElementsByAttributeValue("bPj.A66Cp_B:A:", "bPj.A66Cp_B:A:");
      assertEquals("bPj.A66Cp_B:A:", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("AfterBod");
      document0.getElementsByAttributeValueStarting("AfterBod", "AfterBod");
      assertEquals("AfterBod", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("}(MrerNvT&D_l");
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      String string0 = document0.html();
      assertEquals("}(MrerNvT&D_l", document0.baseUri());
      assertEquals("<html>\n <head>\n  <meta charset=\"UTF-8\">\n </head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("$PVF$6OXjW");
      document0.getElementsByIndexLessThan(988);
      assertEquals("$PVF$6OXjW", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("m3@H2hfc@V+%Rc5Hbup*");
      document0.getElementsByAttributeStarting("m3@H2hfc@V+%Rc5Hbup*");
      assertEquals("m3@H2hfc@V+%Rc5Hbup*", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("ycE;6");
      Elements elements0 = document0.getElementsByIndexEquals(9);
      assertEquals(1, document0.childNodeSize());
      assertEquals("ycE;6", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("#%s");
      document0.getElementsByAttributeValueMatching("#%s", "#%s");
      assertEquals("#%s", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("mxcEk_m");
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("mxcEk_m");
      document0.is((Evaluator) evaluator_Attribute0);
      assertEquals("mxcEk_m", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("bPj.A66Cp_B:A:");
      document0.getElementsByAttributeValueEnding("bPj.A66Cp_B:A:", "bPj.A66Cp_B:A:");
      assertEquals("bPj.A66Cp_B:A:", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("trBod");
      Elements elements0 = document0.getElementsByClass("trBod");
      assertEquals("trBod", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("7Wg}");
      Elements elements0 = document0.getElementsContainingText("7Wg}");
      assertEquals(0, elements0.size());
      assertEquals("7Wg}", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("title");
      document0.getElementsByAttributeValueContaining("br", "title");
      assertEquals("title", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document(";GJEZ1+m");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      assertEquals("Pattern syntax error: ", document0.baseUri());
      
      document0.setBaseUri("");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("o>8^xgPY<J'ur");
      document0.getElementsByAttributeValueNot("o>8^xgPY<J'ur", "id");
      assertEquals(1, document0.childNodeSize());
      assertEquals("o>8^xgPY<J'ur", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("TVAw");
      String string0 = document0.toString();
      assertEquals("TVAw", document0.baseUri());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("o>8^xgPY<J'ur");
      Element element0 = document0.removeClass("o>8^xgPY<J'ur");
      assertEquals("o>8^xgPY<J'ur", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("$PVF$6OXjW");
      document0.getAllElements();
      assertEquals("$PVF$6OXjW", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("m3@H2hfc@V+%Rc5Hbup*");
      // Undeclared exception!
      try { 
        document0.is("m3@H2hfc@V+%Rc5Hbup*");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'm3@H2hfc@V+%Rc5Hbup*': unexpected token at '@H2hfc@V+%Rc5Hbup*'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("q");
      document0.selectFirst("q");
      assertEquals(1, document0.childNodeSize());
      assertEquals("q", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("o>8^xgPY<J'ur");
      Elements elements0 = document0.getElementsByIndexGreaterThan(1325);
      assertEquals("o>8^xgPY<J'ur", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("7zg}");
      Element element0 = new Element("7zg}");
      Element element1 = document0.appendTo(element0);
      element1.prepend("");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("m3@H2hfc0V(Rc5Hbup*");
      document0.html("m3@H2hfc0V(Rc5Hbup*");
      Elements elements0 = document0.children();
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("m3@H2hfc0V(Rc5Hbup*", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$AttributeStarting");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("org.jsoup.select.Evaluator$AttributeStarting", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      document0.html("Pattern syntax error: ");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, document0.childNodeSize());
      assertFalse(list0.isEmpty());
      assertEquals("Pattern syntax error: ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("NvSF]/BL!o49");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      DataNode dataNode0 = new DataNode("ZL:mxTFcQ)<g_");
      nodeArray0[6] = (Node) dataNode0;
      nodeArray0[7] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.dataNodes();
      assertEquals(2, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("7zg}");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren(60, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("m3@H2hfc@V+%R5Hbup*");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-89), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("x");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(24, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("K<NTDlL}}BUxhil>)");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-2633), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document(",'h)");
      document0.normalise();
      Node[] nodeArray0 = new Node[8];
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element$1");
      element0.cssSelector();
      assertEquals("org.jsoup.nodes.Element$1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("OY");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertEquals("OY", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("OY");
      Element element0 = document0.body();
      element0.after("   ");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(2)", string0);
      assertEquals("OY", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("7zg}");
      document0.appendChild(document0);
      document0.siblingElements();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("m3@H2hfc@V+%Rc5Hbup*");
      document0.siblingElements();
      assertEquals("m3@H2hfc@V+%Rc5Hbup*", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell("7zg}");
      document0.nextElementSibling();
      assertEquals("7zg}", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Element element0 = document0.prependElement("7g}");
      Element element1 = element0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("title");
      Element element0 = document0.appendElement("title");
      Element element1 = element0.previousElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("$PVF$6OXjW");
      document0.previousElementSibling();
      assertEquals("$PVF$6OXjW", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("bPj.A66Cp_B:A:");
      Element element0 = document0.appendElement("bPj.A66Cp_B:A:");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
      assertEquals("bPj.A66Cp_B:A:", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document(";GJEZ1+m");
      document0.prependChild(document0);
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
      assertEquals(";GJEZ1+m", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("r]I/2eL;yoGti2a&-");
      document0.appendChild(document0);
      document0.firstElementSibling();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("r]I/2eL;yoGti2a&-");
      document0.appendChild(document0);
      Element element0 = document0.lastElementSibling();
      assertEquals("r]I/2eL;yoGti2a&-", document0.baseUri());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("r]I/2eL;yoGti2a&-");
      document0.appendChild(document0);
      document0.lastElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("7zg}");
      Element element0 = document0.appendChild(document0);
      element0.empty();
      element0.nextElementSibling();
      assertEquals("7zg}", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("title");
      document0.title("title");
      document0.appendElement("br");
      document0.text();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("title");
      document0.title("title");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell("9Ox31\"B");
      document0.title("9Ox31\"B");
      Elements elements0 = document0.getElementsMatchingOwnText("9Ox31\"B");
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, elements0.size());
      assertEquals("9Ox31\"B", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = Document.createShell("c*eSWZGTVd");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("c*eSWZGTVd");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      boolean boolean0 = Element.preserveWhitespace(textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Document.createShell("7zV}");
      Element element0 = document0.appendElement("7zV}");
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("TVA");
      document0.prepend("<html>\n <head></head>\n <body></body>\n</html>\n<#root>\n <html>\n  <head></head>\n  <body></body>\n </html>\n</#root>");
      boolean boolean0 = document0.hasText();
      assertEquals(9, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Document document0 = Document.createShell("8XlHg*PVX2gXfN 4");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.charset(charset0);
      boolean boolean0 = document1.hasText();
      assertEquals(2, document1.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = Document.createShell(";GJEZ1+m");
      Document document1 = document0.clone();
      document1.appendChild(document0);
      document0.prepend(";GJEZ1+m");
      boolean boolean0 = document1.hasText();
      assertEquals(2, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = Document.createShell("TVAw");
      document0.data();
      assertEquals(1, document0.childNodeSize());
      assertEquals("TVAw", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      Element element0 = document0.html("Pattern syntax error: ");
      element0.data();
      assertEquals(1, document0.childNodeSize());
      assertEquals("Pattern syntax error: ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("r]I/2eL;yoGti2a&-");
      document0.addClass("r]I/2eL;yoGti2a&-");
      boolean boolean0 = document0.hasClass("<html>\n <head></head>\n <body></body>\n</html>");
      assertEquals(1, document0.childNodeSize());
      assertEquals("r]I/2eL;yoGti2a&-", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("6jFje0 m@*~");
      document0.addClass("SBYT4+WG");
      document0.toggleClass("#daa{#");
      boolean boolean0 = document0.hasClass("java.lang.string@0000000016");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.toggleClass(".");
      document0.toggleClass("        ");
      document0.hasClass("(:nsB^}js");
      assertEquals(".", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("6jFje0 m@*~");
      Element element0 = document0.addClass("SBYT4+WG");
      Element element1 = document0.toggleClass("#daa{#");
      element1.toggleClass("BaseURI must not be null");
      boolean boolean0 = element0.hasClass("#daa{#");
      assertEquals("6jFje0 m@*~", element0.baseUri());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("o>8^xgPY<J'ur");
      document0.toggleClass("o>8^xgPY<J'ur");
      document0.toggleClass("o>8^xgPY<J'ur");
      boolean boolean0 = document0.hasClass("o>8^xgPY<J'ur");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = Document.createShell("-J,Sz=([:");
      Element element0 = document0.toggleClass("-J,Sz=([:");
      element0.addClass("-J,Sz=([:");
      Element element1 = document0.toggleClass("-J,Sz=([:");
      assertEquals("-J,Sz=([:", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document(";GJEZ1+m");
      document0.val();
      assertEquals(";GJEZ1+m", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea");
      element0.val();
      assertEquals("textarea", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document(";GJEZ1+m");
      Element element0 = document0.appendElement("textarea");
      element0.val("Children collection to be inserted must not be null.");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = Document.createShell("c*eSWZGTVd");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.html();
      assertEquals("<html><head></head><body></body></html>", string0);
      assertEquals("c*eSWZGTVd", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      document0.title("Pattern syntax error: ");
      String string0 = document0.html();
      assertEquals("<html>\n <head>\n  <title>Pattern syntax error: </title>\n </head>\n <body></body>\n</html>", string0);
      assertEquals("Pattern syntax error: ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = Document.createShell("basefont");
      MockPrintStream mockPrintStream0 = new MockPrintStream("basefont");
      document0.html(mockPrintStream0);
      assertEquals("basefont", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      document0.appendElement("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document0.outputSettings(document_OutputSettings1);
      document0.html();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      document0.title("Pattern syntax error: ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      document0.outputSettings(document_OutputSettings0);
      String string0 = document0.html();
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals("<html>\n <head>\n  <title>Pattern syntax error: </title>\n </head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Document document0 = Document.createShell("r]I/2eL;yoGti2a&-");
      Document document1 = (Document)document0.val("r]I/2eL;yoGti2a&-");
      Document document2 = document1.clone();
      assertEquals("r]I/2eL;yoGti2a&-", document2.baseUri());
      assertEquals(1, document1.childNodeSize());
  }
}
