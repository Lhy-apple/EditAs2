/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:17:18 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.TokeniserState;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Tokeniser_ESTest extends Tokeniser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null);
      tokeniser0.createTempBuffer();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null);
      // Undeclared exception!
      try { 
        tokeniser0.emitDoctypePending();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null);
      tokeniser0.acknowledgeSelfClosingFlag();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null);
      tokeniser0.createCommentPending();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("OverBar");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      // Undeclared exception!
      try { 
        tokeniser0.isAppropriateEndTagToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("v.U;dU@~9V\"dIO/&C");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      tokeniser0.read();
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Ove3BEar");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      boolean boolean0 = tokeniser0.isTrackErrors();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null);
      // Undeclared exception!
      try { 
        tokeniser0.emitCommentPending();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null);
      boolean boolean0 = tokeniser0.currentNodeInHtmlNS();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("lang");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      tokeniser0.createDoctypePending();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Kscr");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      tokeniser0.getState();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null);
      tokeniser0.emit(token_StartTag0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("lang");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Token.EndTag token_EndTag0 = (Token.EndTag)tokeniser0.createTagPending(false);
      token_EndTag0.appendAttributeName('-');
      tokeniser0.emit(token_EndTag0);
      tokeniser0.read();
      tokeniser0.emitTagPending();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("lang");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Character character0 = Character.valueOf('|');
      Character character1 = tokeniser0.consumeCharacterReference(character0, true);
      tokeniser0.consumeCharacterReference(character1, false);
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Character character0 = Character.valueOf('#');
      Character character1 = tokeniser0.consumeCharacterReference(character0, true);
      assertNull(character1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&Nlo*L");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Character character0 = tokeniser0.consumeCharacterReference((Character) null, true);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("u#XR0E_R:'JGzuS");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Character character0 = new Character('5');
      characterReader0.consumeAsString();
      tokeniser0.consumeCharacterReference(character0, true);
      assertEquals("#XR0E_R:'JGzuS", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Character character0 = tokeniser0.consumeCharacterReference((Character) null, false);
      assertNull(character0);
      assertEquals("#", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(";(Z`S");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Character character0 = tokeniser0.consumeCharacterReference((Character) null, true);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("lang");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Character character0 = Character.valueOf('|');
      tokeniser0.consumeCharacterReference(character0, false);
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("rarrPlp");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Character character0 = tokeniser0.consumeCharacterReference((Character) null, true);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("sup3");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Character character0 = tokeniser0.consumeCharacterReference((Character) null, true);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.Tokeniser");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      TokeniserState tokeniserState0 = TokeniserState.AttributeName;
      tokeniser0.setTrackErrors(false);
      tokeniser0.error(tokeniserState0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("xpXRI^Tk:M6/\"J`n<<");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Token token0 = tokeniser0.read();
      assertEquals("xpXRI^Tk:M6/\"J`n<<", token0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("iopf");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      tokeniser0.setTrackErrors(false);
      TokeniserState tokeniserState0 = TokeniserState.DoctypeSystemIdentifier_singleQuoted;
      tokeniser0.eofError(tokeniserState0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("|<G\"G");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Token token0 = tokeniser0.read();
      assertEquals("|", token0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("lang");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Character character0 = Character.valueOf('|');
      tokeniser0.setTrackErrors(false);
      tokeniser0.consumeCharacterReference(character0, true);
      assertEquals("", characterReader0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("lang");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0);
      Token.Tag token_Tag0 = tokeniser0.createTagPending(true);
      token_Tag0.selfClosing = true;
      tokeniser0.emit(token_Tag0);
      tokeniser0.setTrackErrors(false);
      Token token0 = tokeniser0.read();
      assertSame(token0, token_Tag0);
  }
}
