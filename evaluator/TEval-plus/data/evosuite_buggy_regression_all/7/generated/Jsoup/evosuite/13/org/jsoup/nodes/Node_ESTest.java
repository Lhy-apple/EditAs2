/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:18:29 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("js\"Szd'Z\"9gj,/Yi");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("Y;eUcy");
      document0.setBaseUri("Y;eUcy");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("?");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("WJ>1AaJh=^|OO[+@PdNK", "WJ>1AaJh=^|OO[+@PdNK");
      Node[] nodeArray0 = dataNode0.childNodesAsArray();
      assertEquals(0, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("ForAll", "ForAll", "ForAll", "ForAll");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "ForAll");
      stringBuilder0.append((Object) documentType0);
      assertEquals("ForAll<!DOCTYPE html PUBLIC \"ForAll\" ForAll\">", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("YUcy", "YUcy");
      // Undeclared exception!
      try { 
        dataNode0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("cf,");
      String string0 = document0.absUrl("cf,");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("js\"Szd'Z\"9gj,/Yi");
      // Undeclared exception!
      try { 
        document0.before("js\"Szd'Z\"9gj,/Yi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("ZVx }rRQ02GAe}", "ZVx }rRQ02GAe}");
      Node node0 = textNode0.removeAttr("ZVx }rRQ02GAe}");
      assertSame(textNode0, node0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataNode dataNode0 = new DataNode("7?", "~c+f");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) dataNode0;
      dataNode0.addChildren(nodeArray0);
      // Undeclared exception!
      try { 
        dataNode0.after("~c+f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("#u<W");
      String string0 = document0.toString();
      assertEquals(0, document0.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DataNode dataNode0 = new DataNode("WJ>1aJh=^|OO[+@PdNK", "WJ>1aJh=^|OO[+@PdNK");
      // Undeclared exception!
      try { 
        dataNode0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("gg0y{*_'E^%lC");
      Elements elements0 = document0.getElementsByAttributeStarting("gg0y{*_'E^%lC");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("abs:");
      // Undeclared exception!
      try { 
        document0.absUrl("abs:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("7?");
      document0.attr("7?", "7?");
      String string0 = document0.absUrl("7?");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("&s\"Szd.Z\"9,}Yi");
      Element element0 = document0.prependChild(document0);
      element0.after("&s\"Szd.Z\"9,}Yi");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataNode dataNode0 = new DataNode("p6ZQ}zfTd/EPr_", "p6ZQ}zfTd/EPr_");
      // Undeclared exception!
      try { 
        dataNode0.wrap("p6ZQ}zfTd/EPr_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("cf,");
      Element element0 = document0.head();
      assertNotNull(element0);
      
      Element element1 = element0.wrap("cf,");
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("#u<W", "#u<W");
      Document document0 = Document.createShell("#u<W");
      dataNode0.setParentNode(document0);
      Node node0 = dataNode0.wrap("#u<W");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("<");
      DataNode dataNode0 = DataNode.createFromEncoded("<", "<");
      dataNode0.setParentNode(document0);
      // Undeclared exception!
      try { 
        dataNode0.setParentNode(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("L]zDyXemG>`*TBq");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("p6ZQ}zfTd/EPr_");
      DataNode dataNode0 = new DataNode("p6ZQ}zfTd/EPr_", "p6ZQ}zfTd/EPr_");
      dataNode0.setParentNode(document0);
      dataNode0.replaceWith(document0);
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DataNode dataNode0 = new DataNode("WJ>1aJh=^|OO[+@PdNK", "WJ>1aJh=^|OO[+@PdNK");
      Document document0 = new Document("WJ>1aJh=^|OO[+@PdNK");
      // Undeclared exception!
      try { 
        dataNode0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("&s\"Szd.Z\"9,}Yi");
      document0.prependChild(document0);
      Node node0 = document0.previousSibling();
      assertNull(node0);
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("&s\"Szd.Z\"9,}Yi");
      document0.prependChild(document0);
      document0.setSiblingIndex(32768);
      // Undeclared exception!
      try { 
        document0.previousSibling();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32767, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("}9 hT}sEg%u3k", "}9 hT}sEg%u3k");
      boolean boolean0 = dataNode0.equals("}9 hT}sEg%u3k");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("abs:v`bs=q", "abs:v`bs=q");
      boolean boolean0 = dataNode0.equals(dataNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("#u<W", "#u<W");
      Document document0 = Document.createShell("#u<W");
      dataNode0.setParentNode(document0);
      dataNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("Yfih2_", "Yfih2_");
      dataNode0.attributes = null;
      dataNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("7GYnsbJk;se`r|M");
      Element element0 = document0.prepend("org.jsoup.nodes.Node$OuterHtmlVisitor");
      Document document1 = document0.clone();
      assertNotSame(document1, element0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded(">-&_XQ5wsM>&o", ">-&_XQ5wsM>&o");
      String string0 = textNode0.toString();
      assertEquals("&gt;-&amp;_XQ5wsM&gt;&amp;o", string0);
  }
}
