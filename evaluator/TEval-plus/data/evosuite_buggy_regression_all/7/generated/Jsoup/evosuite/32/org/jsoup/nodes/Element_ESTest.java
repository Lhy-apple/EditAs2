/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:21:09 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("device");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, ";", attributes0);
      element0.text(";");
      String string0 = element0.outerHtml();
      assertEquals("<device>;</device>", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("CEmmentEnd");
      Elements elements0 = document0.getElementsMatchingText("CEmmentEnd");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("device");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, ";", attributes0);
      Element element1 = element0.prependElement("device");
      String string0 = element0.outerHtml();
      assertNotSame(element0, element1);
      assertEquals("<device><device /></device>", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("IV}zn\")YZZ5{");
      // Undeclared exception!
      try { 
        document0.child(19);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 19, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("");
      document0.tagName("textarea");
      // Undeclared exception!
      try { 
        document0.val("mUi+@B3KoK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("#mmenLt");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("X$KJ+YlI3");
      Element element0 = document0.addClass("X$KJ+YlI3");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("]zG &H}{}");
      // Undeclared exception!
      try { 
        document0.html("]zG &H}{}");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("CommentEnd");
      Elements elements0 = document0.getElementsByAttributeValue("br", "br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("IV}zn\")YZZ5{");
      Elements elements0 = document0.getElementsByAttributeValueStarting("IV}zn\")YZZ5{", "IV}zn\")YZZ5{");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("tZ0cf*9\"NoPztl");
      // Undeclared exception!
      try { 
        document0.select("tZ0cf*9\"NoPztl");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'tZ0cf*9\"NoPztl': unexpected token at '\"NoPztl'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("d");
      Elements elements0 = document0.getElementsMatchingOwnText("d");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("Y$_+1=w.");
      // Undeclared exception!
      try { 
        document0.after("Y$_+1=w.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByIndexLessThan(2493);
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("frameset");
      Elements elements0 = document0.parents();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("E6gd.*8");
      Elements elements0 = document0.getElementsByAttributeStarting("E6gd.*8");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("Com/n@d");
      Elements elements0 = document0.getElementsByIndexEquals(7597);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("h2");
      // Undeclared exception!
      try { 
        document0.wrap("h2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("`jiVq~2WV#");
      // Undeclared exception!
      try { 
        document0.normalise();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("CommentEnd");
      Element element0 = document0.val("CommentEnd");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("Com/n@d");
      Elements elements0 = document0.getElementsByAttributeValueMatching("Com/n@d", "Com/n@d");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("CHXommentEn>d");
      Elements elements0 = document0.getElementsByAttributeValueEnding("CHXommentEn>d", "CHXommentEn>d");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("CommentEnd");
      Elements elements0 = document0.getElementsByClass("CommentEnd");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("CommentEnd");
      Elements elements0 = document0.getElementsByAttributeValueContaining("CommentEnd", "CommentEnd");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("Y$_+1=w.");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("Com/n@d");
      Elements elements0 = document0.getElementsByAttributeValueNot("Com/n@d", "Com/n@d");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("CommentEnd");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("]zG &H}{}");
      Elements elements0 = document0.getElementsByAttribute("]zG &H}{}");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("CommentEnd");
      // Undeclared exception!
      try { 
        document0.before("CommentEnd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("frameset");
      Element element0 = document0.removeClass("frameset");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("]zG &H}{}");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("9,A2");
      Elements elements0 = document0.getElementsByTag("9,A2");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("OHXommentEn>d");
      Elements elements0 = document0.getElementsByIndexGreaterThan(74);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("frameset");
      Element element0 = document0.prependElement("frameset");
      Elements elements0 = element0.parents();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("CommentEnd");
      Element element0 = document0.tagName("#comment");
      element0.appendChild(document0);
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("^");
      Element element0 = document0.prependElement("^");
      document0.prependText("^");
      Elements elements0 = element0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("t7m)waJR_S7Uh8}6)");
      Element element0 = document0.prepend("t7m)waJR_S7Uh8}6)");
      List<TextNode> list0 = element0.textNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("CommentEnd");
      Element element0 = document0.appendChild(document0);
      List<TextNode> list0 = element0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document(",{^ZhiUq<");
      DataNode dataNode0 = new DataNode(",{^ZhiUq<", ",{^ZhiUq<");
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("CommentEn>d");
      document0.prependElement("CommentEn>d");
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("CommentEn>d");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      Element element0 = document0.insertChildren(0, linkedHashSet0);
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document(")1X'}c|");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-956), linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("`}j-Vq~2Wh#");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren(9, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("`]&~j/ 1Wc!5t#G-");
      Elements elements0 = document0.siblingElements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("`]&~j/ 1Wc!5t#G-");
      document0.prependElement("`]&~j/ 1Wc!5t#G-");
      document0.setParentNode(document0);
      Elements elements0 = document0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("`jiVq~2WV#");
      Element element0 = document0.prependElement("`jiVq~2WV#");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("W`jiVq~2WV#");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("mUi+@B3KoK");
      document0.prependChild(document0);
      Element element0 = document0.prependElement("mUi+@B3KoK");
      Element element1 = element0.nextElementSibling();
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("zm:~P");
      document0.appendChild(document0);
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("]zGl &H}{}");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("zm:~P");
      Element element0 = document0.appendChild(document0);
      element0.prependElement("ObW?}RJ:K>");
      Element element1 = document0.previousElementSibling();
      assertNotNull(element1);
      assertEquals("obw?}rj:k>", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("IV}zn\")YZZ5{");
      Element element0 = document0.prependElement("IV}zn\")YZZ5{");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("IV}zn\")YZZ5{");
      Element element0 = document0.prependElement("IV}zn\")YZZ5{");
      Element element1 = element0.before((Node) document0);
      Element element2 = element1.firstElementSibling();
      assertEquals(2, element2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("OHXommentEn>d");
      Element element0 = document0.prependElement("br");
      Elements elements0 = element0.getElementsByIndexGreaterThan(74);
      assertEquals("br", element0.tagName());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("`]&~j/ 1Wc!5t#G-");
      document0.setParentNode(document0);
      Element element0 = document0.lastElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("mUi+@B3KoK");
      Element element0 = document0.prependElement("br");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) element0;
      element0.addChildren(nodeArray0);
      Element element1 = element0.lastElementSibling();
      assertEquals("mUi+@B3KoK", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("OHXommentEn>d");
      Document document1 = (Document)document0.doClone(document0);
      // Undeclared exception!
      try { 
        document1.getElementsByIndexGreaterThan(74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$IndexGreaterThan", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("d");
      Element element0 = document0.getElementById("d");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("CommentEn>d");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("CommentEn>d", "CommentEn>d", true);
      Element element0 = document0.appendChild(xmlDeclaration0);
      Elements elements0 = element0.getElementsContainingText("CommentEn>d");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("frameset");
      Tag tag0 = Tag.valueOf("frameset");
      TextNode textNode0 = new TextNode("frameset", "frameset");
      Attributes attributes0 = textNode0.attributes();
      Element element0 = new Element(tag0, "frameset", attributes0);
      document0.appendChild(element0);
      document0.prependElement("frameset");
      document0.prependText("frameset");
      Elements elements0 = document0.getElementsContainingText("frameset");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("Com@d");
      Comment comment0 = new Comment("xmp", "xmp");
      document0.appendChild(comment0);
      Elements elements0 = document0.getElementsContainingOwnText("Fs");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("`}jVq~2Wh#");
      document0.prepend("`}jVq~2Wh#");
      Elements elements0 = document0.getElementsContainingOwnText("`}jVq~2Wh#");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("IV}zn\")YZZ@5{");
      document0.prependElement("IV}zn\")YZZ@5{");
      Elements elements0 = document0.getElementsContainingOwnText("IV}zn\")YZZ@5{");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("frameset");
      Element element0 = document0.prependElement("textarea");
      Element element1 = element0.prependText("~q\t<|9?ch_=");
      element1.getElementsContainingText("textarea");
      assertEquals("textarea", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("CHXommentEn>d");
      Element element0 = document0.prependElement("br");
      element0.appendText("br");
      Elements elements0 = document0.getElementsContainingText("{h<a\"5r(J");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("CHXommentEn>d");
      Element element0 = document0.prependElement("br");
      element0.prependChild(document0);
      // Undeclared exception!
      try { 
        element0.getElementsContainingText("br");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("*PBN(n\"`0b");
      Element element0 = document0.prependElement("textarea");
      document0.parentNode = (Node) element0;
      assertEquals("textarea", element0.nodeName());
      
      document0.prependText("textarea");
      String string0 = document0.outerHtml();
      assertEquals("textarea\n<textarea></textarea>", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.appendText("");
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("IV}zn\")YZZ@5{");
      Comment comment0 = new Comment("IV}zn\")YZZ@5{", "IV}zn\")YZZ@5{");
      Element element0 = document0.prependChild(comment0);
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("IV}zn\")YZZ@5{");
      document0.prependElement("IV}zn\")YZZ@5{");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("CommentEnd");
      Element element0 = document0.createElement("CommentEnd");
      document0.appendChild(element0);
      element0.prependText("CommentEnd");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("IV}zn\")YZZ@5{");
      document0.prependElement("IV}zn\")YZZ@5{");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("CmmeBtEnc");
      DataNode dataNode0 = DataNode.createFromEncoded("CmmeBtEnc", "CmmeBtEnc");
      document0.appendChild(dataNode0);
      String string0 = document0.data();
      assertEquals("CmmeBtEnc", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("`}jVq~2Wh#");
      Element element0 = document0.prepend("`}jVq~2Wh#");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("4`5qAKQ}fU2j[rRfN3I");
      document0.toggleClass("4`5qAKQ}fU2j[rRfN3I");
      Element element0 = document0.clone();
      assertNotSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("");
      boolean boolean0 = document0.hasClass("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.toggleClass("");
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("#mmenLt");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("frameset");
      Element element0 = document0.prependElement("textarea");
      element0.val();
      assertEquals("textarea", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document(")f1X '}c4|");
      StringBuilder stringBuilder0 = new StringBuilder(31);
      StringBuilder stringBuilder1 = stringBuilder0.append((-2));
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder1, (-2), document_OutputSettings1);
      assertEquals("-2<#root>", stringBuilder1.toString());
      assertEquals("-2<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("CommentEnd");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("or");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.prependElement("iznpbyz.,z5{");
      String string0 = document0.outerHtml();
      assertEquals("<iznpbyz.,z5{></iznpbyz.,z5{>", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("CommentEnd");
      Element element0 = document0.createElement("CommentEnd");
      Element element1 = element0.prependText("CommentEnd");
      String string0 = element1.outerHtml();
      assertEquals("<commentend>\n CommentEnd\n</commentend>", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Tag tag0 = Tag.valueOf("device");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, ";", attributes0);
      element0.hashCode();
  }
}
