/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:21:53 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.appendText("textarea");
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("br");
      Comment comment0 = new Comment("", "br");
      document0.prependChild(comment0);
      Elements elements0 = document0.getElementsMatchingText("");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("select");
      // Undeclared exception!
      try { 
        document0.child(10556);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10556, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.val("textarea");
      StringBuilder stringBuilder0 = new StringBuilder();
      formElement0.outerHtml(stringBuilder0);
      assertEquals("<textarea>textarea</textarea>", stringBuilder0.toString());
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("s+");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("s+");
      Elements elements0 = document0.getElementsContainingOwnText("s+");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("select");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("k<vm/A(;ku^Z1<");
      // Undeclared exception!
      try { 
        document0.html("k<vm/A(;ku^Z1<");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("cextkrea");
      Elements elements0 = document0.getElementsByAttributeValue("cextkrea", "cextkrea");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("D'~#X");
      Elements elements0 = document0.getElementsByAttributeValueStarting("D'~#X", "D'~#X");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("s+");
      // Undeclared exception!
      try { 
        document0.select("s+");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("s+");
      // Undeclared exception!
      try { 
        document0.after("s+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("s+");
      Elements elements0 = document0.getElementsByIndexLessThan(2799);
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("select");
      Element element0 = document0.prependElement("select");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("ZkTHFW]Se@vE_uUdW");
      Elements elements0 = document0.getElementsByAttributeStarting("ZkTHFW]Se@vE_uUdW");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("[%s$=%s]");
      Elements elements0 = document0.getElementsByIndexEquals(2130);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("s+");
      // Undeclared exception!
      try { 
        document0.wrap("s+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("p)");
      Element element0 = document0.val("p)");
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("select");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("<");
      Elements elements0 = document0.getElementsByAttributeValueMatching("<", "<");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValueEnding("br", "br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("D'~#X");
      Elements elements0 = document0.getElementsByClass("D'~#X");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsContainingText("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("bo");
      Elements elements0 = document0.getElementsByAttributeValueContaining("bo", "bo");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("[%s$=%s]");
      Document document1 = document0.clone();
      Element element0 = document1.prependChild(document0);
      document1.appendChild(element0);
      element0.siblingElements();
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("[%s$=%s]");
      Elements elements0 = document0.getElementsByAttributeValueNot("\n\n", "[%s$=%s]");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("l|'r");
      Elements elements0 = document0.getElementsByAttribute("l|'r");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.before("br");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("s+");
      Element element0 = document0.removeClass("s+");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("^8vW=^whB39 ");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("[%s$=%s]");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("textarea");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1312));
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.getElementById("u=@s1w%8%;@^za");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("%");
      Element element0 = document0.prependChild(document0);
      Elements elements0 = element0.parents();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("select");
      document0.tagName("select");
      document0.prependChild(document0);
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("select");
      document0.prependChild(document0);
      Element element0 = document0.prependText("select");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      Element element0 = formElement0.val("textarea");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("select");
      Element element0 = document0.prependChild(document0);
      List<TextNode> list0 = element0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("select");
      DataNode dataNode0 = new DataNode("select", "select");
      Element element0 = document0.prependChild(dataNode0);
      List<DataNode> list0 = element0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("[%s$=%s]");
      Element element0 = document0.prependChild(document0);
      List<DataNode> list0 = element0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("=sTi{=");
      Elements elements0 = document0.children();
      Element element0 = document0.insertChildren(0, elements0);
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("^^bH>^*");
      LinkedList<XmlDeclaration> linkedList0 = new LinkedList<XmlDeclaration>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-346), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("Y8_g= WYT,Iq;Fx~l");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren(8472, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("[%s$=%s]");
      document0.appendChild(document0);
      Elements elements0 = document0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      Elements elements0 = formElement0.siblingElements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("s+");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("ys%,(6n/Xmf");
      document0.appendElement("ys%,(6n/Xmf");
      document0.prependChild(document0);
      document0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("D'~#X");
      Element element0 = document0.appendElement("ol");
      element0.after((Node) document0);
      Element element1 = document0.previousElementSibling();
      assertNotNull(element1);
      assertEquals("ol", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("wAKt");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("select");
      document0.prependChild(document0);
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("v^^bH>^*");
      Element element0 = document0.appendElement("v^^bH>^*");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("[%s$=%s]");
      Document document1 = document0.clone();
      Element element0 = document0.prependChild(document1);
      document0.prependChild(element0);
      document0.firstElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("[%s$=%s]");
      Document document1 = document0.clone();
      Element element0 = document1.prependChild(document0);
      document1.appendChild(element0);
      assertEquals(1, element0.siblingIndex());
      
      document0.lastElementSibling();
      assertNotSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("select");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.val("textarea");
      formElement0.val();
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      document0.prependText("Pattern syntax error: ");
      Elements elements0 = document0.getElementsMatchingText("Pattern syntax error: ");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("figcaption");
      document0.appendElement("figcaption");
      document0.prependText("figcaption");
      Elements elements0 = document0.getElementsMatchingText("figcaption");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("select");
      Element element0 = document0.prependChild(document0);
      element0.prependText("Ro}~BVKKJ,X3V!.olYT");
      element0.getElementsMatchingText("Ro}~BVKKJ,X3V!.olYT");
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.val("textarea");
      formElement0.getElementsMatchingOwnText("textarea");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("v0>-{ir8");
      DataNode dataNode0 = DataNode.createFromEncoded("v0>-{ir8", "v0>-{ir8");
      document0.prependChild(dataNode0);
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document(";`X9]Nx~vpB");
      document0.appendElement(";`X9]Nx~vpB");
      String string0 = document0.ownText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("[%s$=%s]", "[%s$=%s]");
      boolean boolean0 = Element.preserveWhitespace(textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("[%s$=%s]");
      document0.append("\n\n");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("[%s$=%s]");
      DataNode dataNode0 = new DataNode("textarea", "N|`r`aT+4T`><-*~G:");
      Element element0 = document0.prependChild(dataNode0);
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("[%s$=%s]");
      document0.append("[%s$=%s]");
      Document document1 = document0.clone();
      document1.prependChild(document0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = document1.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("[%s$=%s]");
      Element element0 = document0.append("[%s$=%s]");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("[%s$=%s]");
      DataNode dataNode0 = new DataNode("textarea", "N|`r`aT+4T`><-*~G:");
      document0.prependChild(dataNode0);
      String string0 = document0.data();
      assertEquals("textarea", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("select");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      try { 
        element0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("[%s$=%s]");
      document0.toggleClass("h#:>V");
      Set<String> set0 = document0.classNames();
      assertTrue(set0.contains("h#:>V"));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("select");
      document0.addClass("select");
      boolean boolean0 = document0.hasClass("select");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.toggleClass("");
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("TjSf(");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document("%");
      StringBuilder stringBuilder0 = new StringBuilder("&Vip8g2|");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, (-1), document_OutputSettings0);
      assertEquals("&Vip8g2|<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("select");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("select");
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "ek1cb^o(C^4J[)", attributes0);
      formElement0.setParentNode(document0);
      StringBuilder stringBuilder0 = new StringBuilder("AIV/H ;t}p;Er?IOd");
      formElement0.outerHtml(stringBuilder0);
      assertEquals("AIV/H ;t}p;Er?IOd\n<select></select>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("select");
      Tag tag0 = Tag.valueOf("select");
      Element element0 = document0.createElement("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "ek1cb^o(C^4J[)", attributes0);
      formElement0.setParentNode(element0);
      StringBuilder stringBuilder0 = new StringBuilder("AIV/H ;t}p;Er?IOd");
      formElement0.outerHtml(stringBuilder0);
      assertEquals("AIV/H ;t}p;Er?IOd<select></select>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder("textarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      formElement0.outerHtmlHead(stringBuilder0, 0, document_OutputSettings1);
      assertEquals("textarea\n<textarea>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      String string0 = element0.outerHtml();
      assertEquals("<br />", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("tfxtaraa");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((StringBuilder) null, (-381), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((StringBuilder) null, 1935, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Comment comment0 = new Comment("", "br");
      Element element1 = element0.prependChild(comment0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element1.outerHtmlTail(stringBuilder0, 1924, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.val("textarea");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      formElement0.prepend("textarea");
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      formElement0.outerHtmlTail(stringBuilder0, 79, document_OutputSettings1);
      assertEquals(2, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.val("textarea");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      formElement0.outerHtmlTail(stringBuilder0, 3238, document_OutputSettings1);
      assertEquals("</textarea>", stringBuilder0.toString());
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = new Document("br");
      document0.hashCode();
  }
}
