/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:17:18 GMT 2023
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.CombiningEvaluator;
import org.jsoup.select.Evaluator;
import org.jsoup.select.StructuralEvaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CombiningEvaluator_ESTest extends CombiningEvaluator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Evaluator> linkedList0 = new LinkedList<Evaluator>();
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(linkedList0);
      String string0 = combiningEvaluator_Or0.toString();
      assertEquals(":or[]", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[0];
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Evaluator> linkedList0 = new LinkedList<Evaluator>();
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(linkedList0);
      Document document0 = new Document("i$ v:{");
      StructuralEvaluator.ImmediateParent structuralEvaluator_ImmediateParent0 = new StructuralEvaluator.ImmediateParent(combiningEvaluator_Or0);
      linkedList0.add((Evaluator) structuralEvaluator_ImmediateParent0);
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(linkedList0);
      boolean boolean0 = combiningEvaluator_And0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Evaluator> linkedList0 = new LinkedList<Evaluator>();
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(linkedList0);
      Document document0 = new Document("i$ v:{");
      Element element0 = document0.appendElement("Z");
      StructuralEvaluator.ImmediateParent structuralEvaluator_ImmediateParent0 = new StructuralEvaluator.ImmediateParent(combiningEvaluator_Or0);
      StructuralEvaluator.Root structuralEvaluator_Root0 = new StructuralEvaluator.Root();
      combiningEvaluator_Or0.add(structuralEvaluator_Root0);
      linkedList0.add((Evaluator) structuralEvaluator_ImmediateParent0);
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(linkedList0);
      boolean boolean0 = combiningEvaluator_And0.matches(document0, element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Evaluator> linkedList0 = new LinkedList<Evaluator>();
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("A n|H1ku-i:+^bVj");
      linkedList0.add((Evaluator) evaluator_Attribute0);
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("N[");
      linkedList0.addFirst(evaluator_ContainsOwnText0);
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(linkedList0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Evaluator> linkedList0 = new LinkedList<Evaluator>();
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(linkedList0);
      Document document0 = new Document("i$ v:{");
      Element element0 = document0.appendElement("Z");
      StructuralEvaluator.Root structuralEvaluator_Root0 = new StructuralEvaluator.Root();
      combiningEvaluator_Or0.add(structuralEvaluator_Root0);
      boolean boolean0 = combiningEvaluator_Or0.matches(document0, element0);
      assertFalse(boolean0);
  }
}
