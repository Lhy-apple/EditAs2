/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:21:57 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("u");
      Element element0 = new Element(tag0, "u");
      Element element1 = element0.appendElement("u");
      assertEquals(0, element1.siblingIndex());
      
      String string0 = element0.outerHtml();
      assertEquals("<u><u></u></u>", string0);
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("WQ/,");
      Elements elements0 = document0.getElementsMatchingText("WQ/,");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document(":");
      // Undeclared exception!
      try { 
        document0.child((-1842001214));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("h3&m]\"U/e7`");
      Element element0 = document0.prependText("h3&m]\"U/e7`");
      assertEquals("h3&m]\"U/e7`", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.tagName("br");
      assertEquals("br", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      element0.text("br");
      String string0 = element0.outerHtml();
      assertEquals(0, element0.siblingIndex());
      assertEquals("<br>br</br>", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000005");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("9vkawwn");
      Elements elements0 = document0.getElementsContainingOwnText("9vkawwn");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("2Y}");
      Element element0 = document0.addClass("2Y}");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.html("br");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValue("br", "br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("wzh3&fg-y&\"U/{e7`");
      Elements elements0 = document0.getElementsByAttributeValueStarting("wzh3&fg-y&\"U/{e7`", "wzh3&fg-y&\"U/{e7`");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("u");
      Element element0 = new Element(tag0, "u");
      Element element1 = element0.appendElement("u");
      String string0 = element1.cssSelector();
      assertEquals("u > u", string0);
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prepend("br");
      Elements elements0 = document0.children();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("textarea");
      // Undeclared exception!
      try { 
        document0.after("textarea");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("+Tm");
      Elements elements0 = document0.getElementsByIndexLessThan(0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      document0.prependElement("Insert position out of bounds.");
      document0.prependChild(document0);
      document0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("h3&m]\"U/{e7`");
      Elements elements0 = document0.getElementsByAttributeStarting("h3&m]\"U/{e7`");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("Y}");
      // Undeclared exception!
      try { 
        document0.wrap("Y}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.val("br");
      assertEquals("br", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValueMatching("br", "br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      Elements elements0 = document0.getElementsByAttributeValueEnding("Insert position out of bounds.", "Insert position out of bounds.");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByClass("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("mb");
      Elements elements0 = document0.getElementsContainingText("mb");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValueContaining("br", "br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("6VGSj7|");
      Elements elements0 = document0.getElementsByAttributeValueNot("6VGSj7|", "6VGSj7|");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("br");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("children collection to be inserted must not be null.");
      Elements elements0 = document0.getElementsByAttribute("children collection to be inserted must not be null.");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("u`3TmjB");
      // Undeclared exception!
      try { 
        document0.before("u`3TmjB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("value");
      Element element0 = document0.removeClass("value");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByTag("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("b");
      Elements elements0 = document0.getElementsByIndexGreaterThan(18);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "br");
      Element element1 = element0.appendElement("br");
      // Undeclared exception!
      try { 
        element1.prepend("br");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("#");
      Element element0 = document0.appendElement("#");
      // Undeclared exception!
      try { 
        element0.append("#");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("value");
      TextNode textNode0 = TextNode.createFromEncoded("value", "value");
      document0.prependChild(textNode0);
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.contains(textNode0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("e:y=c$})aOAF");
      document0.append("e:y=c$})aOAF");
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      DataNode dataNode0 = DataNode.createFromEncoded("Insert position out of bounds.", "_n1");
      document0.prependChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("2Y}");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren(715, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("h3&m]\"U/{e7`");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-2008), linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("QEtC'tnHI_z1c@NbMv");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      document0.insertChildren(0, elements0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.toggleClass("br");
      String string0 = element0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("#");
      Element element0 = document0.appendElement("#");
      String string0 = element0.cssSelector();
      assertEquals("#", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("jm-");
      Elements elements0 = document0.siblingElements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("value");
      document0.prependChild(document0);
      Element element0 = document0.appendElement("value");
      Elements elements0 = element0.siblingElements();
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      element0.after((Node) document0);
      Element element1 = document0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("P6VGSj7|");
      Element element0 = document0.appendElement("P6VGSj7|");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Element element1 = element0.after((Node) document0);
      Element element2 = document0.firstElementSibling();
      assertSame(element2, element1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("#");
      Element element0 = document0.appendElement("#");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      element0.before((Node) document0);
      Element element1 = element0.lastElementSibling();
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("InHeadNoscript");
      Element element0 = document0.prependChild(document0);
      element0.empty();
      // Undeclared exception!
      try { 
        element0.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("6VGSj7|");
      Element element0 = document0.getElementById("6VGSj7|");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("-MHPtOJ-,6PM_vi`Q");
      Comment comment0 = new Comment("Z,f\u0002>(g|zB", "-MHPtOJ-,6PM_vi`Q");
      Element element0 = document0.prependChild(comment0);
      String string0 = element0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("value");
      TextNode textNode0 = new TextNode("value", "value");
      Element element0 = document0.prependChild(textNode0);
      element0.appendElement("value");
      String string0 = element0.text();
      assertEquals("value", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("br");
      TextNode textNode0 = new TextNode("br", "br");
      Element element0 = document0.prependChild(textNode0);
      document0.appendElement("br");
      String string0 = element0.text();
      assertEquals("br", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("caption");
      TextNode textNode0 = TextNode.createFromEncoded("caption", "caption");
      document0.prependChild(textNode0);
      Tag tag0 = Tag.valueOf("caption");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "gn4", attributes0);
      textNode0.after((Node) formElement0);
      document0.appendElement("caption");
      String string0 = document0.text();
      assertEquals("caption", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("value");
      TextNode textNode0 = new TextNode("value", "value");
      document0.prependChild(textNode0);
      Elements elements0 = document0.getElementsMatchingOwnText("value");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("br");
      Comment comment0 = new Comment("(>7rssm", "(>7rssm");
      document0.prependChild(comment0);
      Elements elements0 = document0.getElementsMatchingOwnText("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("value");
      document0.appendElement("value");
      Elements elements0 = document0.getElementsMatchingOwnText("value");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      Document document1 = document0.clone();
      document1.prependChild(element0);
      Elements elements0 = document1.getElementsMatchingOwnText("5EnvWHlp72");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("v_alue", "v_alue");
      boolean boolean0 = Element.preserveWhitespace(textNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("Kiv^k[S><0U2@c");
      Element element0 = document0.appendElement("textarea");
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "qscp#y\"j*bbl@");
      Element element1 = element0.appendElement("qscp#y\"j*bbl@");
      element1.text("textarea");
      String string0 = element1.outerHtml();
      assertEquals("<qscp#y\"j*bbl@>\n textarea\n</qscp#y\"j*bbl@>", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Tag tag0 = Tag.valueOf("k!}$l=<xl=4");
      Element element0 = new Element(tag0, "!66achvv");
      Element element1 = element0.appendElement(" />");
      assertEquals("/>", element1.nodeName());
      
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("jm-");
      TextNode textNode0 = TextNode.createFromEncoded(" ", " ");
      Element element0 = document0.prependChild(textNode0);
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("");
      DataNode dataNode0 = new DataNode("", "$");
      document0.prependChild(dataNode0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Tag tag0 = Tag.valueOf("k!}$l=<xl=4");
      Element element0 = new Element(tag0, "!66achvv");
      Element element1 = element0.appendElement(" />");
      Element element2 = element1.text("k6t*xq@rf}jeenk");
      assertEquals("/>", element2.nodeName());
      
      boolean boolean0 = element0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("u;qas=n\"baqswz-a");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      try { 
        element0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("");
      DataNode dataNode0 = new DataNode("", "$");
      Element element0 = document0.prependChild(dataNode0);
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("value");
      TextNode textNode0 = TextNode.createFromEncoded("value", "value");
      Element element0 = document0.prependChild(textNode0);
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("^&xXimqig6Q.s>");
      Element element0 = document0.toggleClass("^&xXimqig6Q.s>");
      boolean boolean0 = element0.hasClass("^&xXimqig6Q.s>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("><p!=jh/", "><p!=jh/");
      Tag tag0 = Tag.valueOf("><p!=jh/");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "><p!=jh/", attributes0);
      Element element0 = formElement0.toggleClass(":VTf=B");
      boolean boolean0 = element0.hasClass("java.lang.string@0000000016");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("]");
      Element element0 = document0.toggleClass("]");
      Element element1 = element0.toggleClass("]");
      Element element2 = element1.toggleClass("]");
      assertSame(document0, element2);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("wgno|.$2{@#wx");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Insert position out of bounds.");
      Element element0 = new Element(tag0, "value");
      Element element1 = element0.appendElement("textarea");
      element1.val();
      assertEquals("textarea", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "qscp#y\"j*bbl@");
      element0.val("Children collection to be inserted must not be null.");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("P6VGSj7|");
      StringBuilder stringBuilder0 = new StringBuilder("q");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, 255, document_OutputSettings1);
      assertEquals("q<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Document document0 = new Document("caption");
      TextNode textNode0 = new TextNode("caption", "caption");
      document0.prependChild(textNode0);
      document0.appendElement("caption");
      String string0 = document0.outerHtml();
      assertEquals("caption\n<caption></caption>", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "br");
      StringBuilder stringBuilder0 = new StringBuilder(61);
      StringBuilder stringBuilder1 = stringBuilder0.append((-2073459748));
      element0.outerHtml(stringBuilder1);
      assertEquals("-2073459748<br>", stringBuilder1.toString());
      assertEquals("-2073459748<br>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Tag tag0 = Tag.valueOf("H{#u;LoX\"c)^%)rnm");
      Element element0 = new Element(tag0, "H{#u;LoX\"c)^%)rnm");
      element0.appendElement("time");
      String string0 = element0.outerHtml();
      assertEquals("<h{#u;lox\"c)^%)rnm>\n <time></time>\n</h{#u;lox\"c)^%)rnm>", string0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Tag tag0 = Tag.valueOf("u");
      Element element0 = new Element(tag0, "u");
      StringBuilder stringBuilder0 = new StringBuilder("<u><u></u></u>");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element0.outerHtmlHead(stringBuilder0, 52, document_OutputSettings0);
      assertEquals("<u><u></u></u>\n                                                    <u>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "gm*2x3=q", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      formElement0.outerHtmlHead(stringBuilder0, (-542), document_OutputSettings0);
      assertEquals("br<br />", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Document document0 = new Document("value");
      document0.appendElement("wf");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      String string0 = document1.html();
      assertEquals("<wf></wf>", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Tag tag0 = Tag.valueOf("meter");
      Element element0 = new Element(tag0, "U&w1S");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "U&w1S");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element0.appendText("Insert position out of bounds.");
      element0.outerHtmlTail(stringBuilder0, 1371, document_OutputSettings0);
      assertEquals("U&w1S</meter>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Tag tag0 = Tag.valueOf("u");
      Element element0 = new Element(tag0, "u");
      Element element1 = element0.appendElement("u");
      element1.after((Node) element0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(stringBuilder0, (-161), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Tag tag0 = Tag.valueOf("u");
      Element element0 = new Element(tag0, "u");
      element0.appendElement("u");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(stringBuilder0, (-161), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Document document0 = new Document("cWQ;K#vp^K$M&Wo0Rk");
      boolean boolean0 = document0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Tag tag0 = Tag.valueOf("`!QAgOU{4X\"#n=");
      Element element0 = new Element(tag0, "`!QAgOU{4X\"#n=");
      Element element1 = element0.appendElement("`!QAgOU{4X\"#n=");
      boolean boolean0 = element0.equals(element1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Document document0 = new Document("br");
      document0.hashCode();
  }
}
