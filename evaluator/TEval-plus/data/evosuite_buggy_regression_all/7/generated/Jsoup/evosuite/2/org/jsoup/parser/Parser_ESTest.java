/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:16:23 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<u!~@-#~34/>\n</u!~@-#~34/>\n<html>\n<head>\n <title>M:V#d&lt;&lt;AaUB}96ly#)</title>\n</head>\n<body> &lt; M:V#d<aaub 96ly=\"\">\n </aaub>\n</body>\n</html>", "<u!~@-#~34/>\n</u!~@-#~34/>\n<html>\n<head>\n <title>M:V#d&lt;&lt;AaUB}96ly#)</title>\n</head>\n<body> &lt; M:V#d<aaub 96ly=\"\">\n </aaub>\n</body>\n</html>");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!-", "<!-");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<![CDATA[", "<![CDATA[");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Parser.parse("M:V#d<<AaUd}96ly#'", "M:V#d<<AaUd}96ly#'");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Parser.parse("<!--%s-->", "<!--%s-->");
      assertEquals("<!--%s-->", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Parser.parse("<?", "<?");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Parser.parse("<!--", "<!--");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "</");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Parser.parse("<html>\n<head>\n</head>\n<body> &lt; M:V#d<aaud 96ly=\"\">\n </aaud>\n</body>\n</html><base />", "base");
      assertEquals("base", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Parser.parse("<7$<HG=<,}U~pG`", "<7$<HG=<,}U~pG`");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<P$<O]G=,U~GJ`", "<P$<O]G=,U~GJ`");
      assertEquals("<P$<O]G=,U~GJ`", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<hl=U[_ =SeMe", "<hl=U[_ =SeMe");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Parser.parse("<base />", "<base />");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<textarea></textarea><textarea></textarea>", "textarea");
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<html>\n<head>\n</head>\n<body>\n</body>\n</html>\n<html>\n</html>", "");
      assertEquals("", document0.baseUri());
  }
}
