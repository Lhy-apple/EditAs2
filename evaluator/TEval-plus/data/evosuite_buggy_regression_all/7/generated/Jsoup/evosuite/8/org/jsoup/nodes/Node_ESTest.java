/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:16:59 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell(")CGgxD5/UgmNTP]H\"");
      document0.setBaseUri(")CGgxD5/UgmNTP]H\"");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("DaA1%");
      Node node0 = document0.removeAttr("DaA1%");
      assertSame(document0, node0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("KXd9?@", "KXd9?@");
      // Undeclared exception!
      try { 
        textNode0.siblingNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataNode dataNode0 = new DataNode("r", "r");
      // Undeclared exception!
      try { 
        dataNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("<");
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertEquals(0, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextNode textNode0 = new TextNode(")CGgxD5/UgmNTP]H\"", ")CGgxD5/UgmNTP]H\"");
      // Undeclared exception!
      try { 
        textNode0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell(")CGgxD5/UgmNTP]H\"");
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("abs:id");
      String string0 = document0.absUrl("abs:id");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("KXd9?@");
      document0.attr("KXd9?@", "");
      String string0 = document0.absUrl("KXd9?@");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("head");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      element0.setParentNode(document0);
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Node");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("abs:abs: -c(dihy3}?ca4");
      Element element0 = document0.appendElement("abs:abs: -c(dihy3}?ca4");
      // Undeclared exception!
      try { 
        document0.replaceChild(element0, element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("DuOR=s9']rw>rSH");
      Element element0 = document0.appendElement("DuOR=s9']rw>rSH");
      assertEquals(0, (int)document0.siblingIndex());
      
      element0.replaceWith(document0);
      assertEquals(1, (int)document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("KXd?", "KXd?");
      // Undeclared exception!
      try { 
        textNode0.removeChild(textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("\n");
      document0.setParentNode(document0);
      Node node0 = document0.previousSibling();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendChild(document0);
      Node node0 = document0.previousSibling();
      assertEquals("", node0.baseUri());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextNode textNode0 = new TextNode(")CGgxD5/UgmNTP]H\"", ")CGgxD5/UgmNTP]H\"");
      boolean boolean0 = textNode0.equals(")CGgxD5/UgmNTP]H\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DataNode dataNode0 = new DataNode("r", "r");
      boolean boolean0 = dataNode0.equals(dataNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("DuOR=s9']rw>rSH");
      TextNode textNode0 = TextNode.createFromEncoded("DuOR=s9']rw>rSH", "DuOR=s9']rw>rSH");
      textNode0.parentNode = (Node) document0;
      textNode0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("<");
      document0.html("<");
      String string0 = document0.toString();
      assertEquals("&lt;", string0);
  }
}
