/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:25:20 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.OutputStreamWriter;
import java.io.StringWriter;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      TextNode textNode0 = new TextNode("kbd", "'NM;~cL/jXq&vcJCb&");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "V&5Y _wYzb!", attributes0);
      Element element0 = formElement0.prependText("");
      Document document0 = new Document("checked");
      document0.prependChild(element0);
      Elements elements0 = document0.getElementsMatchingText("textarea");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      TextNode textNode0 = new TextNode("kbd", "'NM;~cL/jXq&vcJCb&");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "V&5Y _wYzb!", attributes0);
      Document document0 = new Document("checked");
      document0.prependChild(formElement0);
      document0.prependText("u&F,El6w:iN");
      Elements elements0 = document0.getElementsMatchingText("textarea");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document(" x");
      // Undeclared exception!
      try { 
        document0.child(6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      // Undeclared exception!
      try { 
        document0.html((CharArrayWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Element element0 = new Element("br");
      // Undeclared exception!
      try { 
        element0.html("br");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Element element0 = new Element("br");
      Map<String, String> map0 = element0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Element element0 = new Element("063");
      Elements elements0 = element0.getElementsContainingOwnText("063");
      Element element1 = element0.insertChildren((-1), elements0);
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("tya");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("m|C/:#}cd0B9ED,aZ");
      Element element0 = document0.attr("m|C/:#}cd0B9ED,aZ", false);
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("InCaption");
      Elements elements0 = document0.getElementsByAttributeValue("InCaption", "InCaption");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Element element0 = new Element("b");
      Elements elements0 = element0.getElementsByAttributeValueStarting("b", "b");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendElement("br");
      String string0 = element1.cssSelector();
      assertEquals(0, element1.siblingIndex());
      assertEquals("br > br", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Element element0 = new Element("br");
      element0.prepend("br");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Element element0 = new Element("g;#@rPuozZWZfz");
      // Undeclared exception!
      try { 
        element0.after("g;#@rPuozZWZfz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$AttributeWithValueMatching");
      Elements elements0 = document0.getElementsByIndexLessThan((-2136));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("org.jsoup.helper.W3CDom");
      Element element0 = document0.prependElement("org.jsoup.helper.W3CDom");
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document(">");
      Elements elements0 = document0.getElementsByAttributeStarting(">");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("Unexpected token type: ");
      Elements elements0 = document0.getElementsByIndexEquals(53);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("o:$");
      // Undeclared exception!
      try { 
        document0.wrap("o:$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("checked");
      Document document1 = (Document)document0.val("cLZf}AB&`Rdr4;5P");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValueMatching("br", "br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("#o5");
      boolean boolean0 = document0.is("#o5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValueEnding("br", "br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("+7o6ty7xC");
      Elements elements0 = document0.getElementsByClass("-O0;'9QO");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Element element0 = new Element("e+");
      Elements elements0 = element0.getElementsByAttributeValueContaining("<", "e+");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tag tag0 = Tag.valueOf(")R-");
      Element element0 = new Element(tag0, ")R-");
      // Undeclared exception!
      try { 
        element0.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("m|C/:#}cd0B9ED,aZ");
      Document document1 = document0.clone();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValueNot("br", "br");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("onFQ{");
      Elements elements0 = document0.getElementsByAttribute("onFQ{");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Element element0 = new Element("B#{");
      // Undeclared exception!
      try { 
        element0.before("B#{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.removeClass("br");
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("m|C/:#}cd0B9ED,aZ");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByTag("br");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("tya");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1379));
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("5br");
      Element element0 = document0.appendElement("5br");
      Elements elements0 = element0.parents();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendElement("br");
      Elements elements0 = element1.parents();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("PRGue8LxA-$l");
      Element element0 = document0.appendText("#");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("onFQ{");
      document0.prependElement("onFQ{");
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("br");
      DataNode dataNode0 = new DataNode("br", "br");
      document0.prependChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependElement("br");
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("b");
      LinkedHashSet<TextNode> linkedHashSet0 = new LinkedHashSet<TextNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(3211, linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsContainingOwnText("br");
      // Undeclared exception!
      try { 
        document0.insertChildren((-194), elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document(" > ");
      document0.toggleClass("br");
      String string0 = document0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("g;#@rPuozZWZfz");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      document0.addChildren(nodeArray0);
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("meta");
      Elements elements0 = document0.siblingElements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Element element0 = new Element("InCaption");
      Element element1 = element0.appendElement("InCaption");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) element1;
      nodeArray0[1] = (Node) element0;
      Comment comment0 = new Comment("InCaption", "#");
      nodeArray0[2] = (Node) comment0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) element1;
      element0.addChildren(nodeArray0);
      Elements elements0 = element1.siblingElements();
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("o:$");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("met@");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("o:$");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element0 = document0.prependElement("o:$");
      element0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Element element0 = new Element("InCaption");
      Element element1 = element0.appendElement("InCaption");
      Element element2 = element1.previousElementSibling();
      assertEquals(0, element1.childNodeSize());
      assertNull(element2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("*:o~^j ype");
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Element element0 = new Element("InCaption");
      Element element1 = element0.appendElement("InCaption");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) element1;
      nodeArray0[1] = (Node) element0;
      Comment comment0 = new Comment("InCaption", "#");
      nodeArray0[2] = (Node) comment0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) element1;
      element0.addChildren(nodeArray0);
      Element element2 = element1.previousElementSibling();
      assertEquals(1, element0.siblingIndex());
      assertSame(element0, element2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("onFQ{");
      Element element0 = document0.prependElement("onFQ{");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("o:$");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element0 = document0.prependElement("o:$");
      Element element1 = element0.firstElementSibling();
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("E");
      Element element0 = document0.appendElement("E");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("g;#@rPuozZWZfz");
      Element element0 = document0.appendElement("g;#@rPuozZWZfz");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("g;#@rPuozZWZfz");
      Element element0 = document0.appendElement("g;#@rPuozZWZfz");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) document0;
      document0.addChildren(nodeArray0);
      Document document1 = (Document)element0.lastElementSibling();
      assertEquals("g;#@rPuozZWZfz", document1.location());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Element element0 = new Element("mketa");
      element0.reparentChild(element0);
      // Undeclared exception!
      try { 
        element0.previousElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("Unexpected token type: ");
      Element element0 = document0.getElementById("Unexpected token type: ");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("Ww");
      DataNode dataNode0 = DataNode.createFromEncoded("Ww", "dse.R q'^hxpq';H_");
      document0.prependChild(dataNode0);
      Elements elements0 = document0.getElementsMatchingText("o:$");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("colgroup");
      document0.appendElement("colgroup");
      document0.prependText(" h");
      Elements elements0 = document0.getElementsContainingText("colgroup");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      document0.prependText("br");
      Elements elements0 = document0.getElementsMatchingText("br");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("7~);.S8=06~=O");
      Comment comment0 = new Comment("7~);.S8=06~=O", "7~);.S8=06~=O");
      Element element0 = document0.prependChild(comment0);
      Elements elements0 = element0.getElementsContainingOwnText("7~);.S8=06~=O");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("m|C/:#}cd0B9ED,aZ");
      document0.prependText("m|C/:#}cd0B9ED,aZ");
      Elements elements0 = document0.getElementsMatchingOwnText("m|C/:#}cd0B9ED,aZ");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("xhtml");
      document0.appendElement("xhtml");
      Elements elements0 = document0.getElementsContainingOwnText("xhtml");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("Pattern syntax error: ", "Pattern syntax error: ");
      boolean boolean0 = Element.preserveWhitespace(dataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document(" ");
      document0.prependText(" ");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("br");
      DataNode dataNode0 = new DataNode("br", "br");
      document0.prependChild(dataNode0);
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("InCaption");
      Element element0 = document0.prependElement("InCaption");
      element0.text("InCaption");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependElement("br");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Document document0 = new Document("Ww");
      DataNode dataNode0 = DataNode.createFromEncoded("Ww", "dse.R q'^hxpq';H_");
      Element element0 = document0.prependChild(dataNode0);
      String string0 = element0.data();
      assertEquals("Ww", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Element element0 = new Element("InCaption");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      Comment comment0 = new Comment("InCaption", "#");
      nodeArray0[2] = (Node) comment0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) element0;
      element0.addChildren(nodeArray0);
      // Undeclared exception!
      try { 
        element0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      TextNode textNode0 = new TextNode("kbd", "'NM;~cL/jXq&vcJCb&");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "V&5Y _wYzb!", attributes0);
      Element element0 = formElement0.prependText("");
      Document document0 = new Document("checked");
      document0.prependChild(element0);
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = new Document("org.js+p.select.Evalar$AVributWitValuMaMcing");
      document0.toggleClass("org.js+p.select.Evalar$AVributWitValuMaMcing");
      Elements elements0 = document0.getElementsByClass("org.js+p.select.Evalar$AVributWitValuMaMcing");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document(".%s");
      Element element0 = document0.toggleClass("\")m`J!d(8w=N#+");
      Elements elements0 = element0.getElementsByClass("java.lang.string@0000000005");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = new Document(" > ");
      document0.toggleClass("br");
      document0.toggleClass(" > ");
      boolean boolean0 = document0.hasClass("autofocus");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.toggleClass("br");
      element0.toggleClass("br");
      boolean boolean0 = element0.hasClass("Tag name must not be empty.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Document document0 = new Document("r");
      document0.toggleClass("value");
      document0.createElement("value");
      document0.toggleClass("value");
      boolean boolean0 = document0.hasClass("java.lang.string@0000000010");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Document document0 = new Document("Ww");
      document0.toggleClass("Ww");
      Element element0 = document0.toggleClass("Ww");
      Elements elements0 = element0.getElementsByClass("Ww");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Document document0 = new Document("PRGue8LxA-$l");
      Element element0 = document0.toggleClass("PRGue8LxA-$l");
      element0.addClass("PRGue8LxA-$l");
      Element element1 = document0.toggleClass("PRGue8LxA-$l");
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Document document0 = new Document("mxeta");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "b:P", attributes0);
      String string0 = formElement0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Document document0 = new Document("GNBqcd)}+*");
      document0.tagName("textarea");
      // Undeclared exception!
      try { 
        document0.val("GNBqcd)}+*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Document document0 = new Document("textarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 62, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Element element0 = new Element("br");
      element0.appendElement("br");
      // Undeclared exception!
      try { 
        element0.toString();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Element element0 = new Element("br");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element0.outerHtmlHead(stringWriter0, 322, document_OutputSettings0);
      assertEquals("\n                                                                                                                                                                                                                                                                                                                                  <br>", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Element element0 = new Element("mketa");
      element0.appendElement("mketa");
      // Undeclared exception!
      try { 
        element0.toString();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Document document0 = new Document(".");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Element element0 = document1.appendElement("br");
      String string0 = element0.toString();
      assertEquals("<br />", string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Document document0 = new Document("org.jsoup.helper.W3CDom");
      StringWriter stringWriter0 = new StringWriter(74);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringWriter0, (-2021577502), document_OutputSettings1);
      assertEquals("</#root>", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Element element0 = new Element("br");
      element0.appendElement("br");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      element0.outerHtmlTail(stringWriter0, 124, document_OutputSettings0);
      assertEquals("\n                                                                                                                            </br>", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.prependText("br");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element1.prependText("br");
      element1.outerHtmlTail(stringWriter0, 2, document_OutputSettings1);
      assertEquals("\n  </br>", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Element element0 = new Element("br");
      element0.prependText("br");
      StringWriter stringWriter0 = new StringWriter(3550);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element0.outerHtmlTail(stringWriter0, 3550, document_OutputSettings1);
      assertEquals("</br>", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Document document0 = new Document("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      String string0 = document1.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      String string0 = document0.toString();
      assertEquals("<br>", string0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Document document0 = new Document("$cL");
      OutputStreamWriter outputStreamWriter0 = document0.html((OutputStreamWriter) null);
      assertNull(outputStreamWriter0);
  }
}
