/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:19:46 GMT 2023
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Elements_ESTest extends Elements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("ePI-}7");
      Elements elements0 = document0.getElementsByIndexLessThan(1970);
      Object[] objectArray0 = elements0.toArray();
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("5WxI*1:]/}W!+");
      Elements elements0 = document0.getElementsByClass("5WxI*1:]/}W!+");
      Integer[] integerArray0 = new Integer[5];
      Integer[] integerArray1 = elements0.toArray(integerArray0);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("ky79t_>>luM4Cfc'%");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Element element0 = elements0.remove(0);
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("ky79t_>>luM4Cfc'%");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      elements0.add(0, (Element) document0);
      assertEquals("ky79t_>>luM4Cfc'%", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Elements elements0 = new Elements();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      boolean boolean0 = elements0.equals(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.listIterator(3759);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3759
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Elements elements0 = new Elements();
      Object object0 = new Object();
      boolean boolean0 = elements0.remove(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("ky79t_>>luM4Cfc'%");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      boolean boolean0 = elements0.is("org.jsoup.select.Elements");
      assertFalse(elements0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("}tk!ywom!a0XT<ipZD");
      Elements elements0 = document0.getElementsByIndexLessThan(1981);
      elements0.clear();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Element[] elementArray0 = new Element[0];
      Elements elements0 = new Elements(elementArray0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("Q^[+o&kBKPwm%Rak");
      Elements elements0 = document0.getElementsByAttributeValueContaining("Q^[+o&kBKPwm%Rak", "Q^[+o&kBKPwm%Rak");
      int int0 = elements0.indexOf(document0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Elements elements0 = new Elements();
      Object object0 = new Object();
      int int0 = elements0.lastIndexOf(object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.not("nca6Bo");
      assertNotSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("5WxI*1:]/}W!+");
      Elements elements0 = document0.getElementsByClass("5WxI*1:]/}W!+");
      elements0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("ncarBo");
      Elements elements0 = document0.getElementsByIndexLessThan(1970);
      String string0 = elements0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("ncarBU");
      Elements elements0 = document0.getElementsByIndexLessThan(1944);
      // Undeclared exception!
      try { 
        elements0.addAll(1944, (Collection<? extends Element>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1944, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Elements elements0 = new Elements();
      UnaryOperator<Element> unaryOperator0 = UnaryOperator.identity();
      elements0.replaceAll(unaryOperator0);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.subList((-4549), 639);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -4549
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("Nc");
      Elements elements0 = document0.getElementsByIndexLessThan((-2));
      LinkedList<Element> linkedList0 = new LinkedList<Element>();
      boolean boolean0 = elements0.addAll((Collection<? extends Element>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.set((-1488), (Element) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("Gopif");
      Elements elements0 = document0.getElementsByAttributeStarting("Gopif");
      boolean boolean0 = elements0.retainAll(elements0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("ncarBo");
      Elements elements0 = document0.getElementsByIndexLessThan(1970);
      Elements elements1 = elements0.clone();
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("ncaron");
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      String string0 = elements0.attr("ganU$:Zy0.,uu*%:%+");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("ncaron");
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      elements0.attr("Zscr", "<html>\n <head></head>\n <body></body>\n</html>");
      String string0 = elements0.attr("Zscr");
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("ncarBo");
      Elements elements0 = document0.getElementsByIndexLessThan(1970);
      boolean boolean0 = elements0.hasAttr("ncarBo");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("ky79t_>>luM4Cfc'%");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      elements0.attr("ky79t_>>luM4Cfc'%", "ky79t_>>luM4Cfc'%");
      boolean boolean0 = elements0.hasAttr("ky79t_>>luM4Cfc'%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.removeAttr("");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("5WxI*1:]/}W!+");
      Elements elements0 = document0.getElementsByAttributeValueNot("~T\"n*gk", "5WxI*1:]/}W!+");
      // Undeclared exception!
      try { 
        elements0.removeAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("ncaron");
      Elements elements0 = document0.getElementsByIndexLessThan(3788);
      elements0.addClass("ncaron");
      boolean boolean0 = elements0.hasClass("ncaron");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("ncarBo");
      Elements elements0 = document0.getElementsByIndexLessThan(1970);
      Elements elements1 = elements0.removeClass("ncarBo");
      assertEquals(4, elements1.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("ncarBo");
      Elements elements0 = document0.getElementsByIndexLessThan(1970);
      Elements elements1 = elements0.toggleClass("");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("ncarn");
      Elements elements0 = document0.getElementsByIndexLessThan(1970);
      boolean boolean0 = elements0.hasClass("ncarn");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = Document.createShell("vYFzVmTbJy`C.#3oH");
      Elements elements0 = document0.getElementsContainingText("4>W");
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("ky79t_>>luM4Cfc'%");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("ky79t_>>luM4Cfc'%");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Elements elements1 = elements0.val("ky79t_>>luM4Cfc'%");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("ky79t_>>luM4Cfc'%");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      elements0.html("ky79t_>>luM4Cfc'%");
      String string0 = elements0.text();
      assertEquals("ky79t_>>luM4Cfc'% ky79t_>>luM4Cfc'% ky79t_>>luM4Cfc'%", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("ePI-}7");
      Elements elements0 = document0.getElementsByIndexLessThan(1970);
      boolean boolean0 = elements0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("ky79t_>>luM4Cfc'%");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Elements elements1 = elements0.html("ky79t_>>luM4Cfc'%");
      boolean boolean0 = elements1.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("ncaron");
      Elements elements0 = document0.getElementsByIndexLessThan(1970);
      String string0 = elements0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("ky79t_>>luM4Cfc'%");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Elements elements1 = elements0.tagName("ky79t_>>luM4Cfc'%");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell(" ");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.prepend(" ");
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("ncarBo");
      Elements elements0 = document0.getElementsByIndexLessThan(1970);
      Elements elements1 = elements0.append("Cqu+DqXkb~M'K");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByIndexEquals((-2559));
      Elements elements1 = elements0.before("");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("ncarBo");
      Elements elements0 = document0.getElementsByIndexLessThan(1970);
      // Undeclared exception!
      try { 
        elements0.before("ncarBo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Document.createShell("Gopif");
      Elements elements0 = document0.getElementsByAttributeStarting("Gopif");
      Elements elements1 = elements0.after("L=");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("ncaron");
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      // Undeclared exception!
      try { 
        elements0.after("ncaron");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("ncarBo");
      Elements elements0 = document0.getElementsByAttributeValueContaining("Hbsg", "ncarBo");
      Elements elements1 = elements0.wrap("T)JPwXot_z`");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("ncaron");
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      // Undeclared exception!
      try { 
        elements0.wrap("ncaron");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Tag tag0 = Tag.valueOf("nca<on");
      Element element0 = new Element(tag0, "nca<on");
      Elements elements0 = element0.children();
      Elements elements1 = elements0.unwrap();
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Document.createShell("ncarBo");
      Elements elements0 = document0.getElementsByIndexLessThan(1970);
      Elements elements1 = elements0.empty();
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.remove();
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("ncaron");
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      // Undeclared exception!
      try { 
        elements0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("ncaron");
      Elements elements0 = document0.getElementsByIndexLessThan(1970);
      Elements elements1 = elements0.eq(1970);
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      // Undeclared exception!
      try { 
        elements0.eq((-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Document.createShell("ky79t_>>luM4Cfc'%");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      boolean boolean0 = elements0.is(",L6BU*D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("ncarBo");
      Elements elements0 = document0.getElementsByIndexLessThan(1970);
      Elements elements1 = elements0.parents();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = Document.createShell("Gopif");
      String string0 = document0.title();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      Element element0 = elements0.last();
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.parents();
      Element element0 = elements0.last();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("ncaron");
      Elements elements0 = document0.getElementsByIndexLessThan(1970);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.traverse(nodeVisitor0);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Elements elements0 = new Elements();
      Object object0 = new Object();
      boolean boolean0 = elements0.contains(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("ky79t_>>luM4Cfc'%");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      boolean boolean0 = elements0.removeAll(elements0);
      assertTrue(elements0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell("ncaron");
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      Elements elements1 = document0.getElementsByAttributeValueStarting("ganU$:Zy0.,uu*%:%+", "ncaron");
      boolean boolean0 = elements1.containsAll(elements0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = Document.createShell("ncaron");
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      List<DataNode> list0 = document0.dataNodes();
      boolean boolean0 = elements0.containsAll(list0);
      assertTrue(boolean0);
  }
}
