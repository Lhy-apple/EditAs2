/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:24:23 GMT 2023
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("   ");
      boolean boolean0 = tokenQueue0.matchesCS("   ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("px");
      // Undeclared exception!
      try { 
        tokenQueue0.addFirst((Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("nq0R-okZnmm ~g\u0003`Q");
      String string0 = tokenQueue0.toString();
      assertEquals("nq0R-okZnmm ~g\u0003`Q", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("q| 13HX4F~`8|@X");
      tokenQueue0.addFirst("q| 13HX4F~`8|@X");
      assertEquals("q| 13HX4F~`8|@Xq| 13HX4F~`8|@X", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'s\"ri<s!f('s\"ri<s!f(");
      tokenQueue0.chompBalanced('\'', '\'');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("q| 13HX4F~`8|@X");
      char char0 = tokenQueue0.peek();
      assertEquals('q', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("     ");
      tokenQueue0.consumeWhitespace();
      char char0 = tokenQueue0.peek();
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("7|Y`$TT'^jH");
      tokenQueue0.consumeElementSelector();
      // Undeclared exception!
      try { 
        tokenQueue0.consume("7|Y`$TT'^jH");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("T-B})1");
      tokenQueue0.consumeCssIdentifier();
      assertEquals("})1", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*|");
      tokenQueue0.chompTo("-q6i");
      char[] charArray0 = new char[6];
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("|");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
      assertEquals('|', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("nq0R-okZnmm ~g3`Q");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals("nq0R-okZnmm ~g3`Q", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<N_Y.0@EM*gHJUeTI");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<0_Y.0@EM*gHJUeTI");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
      assertFalse(tokenQueue0.matchesWord());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*|");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertEquals('*', tokenQueue0.peek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("O");
      String string0 = tokenQueue0.consumeWord();
      assertEquals("", tokenQueue0.toString());
      assertEquals("O", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.advance();
      assertTrue(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("  ");
      tokenQueue0.advance();
      tokenQueue0.chompToIgnoreCase("  ");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("7|Y`$TT'^jH");
      tokenQueue0.consume("7|Y`$TT'^jH");
      assertEquals('\u0000', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("4Ho`f&?hjB`bj!7(d\"Z");
      tokenQueue0.chompTo("4Ho`f&?hjB`bj!7(d\"Z");
      assertEquals('\u0000', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("nq0R-okZnmm ~g\u0003`Q");
      tokenQueue0.consumeElementSelector();
      tokenQueue0.consumeToIgnoreCase("nq0R-okZnmm ~g\u0003`Q");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("width ");
      tokenQueue0.consumeToIgnoreCase(" ");
      assertEquals(" ", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("q^| 13HX4VFf`8|NX");
      tokenQueue0.chompToIgnoreCase("'s\"ri<s!f((na4s2");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*|");
      String[] stringArray0 = new String[0];
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("J16Y!Z");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "J16Y!Z";
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals('J', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("q| 13HX4F~`8|@X");
      tokenQueue0.consumeWord();
      tokenQueue0.chompBalanced('|', 'U');
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<0_Y.0@EM*gHJUeTI");
      tokenQueue0.chompBalanced('1', '<');
      assertTrue(tokenQueue0.matchesWord());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = TokenQueue.unescape("MPf>&av'n]w-cA0Wz\\");
      assertEquals("MPf>&av'n]w-cA0Wz", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("px");
      tokenQueue0.consumeTagName();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("wnq0-ok} ~gk3`");
      tokenQueue0.consumeTagName();
      assertEquals("} ~gk3`", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("3h");
      tokenQueue0.consumeElementSelector();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("x");
      tokenQueue0.consumeAttributeKey();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-)KkMqjDya");
      tokenQueue0.consumeAttributeKey();
      assertEquals(")KkMqjDya", tokenQueue0.toString());
  }
}
