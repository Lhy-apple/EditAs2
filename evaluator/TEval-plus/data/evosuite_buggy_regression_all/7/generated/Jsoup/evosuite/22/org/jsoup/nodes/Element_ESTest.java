/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:18:21 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("I");
      Element element0 = document0.appendText("I");
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("+A]QZ.UkDMf1;FDs-");
      Element element0 = document0.prependElement("ul");
      assertEquals("ul", element0.tagName());
      
      Element element1 = document0.prependText("ul");
      assertEquals(0, element1.siblingIndex());
      
      Elements elements0 = document0.getElementsMatchingText("ul");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("r");
      // Undeclared exception!
      try { 
        document0.child(1753);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1753, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("r");
      // Undeclared exception!
      try { 
        document0.html("r");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("r");
      Map<String, String> map0 = document0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("r");
      Elements elements0 = document0.getElementsContainingOwnText("r");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("GU::8O[\"q3A@:TU;");
      Element element0 = document0.addClass("GU::8O[\"q3A@:TU;");
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("=^-2c5C2Bs5OZL~");
      Elements elements0 = document0.getElementsByAttributeValue("=^-2c5C2Bs5OZL~", "=^-2c5C2Bs5OZL~");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("r");
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("z");
      Elements elements0 = document0.getElementsByAttributeValueStarting("z", "z");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("r");
      Elements elements0 = document0.select("r");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("r");
      Element element0 = document0.prepend("r");
      assertEquals("r", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("lT([FkLLi)");
      // Undeclared exception!
      try { 
        document0.after("lT([FkLLi)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("iGH|^TXEc");
      Elements elements0 = document0.getElementsByAttributeStarting("iGH|^TXEc");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("Rq;ofo ");
      Elements elements0 = document0.getElementsByIndexEquals(2224);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("&");
      // Undeclared exception!
      try { 
        document0.wrap("&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("Ll'*z~ef0");
      // Undeclared exception!
      try { 
        document0.normalise();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("r");
      Element element0 = document0.val("odiv");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("r");
      Elements elements0 = document0.getElementsByAttributeValueMatching("r", "r");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("$s.");
      Elements elements0 = document0.getElementsByAttributeValueEnding("$s.", "$s.");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("'z{");
      Elements elements0 = document0.getElementsByClass("'z{");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("Ll={z~$f0");
      Elements elements0 = document0.getElementsContainingText("Ll={z~$f0");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("Ll={z~$f0");
      Elements elements0 = document0.getElementsByAttributeValueContaining("Ll={z~$f0", "br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("dcaron");
      Element element0 = document0.prependElement("dcaron");
      Element element1 = element0.text("dcaron");
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("r");
      Document document1 = document0.clone();
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("r");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("r");
      Elements elements0 = document0.getElementsByAttribute("r");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("r");
      // Undeclared exception!
      try { 
        document0.before("r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document("thead");
      Element element0 = document0.removeClass("thead");
      assertEquals("thead", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document("nwarhk");
      Elements elements0 = document0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("r");
      // Undeclared exception!
      try { 
        document0.title("r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("+A]QZ.UkDMf1;FDs-");
      Elements elements0 = document0.getElementsByIndexGreaterThan(1150);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("nwarhk");
      Element element0 = document0.getElementById("nwarhk");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("Ll={z~$f0");
      Element element0 = document0.prependElement("#,GA");
      Elements elements0 = element0.parents();
      assertEquals(0, elements0.size());
      assertEquals("#,ga", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("r");
      document0.tagName("YNE0.?A");
      Element element0 = document0.prependElement("r");
      element0.parents();
      assertEquals("yne0.?a", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("3xn}o^Ggmidq");
      Element element0 = document0.prependElement("3xn}o^Ggmidq");
      document0.prependText("3xn}o^Ggmidq");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("I");
      document0.prependElement("I");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("I");
      Element element0 = document0.prependText("I");
      List<TextNode> list0 = element0.textNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.prependText("LFyW]?Ezgmc<Zd");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("+A]QZ.UkDMf1;FDs-");
      Element element0 = document0.prependElement("+A]QZ.UkDMf1;FDs-");
      element0.after((Node) document0);
      Element element1 = element0.nextElementSibling();
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document("r");
      Element element0 = document0.prependElement("r");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("r");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.prependElement("r");
      Element element0 = document0.previousElementSibling();
      assertEquals("r", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document("thead");
      Element element0 = document0.prependElement("thead");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("thead");
      Element element0 = document0.prependElement("thead");
      element0.before((Node) document0);
      Element element1 = element0.firstElementSibling();
      assertEquals("#root", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("+A]QZ.UkDMf1;FDs-");
      document0.prependElement("+A]QZ.UkDMf1;FDs-");
      Elements elements0 = document0.getElementsByIndexLessThan((-949));
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document("r");
      Element element0 = document0.prependElement("r");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("Ascr");
      Element element0 = document0.prependElement("r");
      element0.before((Node) document0);
      Element element1 = document0.lastElementSibling();
      assertEquals("r", element1.nodeName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = new Document("+A]QZ.UkDMf1;FDs-");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("r");
      Comment comment0 = new Comment("o^e~l#u[ps,mck6*'#", "o^e~l#u[ps,mck6*'#");
      document0.appendChild(comment0);
      Elements elements0 = document0.getElementsMatchingText("intprod");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("I");
      DataNode dataNode0 = new DataNode("I", "I");
      Element element0 = document0.prependChild(dataNode0);
      Elements elements0 = element0.getElementsMatchingOwnText("I");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("");
      document0.prependText("");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("I");
      document0.prependElement("YCiM)Dx=");
      Elements elements0 = document0.getElementsMatchingOwnText("I");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("Ll'*z~ef0");
      Element element0 = document0.tagName("br");
      element0.prependText("");
      document0.getElementsMatchingText("=3|%]a");
      assertEquals("br", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("Ll'*z~ef0");
      document0.prependElement("br");
      document0.tagName("br");
      document0.getElementsMatchingText("br");
      assertEquals("br", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prependElement("textarea");
      element0.prependText("LFyW]?Ezgmc<Zd");
      Elements elements0 = document0.getElementsMatchingText("nwarhk");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("Ll={z~$f0");
      Element element0 = document0.prependElement("#,GA");
      assertEquals("#,ga", element0.tagName());
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.prependText("");
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("I");
      DataNode dataNode0 = DataNode.createFromEncoded("e)7Gpl:)<Y;#b9usf", "e)7Gpl:)<Y;#b9usf");
      Element element0 = document0.prependChild(dataNode0);
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = new Document("Ll={z~$f0");
      Element element0 = document0.prependElement("#,GA");
      Element element1 = element0.prependText("org.jsoup.nodes.element");
      assertEquals("#,ga", element1.tagName());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = new Document("I");
      DataNode dataNode0 = DataNode.createFromEncoded("e)7Gpl:)<Y;#b9usf", "e)7Gpl:)<Y;#b9usf");
      document0.prependChild(dataNode0);
      String string0 = document0.data();
      assertEquals("e)7Gpl:)<Y;#b9usf", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = new Document("I");
      document0.prependElement("I");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = new Document("I");
      Element element0 = document0.prependText("I");
      String string0 = element0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("ICSqdB4");
      document0.toggleClass("ICSqdB4");
      Elements elements0 = document0.getElementsByClass("ICSqdB4");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.toggleClass("");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = new Document("r");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prependElement("textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.tagName("textarea");
      // Undeclared exception!
      try { 
        element0.val("textarea");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = new Document("</");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "</");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      document0.outerHtmlHead(stringBuilder0, 120160, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = new Document("</");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "</");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, 120160, document_OutputSettings1);
      assertEquals("</<#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("I");
      document0.prependElement("I");
      Element element0 = document0.prependText("I");
      String string0 = element0.toString();
      assertEquals("I\n<i></i>", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = new Document("Ll={z~$f0");
      Element element0 = document0.prependElement("#,GA");
      element0.prependText("org.jsoup.nodes.element");
      String string0 = document0.toString();
      assertEquals("<#,ga>\n org.jsoup.nodes.element\n</#,ga>", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      String string0 = element0.toString();
      assertEquals("<br />", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Tag tag0 = Tag.valueOf("dcy");
      Element element0 = new Element(tag0, "I");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      element0.outerHtmlTail(stringBuilder0, (-1014), document_OutputSettings1);
      assertEquals("</dcy>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("I");
      Element element0 = document0.prependElement("I");
      element0.prependText("I");
      String string0 = document0.toString();
      assertEquals("<i>I</i>", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = new Document("I");
      document0.hashCode();
  }
}
