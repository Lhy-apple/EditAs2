/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:41:52 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.io.OutputStreamWriter;
import java.io.StringWriter;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLTimeoutException;
import java.util.LinkedHashSet;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(appendable0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("<#,cgKFn/H5$D&2l<V");
      String string0 = cSVFormat1.format(objectArray0);
      assertEquals("\"<#,cgKFn/H5$D&2l<V\",\"<#,cgKFn/H5$D&2l<V\",\"<#,cgKFn/H5$D&2l<V\",\"<#,cgKFn/H5$D&2l<V\",\"<#,cgKFn/H5$D&2l<V\",\"<#,cgKFn/H5$D&2l<V\",\"<#,cgKFn/H5$D&2l<V\"", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('A');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringWriter0);
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('1');
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[10];
      objectArray0[2] = (Object) cSVFormat1;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(10, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('0');
      StringWriter stringWriter0 = new StringWriter();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException@\\0\\0\\0\\0\\0\\0\\0\\0\\03\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character('N');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat2);
      Object[] objectArray0 = new Object[6];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\n\n\n\n\n\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      StringWriter stringWriter0 = new StringWriter();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      StringWriter stringWriter0 = new StringWriter();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecords((Iterable<?>) sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("^-ZrUZUIRF");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat1);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"^-ZrUZUIRF\"\r\n\"^-ZrUZUIRF\"\r\n\"^-ZrUZUIRF\"\r\n\"^-ZrUZUIRF\"\r\n\"^-ZrUZUIRF\"\r\n\"^-ZrUZUIRF\"\r\n\"^-ZrUZUIRF\"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Wn>b}a");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"Wn>b}a\"\r\n\"Wn>b}a\"\r\n\"Wn>b}a\"\r\n\"Wn>b}a\"\r\n\"Wn>b}a\"\r\n\"Wn>b}a\"\r\n\"Wn>b}a\"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("\"){|d!SA+n<,hP\",\"){|d!SA+n<,hP\",\"){|d!SA+n<,hP\",\"){|d!SA+n<,hP\",\"){|d!SA+n<,hP\",\"){|d!SA+n<,hP\",\"){|d!SA+n<,hP\"");
      String string0 = cSVFormat1.format(objectArray0);
      assertEquals("\"\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\"\",\"\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\"\",\"\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\"\",\"\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\"\",\"\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\"\",\"\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\"\",\"\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\",\"\"){|d!SA+n<,hP\"\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('0');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stringWriter0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Unexpected Quote value: ");
      String string0 = cSVFormat1.format(objectArray0);
      assertEquals("\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \",\"Unexpected Quote value: \"", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      cSVPrinter0.printComment("\"<#,cgKFn/H5$D&2l<V\",\"<#,cgKFn/H5$D&2l<V\",\"<#,cgKFn/H5$D&2l<V\",\"<#,cgKFn/H5$D&2l<V\",\"<#,cgKFn/H5$D&2l<V\",\"<#,cgKFn/H5$D&2l<V\",\"<#,cgKFn/H5$D&2l<V\"");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('h');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.print(cSVFormat0);
      cSVPrinter0.printComment("=\r\n");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('g');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment("\n");
      assertEquals("g \r\ng \r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('h');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment("}\r");
      assertEquals("h }\r\nh \r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('g');
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringWriter0);
      cSVPrinter0.printComment("\r-");
      assertEquals("g \r\ng -\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      assertEquals("\"\"\r\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      StringWriter stringWriter0 = new StringWriter();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringWriter0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) sQLTimeoutException0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("g}M;");
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat0);
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(102).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(true, false).when(resultSet0).next();
      cSVPrinter0.printRecords(resultSet0);
  }
}
