/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:53:24 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.ClassKey;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.HierarchicType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.type.TypeParser;
import java.lang.reflect.Array;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Type;
import java.lang.reflect.WildcardType;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ThaiBuddhistEra;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeFactory_ESTest extends TypeFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      objectMapper0.setTypeFactory(typeFactory0);
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      objectMapper0.reader((Class<?>) class0);
      TypeFactory typeFactory1 = TypeFactory.defaultInstance();
      assertSame(typeFactory1, typeFactory0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayList> class0 = ArrayList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType javaType1 = typeFactory0.moreSpecificType(javaType0, collectionType0);
      assertFalse(javaType1.isEnumType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<String> class0 = String.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeFactory typeFactory0 = TypeFactory.instance;
      TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
      JavaType javaType0 = typeFactory0._constructType(genericArrayType0, typeBindings0);
      assertFalse(javaType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionType> class0 = CollectionType.class;
      // Undeclared exception!
      try { 
        typeFactory0.constructParametricType(class0, (JavaType[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<CollectionType>[] classArray0 = (Class<CollectionType>[]) Array.newInstance(Class.class, 2);
      Class<CollectionType> class1 = CollectionType.class;
      classArray0[0] = class1;
      classArray0[1] = class1;
      JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class0, classArray0);
      assertFalse(javaType0.isAbstract());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
      assertTrue(javaType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      assertEquals(2, mapType0.containedTypeCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      typeFactory0.clearCache();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      JavaType javaType0 = typeFactory0.moreSpecificType(collectionLikeType0, (JavaType) null);
      assertTrue(javaType0.isCollectionLikeType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayList> class0 = ArrayList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      assertFalse(collectionType0.isFinal());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ClassKey> class0 = ClassKey.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
      assertTrue(collectionLikeType0.isFinal());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayList> class0 = ArrayList.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      // Undeclared exception!
      try { 
        typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Boolean> class0 = Boolean.TYPE;
      TypeReference<ChronoLocalDate> typeReference0 = (TypeReference<ChronoLocalDate>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(typeReference0).getType();
      JavaType javaType0 = typeFactory0.constructType(typeReference0);
      assertTrue(javaType0.isAbstract());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      assertFalse(mapType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType((Class<?>) class0, (JavaType) simpleType0);
      assertEquals(1, collectionLikeType0.containedTypeCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<String> class0 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      assertFalse(mapLikeType0.isAbstract());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      try { 
        typeFactory0.constructFromCanonical("|]EJ+Wz yIkIc1W3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse type '|]EJ+Wz yIkIc1W3' (remaining: ''): Can not locate class '|]EJ+Wz yIkIc1W3', problem: Class '|]EJ+Wz yIkIc1W3.class' should be in target project, but could not be found!
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Integer> class0 = Integer.TYPE;
      JavaType[] javaTypeArray0 = new JavaType[0];
      JavaType javaType0 = typeFactory0.constructSimpleType(class0, javaTypeArray0);
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        typeFactory0.constructSpecializedType(javaType0, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not assignable to int
         //
         verifyException("com.fasterxml.jackson.databind.JavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      // Undeclared exception!
      try { 
        typeFactory0.constructParametricType(class0, (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayList> class0 = ArrayList.class;
      JavaType javaType0 = typeFactory0._unknownType();
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, javaType0, javaType0);
      assertTrue(mapLikeType0.isContainerType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
      assertTrue(arrayType0.isContainerType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer());
      doReturn((Type[]) null).when(wildcardType0).getUpperBounds();
      Class<ArrayType> class0 = ArrayType.class;
      TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
      // Undeclared exception!
      try { 
        typeFactory0._constructType(wildcardType0, typeBindings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeModifier[] typeModifierArray0 = new TypeModifier[2];
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory0 = new TypeFactory((TypeParser) null, typeModifierArray0);
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      assertNotSame(typeFactory0, typeFactory1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier[] typeModifierArray0 = new TypeModifier[1];
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifierArray0[0]);
      assertNotSame(typeFactory0, typeFactory1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      assertNotSame(typeFactory0, typeFactory1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      Class<?> class0 = TypeFactory.rawClass(simpleType0);
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = TypeFactory.rawClass(class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      JavaType javaType0 = typeFactory0._unknownType();
      JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
      assertTrue(javaType1.isMapLikeType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Integer> class0 = Integer.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
      JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
      assertSame(javaType0, javaType1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayList> class0 = ArrayList.class;
      JavaType javaType0 = typeFactory0._unknownType();
      JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
      assertFalse(javaType1.isEnumType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayList> class0 = ArrayList.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      // Undeclared exception!
      try { 
        typeFactory0.constructSpecializedType(simpleType0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Class not subtype of [simple type, class int]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayList> class0 = ArrayList.class;
      SimpleType simpleType0 = (SimpleType)typeFactory0._unknownType();
      SimpleType simpleType1 = simpleType0.withTypeHandler(typeFactory0);
      CollectionType collectionType0 = (CollectionType)typeFactory0.constructSpecializedType(simpleType1, class0);
      assertFalse(collectionType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
      // Undeclared exception!
      try { 
        typeFactory0.findTypeParameters(typeBindings0.UNBOUND, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a subtype of java.lang.String
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Integer> class0 = Integer.TYPE;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class0, classArray0);
      JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(javaType0, class0);
      assertNull(javaTypeArray0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Module> class0 = Module.class;
      Class<Object> class1 = Object.class;
      JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class1);
      assertNull(javaTypeArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, simpleType0);
      assertFalse(javaType0.isContainerType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ArrayList> class0 = ArrayList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType javaType1 = typeFactory0.moreSpecificType(collectionType0, javaType0);
      assertSame(collectionType0, javaType1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      // Undeclared exception!
      try { 
        typeFactory0.constructType((Type) null, (Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JavaType javaType0 = typeFactory0.constructType((Type) simpleType0, (JavaType) simpleType0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayList> class0 = ArrayList.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (JavaType) null);
      assertEquals(1, javaType0.containedTypeCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      TypeParser typeParser0 = new TypeParser(typeFactory0);
      TypeModifier[] typeModifierArray0 = new TypeModifier[0];
      TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
      JavaType javaType0 = typeFactory1.constructType((Type) class0, (Class<?>) class0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeParser typeParser0 = new TypeParser(typeFactory0);
      TypeModifier[] typeModifierArray0 = new TypeModifier[1];
      TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
      Class<BinaryNode> class0 = BinaryNode.class;
      // Undeclared exception!
      try { 
        typeFactory1.constructArrayType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      // Undeclared exception!
      try { 
        typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter type mismatch for java.time.chrono.ThaiBuddhistEra (and target java.time.chrono.ThaiBuddhistEra): expected 0 parameters, was given 1
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      Class<SimpleModule>[] classArray0 = (Class<SimpleModule>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        typeFactory0.constructParametrizedType(class0, class0, classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Need exactly 2 parameter types for Map types (java.util.HashMap)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<ArrayList> class0 = ArrayList.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionType> class1 = CollectionType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      // Undeclared exception!
      try { 
        typeFactory0.constructParametrizedType(class0, class1, javaTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Need exactly 1 parameter type for Collection types (java.util.ArrayList)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
      assertTrue(javaType0.isAbstract());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Long> class0 = Long.TYPE;
      Class<MapLikeType> class1 = MapLikeType.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class1);
      assertTrue(javaType0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
      assertTrue(javaType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayList> class0 = ArrayList.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, vector0);
      assertFalse(javaType0.isFinal());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      Class<ThaiBuddhistEra> class0 = ThaiBuddhistEra.class;
      JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, linkedList0);
      assertFalse(javaType0.isArrayType());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class0);
      stack0.add((JavaType) mapLikeType0);
      typeFactory0._fromParameterizedClass(class0, stack0);
      assertEquals("[[map type; class java.util.HashMap, [simple type, class com.fasterxml.jackson.databind.type.CollectionLikeType] -> [map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]]]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      stack0.add((JavaType) null);
      stack0.push((JavaType) null);
      // Undeclared exception!
      try { 
        typeFactory0._fromParameterizedClass(class0, stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Stack<JavaType> stack0 = new Stack<JavaType>();
      Class<ArrayType> class0 = ArrayType.class;
      JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, stack0);
      assertFalse(javaType0.isAbstract());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayList> class0 = ArrayList.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      stack0.add((JavaType) simpleType0);
      JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, stack0);
      assertTrue(javaType0.hasGenericTypes());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Stack<JavaType> stack0 = new Stack<JavaType>();
      stack0.add((JavaType) null);
      Class<ArrayType> class0 = ArrayType.class;
      // Undeclared exception!
      try { 
        typeFactory0._fromParameterizedClass(class0, stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter type mismatch for com.fasterxml.jackson.databind.type.ArrayType (and target com.fasterxml.jackson.databind.type.ArrayType): expected 0 parameters, was given 1
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
      assertFalse(javaType0.isArrayType());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class0);
      JavaType javaType0 = typeFactory0._resolveVariableViaSubTypes((HierarchicType) null, "Can not construct instance of ", typeBindings0);
      assertFalse(javaType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<ClassKey> class0 = ClassKey.class;
      Class<Module> class1 = Module.class;
      // Undeclared exception!
      try { 
        typeFactory0.findTypeParameters(class0, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ClassKey is not a subtype of com.fasterxml.jackson.databind.Module
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<HashMap> class0 = HashMap.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      HierarchicType hierarchicType0 = typeFactory0._findSuperInterfaceChain(class0, class1);
      assertNull(hierarchicType0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<Object> class1 = Object.class;
      HierarchicType hierarchicType0 = typeFactory0._findSuperInterfaceChain(class0, class1);
      assertFalse(hierarchicType0.isGeneric());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, stack0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      // Undeclared exception!
      try { 
        typeFactory0._arrayListSuperInterfaceChain((HierarchicType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      // Undeclared exception!
      try { 
        typeFactory0._arrayListSuperInterfaceChain((HierarchicType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }
}
