/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:06:15 GMT 2023
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.util.EnumResolver;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.net.URI;
import java.net.URL;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Currency;
import java.util.Date;
import java.util.Locale;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdKeyDeserializer_ESTest extends StdKeyDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<URI> class0 = URI.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      URI uRI0 = (URI)stdKeyDeserializer0.deserializeKey("9dc", (DeserializationContext) null);
      assertEquals((-1), uRI0.getPort());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Long> class0 = Long.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      try { 
        stdKeyDeserializer0._parse("REQUIRE_SETTERS_FOR_GETTERS", (DeserializationContext) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"REQUIRE_SETTERS_FOR_GETTERS\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Float> class0 = Float.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("com.fasterxml.jackson.databind.util.ClassUtil$EmptyIterator", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Long> class0 = Long.class;
      FromStringDeserializer<Long> fromStringDeserializer0 = (FromStringDeserializer<Long>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(399, class0, fromStringDeserializer0);
      Class<?> class1 = stdKeyDeserializer0.getKeyClass();
      assertEquals("class java.lang.Long", class1.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      Object object0 = stdKeyDeserializer_StringKD0.deserializeKey("!!y=:PB(qg", (DeserializationContext) null);
      assertEquals("!!y=:PB(qg", object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StdKeyDeserializer.EnumKD stdKeyDeserializer_EnumKD0 = null;
      try {
        stdKeyDeserializer_EnumKD0 = new StdKeyDeserializer.EnumKD((EnumResolver) null, (AnnotatedMethod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$EnumKD", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StdKeyDeserializer.StringCtorKeyDeserializer stdKeyDeserializer_StringCtorKeyDeserializer0 = null;
      try {
        stdKeyDeserializer_StringCtorKeyDeserializer0 = new StdKeyDeserializer.StringCtorKeyDeserializer((Constructor<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringCtorKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StdKeyDeserializer.StringFactoryKeyDeserializer stdKeyDeserializer_StringFactoryKeyDeserializer0 = null;
      try {
        stdKeyDeserializer_StringFactoryKeyDeserializer0 = new StdKeyDeserializer.StringFactoryKeyDeserializer((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<String> class0 = String.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = (StdKeyDeserializer.StringKD)StdKeyDeserializer.forType(class0);
      try { 
        stdKeyDeserializer_StringKD0._parse("V<", (DeserializationContext) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal error: unknown key type class java.lang.Object
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      UUID uUID0 = (UUID)stdKeyDeserializer0._parse("MyLMnAku", (DeserializationContext) null);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      try { 
        stdKeyDeserializer0._parse("", (DeserializationContext) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Date> class0 = Date.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey(";p:{", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      Object object0 = stdKeyDeserializer0.deserializeKey((String) null, (DeserializationContext) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("h u-h9qC-h,", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Character> class0 = Character.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      Object object0 = stdKeyDeserializer0.deserializeKey("0", (DeserializationContext) null);
      assertEquals('0', object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      Object object0 = stdKeyDeserializer0._parse("1", (DeserializationContext) null);
      assertEquals((short)1, object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Double> class0 = Double.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("H/R", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      Locale locale0 = (Locale)stdKeyDeserializer0.deserializeKey("no long/Long-argument constructor/factory method to deserialize from Number value (%s)", (DeserializationContext) null);
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<URL> class0 = URL.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      try { 
        stdKeyDeserializer0._parse("Unexpected close marker '", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      try { 
        stdKeyDeserializer0._parse("6Z", (DeserializationContext) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNull(stdKeyDeserializer0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      FromStringDeserializer<ChronoLocalDate> fromStringDeserializer0 = (FromStringDeserializer<ChronoLocalDate>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(fromStringDeserializer0)._deserialize(anyString() , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("1", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FromStringDeserializer<ChronoLocalDate> fromStringDeserializer0 = (FromStringDeserializer<ChronoLocalDate>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(fromStringDeserializer0)._deserialize(anyString() , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("5a]l+&'ZvG", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("6Z", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(15, class0);
      try { 
        stdKeyDeserializer0._parse(",H(,Dz91)o-8B v", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class0 = String.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(1, class0, (FromStringDeserializer<?>) null);
      Object object0 = stdKeyDeserializer0.deserializeKey("true", defaultDeserializationContext_Impl0);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class0 = String.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(1, class0, (FromStringDeserializer<?>) null);
      Object object0 = stdKeyDeserializer0._parse("false", defaultDeserializationContext_Impl0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      Object object0 = stdKeyDeserializer0._parse("5", (DeserializationContext) null);
      assertEquals((byte)5, object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Character> class0 = Character.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("`D{+1", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JsonDeserializer<Currency> jsonDeserializer0 = (JsonDeserializer<Currency>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Object object0 = stdKeyDeserializer_DelegatingKD0.deserializeKey((String) null, deserializationContext0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JsonDeserializer<Currency> jsonDeserializer0 = (JsonDeserializer<Currency>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer_DelegatingKD0.deserializeKey("not a valid representation: %s", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Locale locale0 = Locale.PRC;
      Currency currency0 = Currency.getInstance(locale0);
      JsonDeserializer<Currency> jsonDeserializer0 = (JsonDeserializer<Currency>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(currency0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Currency currency1 = (Currency)stdKeyDeserializer_DelegatingKD0.deserializeKey("not a valid representation: %s", defaultDeserializationContext_Impl0);
      assertEquals("CNY", currency1.getCurrencyCode());
  }
}
