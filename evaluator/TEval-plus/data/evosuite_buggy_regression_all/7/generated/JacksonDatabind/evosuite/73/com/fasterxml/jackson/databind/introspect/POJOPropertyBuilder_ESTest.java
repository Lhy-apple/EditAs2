/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:07:48 GMT 2023
 */

package com.fasterxml.jackson.databind.introspect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class POJOPropertyBuilder_ESTest extends POJOPropertyBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      POJOPropertyBuilder pOJOPropertyBuilder0 = null;
      try {
        pOJOPropertyBuilder0 = new POJOPropertyBuilder((POJOPropertyBuilder) null, (PropertyName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct(") to output; max is 0x10FFFF as per RFC 4627", ") to output; max is 0x10FFFF as per RFC 4627");
      POJOPropertyBuilder.Linked<AnnotatedField> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<AnnotatedField>((AnnotatedField) null, (POJOPropertyBuilder.Linked<AnnotatedField>) null, propertyName0, true, true, true);
      POJOPropertyBuilder.MemberIterator<AnnotatedField> pOJOPropertyBuilder_MemberIterator0 = new POJOPropertyBuilder.MemberIterator<AnnotatedField>(pOJOPropertyBuilder_Linked0);
      // Undeclared exception!
      try { 
        pOJOPropertyBuilder_MemberIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$MemberIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct(") to output; max is 0x10FFFF as per RFC 4627", ") to output; max is 0x10FFFF as per RFC 4627");
      POJOPropertyBuilder.Linked<AnnotatedField> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<AnnotatedField>((AnnotatedField) null, (POJOPropertyBuilder.Linked<AnnotatedField>) null, propertyName0, true, true, true);
      POJOPropertyBuilder.MemberIterator<AnnotatedField> pOJOPropertyBuilder_MemberIterator0 = new POJOPropertyBuilder.MemberIterator<AnnotatedField>(pOJOPropertyBuilder_Linked0);
      assertTrue(pOJOPropertyBuilder_MemberIterator0.hasNext());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      pOJOPropertyBuilder_MemberIterator0.forEachRemaining(consumer0);
      assertTrue(pOJOPropertyBuilder_Linked0.isVisible);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      POJOPropertyBuilder.MemberIterator<AnnotatedMethod> pOJOPropertyBuilder_MemberIterator0 = new POJOPropertyBuilder.MemberIterator<AnnotatedMethod>((POJOPropertyBuilder.Linked<AnnotatedMethod>) null);
      // Undeclared exception!
      try { 
        pOJOPropertyBuilder_MemberIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$MemberIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      POJOPropertyBuilder.Linked<String> pOJOPropertyBuilder_Linked0 = null;
      try {
        pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<String>("`XR0}-r1-N~O@1z9", (POJOPropertyBuilder.Linked<String>) null, (PropertyName) null, true, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not pass true for 'explName' if name is null/empty
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "1qd6,%X{<V-#>53Kx");
      POJOPropertyBuilder.Linked<Object> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<Object>("com.fasterxml.jackson.databind.deser.BeanDeserializerModifier", (POJOPropertyBuilder.Linked<Object>) null, propertyName0, true, false, false);
      assertFalse(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-78));
      PropertyName propertyName0 = new PropertyName(";n");
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<Integer>(integer0, (POJOPropertyBuilder.Linked<Integer>) null, propertyName0, false, false, false);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withNext(pOJOPropertyBuilder_Linked0);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.withoutNext();
      assertFalse(pOJOPropertyBuilder_Linked2.isMarkedIgnored);
      assertNotSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked1);
      assertFalse(pOJOPropertyBuilder_Linked2.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked2.isVisible);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("java.util.ArrayList");
      POJOPropertyBuilder.Linked<PropertyName> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<PropertyName>(propertyName0, (POJOPropertyBuilder.Linked<PropertyName>) null, propertyName0, true, false, true);
      Integer integer0 = Integer.valueOf(1);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked1 = new POJOPropertyBuilder.Linked<Integer>(integer0, (POJOPropertyBuilder.Linked<Integer>) null, pOJOPropertyBuilder_Linked0.name, false, true, true);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.withoutNext();
      assertFalse(pOJOPropertyBuilder_Linked2.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked2.isVisible);
      assertTrue(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked0.isVisible);
      assertSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked1);
      assertTrue(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked2.isMarkedIgnored);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("java.util.ArrayList");
      POJOPropertyBuilder.Linked<PropertyName> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<PropertyName>(propertyName0, (POJOPropertyBuilder.Linked<PropertyName>) null, propertyName0, true, false, true);
      PropertyName propertyName1 = pOJOPropertyBuilder_Linked0.name.withNamespace("java.util.ArrayList");
      POJOPropertyBuilder.Linked<PropertyName> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withValue(propertyName1);
      assertFalse(pOJOPropertyBuilder_Linked0.isVisible);
      assertTrue(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertTrue(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
      assertFalse(pOJOPropertyBuilder_Linked1.isVisible);
      assertTrue(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      assertTrue(pOJOPropertyBuilder_Linked1.isNameExplicit);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("java.util.ArrayList");
      POJOPropertyBuilder.Linked<PropertyName> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<PropertyName>(propertyName0, (POJOPropertyBuilder.Linked<PropertyName>) null, propertyName0, true, true, true);
      POJOPropertyBuilder.Linked<PropertyName> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withValue(propertyName0);
      assertTrue(pOJOPropertyBuilder_Linked1.isVisible);
      assertSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      assertTrue(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
      assertTrue(pOJOPropertyBuilder_Linked1.isNameExplicit);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-88));
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<Integer>(integer0, (POJOPropertyBuilder.Linked<Integer>) null, propertyName0, false, false, false);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked1 = new POJOPropertyBuilder.Linked<Integer>(integer0, pOJOPropertyBuilder_Linked0, (PropertyName) null, false, false, false);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.trimByVisibility();
      assertFalse(pOJOPropertyBuilder_Linked2.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked2.isMarkedIgnored);
      assertSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked1);
      assertFalse(pOJOPropertyBuilder_Linked2.isNameExplicit);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$4");
      Integer integer0 = Integer.getInteger((String) null, (-715));
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<Integer>(integer0, (POJOPropertyBuilder.Linked<Integer>) null, propertyName0, false, false, false);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked1 = new POJOPropertyBuilder.Linked<Integer>(integer0, (POJOPropertyBuilder.Linked<Integer>) null, pOJOPropertyBuilder_Linked0.name, false, false, true);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.withNext(pOJOPropertyBuilder_Linked0);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked3 = pOJOPropertyBuilder_Linked2.withoutIgnored();
      assertNotNull(pOJOPropertyBuilder_Linked3);
      assertFalse(pOJOPropertyBuilder_Linked1.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked2.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked2.isNameExplicit);
      assertSame(pOJOPropertyBuilder_Linked3, pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked1.isNameExplicit);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-78));
      PropertyName propertyName0 = new PropertyName(";n");
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<Integer>(integer0, (POJOPropertyBuilder.Linked<Integer>) null, propertyName0, false, false, false);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withNext(pOJOPropertyBuilder_Linked0);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.withoutIgnored();
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked2.isMarkedIgnored);
      assertNotNull(pOJOPropertyBuilder_Linked2);
      assertNotSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$4");
      Integer integer0 = Integer.getInteger((String) null, (-715));
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<Integer>(integer0, (POJOPropertyBuilder.Linked<Integer>) null, propertyName0, false, false, false);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked1 = new POJOPropertyBuilder.Linked<Integer>(integer0, (POJOPropertyBuilder.Linked<Integer>) null, pOJOPropertyBuilder_Linked0.name, false, false, true);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked0.withNext(pOJOPropertyBuilder_Linked1);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked3 = pOJOPropertyBuilder_Linked2.withoutIgnored();
      assertFalse(pOJOPropertyBuilder_Linked1.isNameExplicit);
      assertFalse(pOJOPropertyBuilder_Linked3.isMarkedIgnored);
      assertFalse(pOJOPropertyBuilder_Linked1.isVisible);
      assertNotSame(pOJOPropertyBuilder_Linked3, pOJOPropertyBuilder_Linked2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-78));
      PropertyName propertyName0 = new PropertyName(";n");
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<Integer>(integer0, (POJOPropertyBuilder.Linked<Integer>) null, propertyName0, false, false, false);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withNext(pOJOPropertyBuilder_Linked0);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.withoutNonVisible();
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertNull(pOJOPropertyBuilder_Linked2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct(") to output; max is 0x10FFFF as per RFC 4627", ") to output; max is 0x10FFFF as per RFC 4627");
      POJOPropertyBuilder.Linked<AnnotatedField> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<AnnotatedField>((AnnotatedField) null, (POJOPropertyBuilder.Linked<AnnotatedField>) null, propertyName0, true, true, true);
      POJOPropertyBuilder.Linked<AnnotatedField> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withoutNonVisible();
      assertTrue(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
      assertNotNull(pOJOPropertyBuilder_Linked1);
      assertSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
      assertTrue(pOJOPropertyBuilder_Linked1.isNameExplicit);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-78));
      PropertyName propertyName0 = new PropertyName(";n");
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<Integer>(integer0, (POJOPropertyBuilder.Linked<Integer>) null, propertyName0, false, false, false);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withNext(pOJOPropertyBuilder_Linked0);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.append(pOJOPropertyBuilder_Linked0);
      assertNotSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked1);
      assertFalse(pOJOPropertyBuilder_Linked2.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked2.isMarkedIgnored);
      assertFalse(pOJOPropertyBuilder_Linked2.isNameExplicit);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$4");
      Integer integer0 = Integer.getInteger((String) null, (-715));
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<Integer>(integer0, (POJOPropertyBuilder.Linked<Integer>) null, propertyName0, false, false, false);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withNext(pOJOPropertyBuilder_Linked0);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.trimByVisibility();
      assertFalse(pOJOPropertyBuilder_Linked0.isNameExplicit);
      assertNotSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked0);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertFalse(pOJOPropertyBuilder_Linked0.isVisible);
      assertSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(808);
      PropertyName propertyName0 = new PropertyName("");
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<Integer>(integer0, (POJOPropertyBuilder.Linked<Integer>) null, propertyName0, false, false, false);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked1 = new POJOPropertyBuilder.Linked<Integer>(integer0, pOJOPropertyBuilder_Linked0, (PropertyName) null, false, true, false);
      assertFalse(pOJOPropertyBuilder_Linked1.isNameExplicit);
      
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked2 = pOJOPropertyBuilder_Linked1.trimByVisibility();
      assertNotSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked0);
      assertTrue(pOJOPropertyBuilder_Linked2.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked2.isMarkedIgnored);
      assertFalse(pOJOPropertyBuilder_Linked1.isMarkedIgnored);
      assertNotSame(pOJOPropertyBuilder_Linked2, pOJOPropertyBuilder_Linked1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer((-88));
      PropertyName propertyName0 = new PropertyName("");
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked0 = new POJOPropertyBuilder.Linked<Integer>(integer0, (POJOPropertyBuilder.Linked<Integer>) null, propertyName0, false, false, false);
      POJOPropertyBuilder.Linked<Integer> pOJOPropertyBuilder_Linked1 = pOJOPropertyBuilder_Linked0.withNext(pOJOPropertyBuilder_Linked0);
      pOJOPropertyBuilder_Linked1.toString();
      assertFalse(pOJOPropertyBuilder_Linked0.isVisible);
      assertFalse(pOJOPropertyBuilder_Linked0.isMarkedIgnored);
      assertNotSame(pOJOPropertyBuilder_Linked1, pOJOPropertyBuilder_Linked0);
  }
}
