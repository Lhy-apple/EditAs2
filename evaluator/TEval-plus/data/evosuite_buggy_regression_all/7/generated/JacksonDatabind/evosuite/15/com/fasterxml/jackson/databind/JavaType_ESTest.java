/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:52:24 GMT 2023
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JavaType_ESTest extends JavaType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isMapLikeType());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      objectMapper0.reader((JavaType) simpleType0);
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Throwable> class0 = Throwable.class;
      ObjectReader objectReader0 = objectMapper0.reader((Class<?>) class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      String string0 = simpleType0.getGenericSignature();
      assertEquals("Ljava/lang/Object;", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      String string0 = simpleType0.getErasedSignature();
      assertEquals("Ljava/lang/Object;", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JavaType javaType0 = simpleType0.widenBy(class0);
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isFinal());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      boolean boolean0 = collectionType0.useStaticType();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.getContentType();
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      Class<Object> class0 = Object.class;
      MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
      mapType0.isFinal();
      assertFalse(mapType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      Class<Object> class0 = Object.class;
      JavaType javaType0 = simpleType0.narrowBy(class0);
      assertSame(javaType0, simpleType0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      Class<SerializationFeature> class0 = SerializationFeature.class;
      JavaType javaType0 = simpleType0.forcedNarrowBy(class0);
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isEnumType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      Class<Object> class0 = Object.class;
      MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
      JavaType javaType0 = mapType0.forcedNarrowBy(class0);
      assertSame(javaType0, mapType0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(" is not assignable to ");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("java.lang.Integer", sQLInvalidAuthorizationSpecException0);
      CollectionType collectionType1 = collectionType0.withTypeHandler(sQLNonTransientConnectionException0);
      Class<Throwable> class1 = Throwable.class;
      JavaType javaType0 = collectionType1.forcedNarrowBy(class1);
      assertFalse(collectionType0.useStaticType());
      assertFalse(javaType0.isFinal());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      JavaType javaType0 = simpleType0.widenBy(class0);
      assertFalse(javaType0.useStaticType());
      assertSame(javaType0, simpleType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, class0, "zvM/ >!M");
      MapType mapType0 = MapType.construct(class0, arrayType0, arrayType0);
      Class<String> class1 = String.class;
      boolean boolean0 = mapType0.hasRawClass(class1);
      assertFalse(boolean0);
      assertFalse(mapType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      boolean boolean0 = mapType0.hasRawClass(class0);
      assertTrue(boolean0);
      assertFalse(mapType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating((Object) defaultSerializerProvider_Impl0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<ObjectReader> class0 = ObjectReader.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      boolean boolean0 = simpleType0.hasGenericTypes();
      assertFalse(boolean0);
      assertFalse(simpleType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, simpleType0);
      Class<String> class1 = String.class;
      ArrayType arrayType0 = ArrayType.construct(collectionLikeType0, "Class ", class1);
      boolean boolean0 = arrayType0.hasGenericTypes();
      assertTrue(boolean0);
      assertFalse(arrayType0.useStaticType());
      assertFalse(simpleType0.hasGenericTypes());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, class0, "zvM/ >!M");
      Class<ObjectReader> class1 = ObjectReader.class;
      MapType mapType0 = MapType.construct(class1, arrayType0, arrayType0);
      JavaType javaType1 = mapType0.containedTypeOrUnknown(0);
      assertFalse(javaType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JavaType javaType0 = simpleType0.containedTypeOrUnknown((-1067));
      assertNotNull(javaType0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      // Undeclared exception!
      try { 
        simpleType0.narrowBy(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class int is not assignable to java.lang.Object
         //
         verifyException("com.fasterxml.jackson.databind.JavaType", e);
      }
  }
}
