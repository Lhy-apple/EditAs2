/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:10:37 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LRUMap;
import java.nio.CharBuffer;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReferenceType_ESTest extends ReferenceType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = new ReferenceType(class0, typeBindings0, simpleType0, javaTypeArray0, simpleType0, simpleType0, class0, simpleType0, true);
      Class<Integer> class1 = Integer.class;
      ReferenceType referenceType1 = (ReferenceType)referenceType0.refine(class1, typeBindings0, referenceType0, javaTypeArray0);
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
      Class<Integer> class0 = Integer.class;
      JavaType[] javaTypeArray0 = new JavaType[5];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      Object object0 = new Object();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0, object0, object0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, arrayType0);
      ReferenceType referenceType0 = new ReferenceType(mapLikeType0, simpleType0);
      JavaType javaType0 = referenceType0.getReferencedType();
      assertFalse(javaType0.isEnumType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1]);
      boolean boolean0 = referenceType0.isReferenceType();
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1]);
      String string0 = referenceType0.toString();
      assertEquals("[reference type, class com.fasterxml.jackson.databind.type.MapLikeType<java.lang.Enum<[simple type, class java.lang.Enum]>]", string0);
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      StringBuilder stringBuilder1 = referenceType0.getErasedSignature(stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ReferenceType referenceType1 = (ReferenceType)referenceType0._narrow(class0);
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      boolean boolean0 = referenceType0.hasContentType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      // Undeclared exception!
      try { 
        ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (List<JavaType>) null);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0, (JavaType) simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, mapType0);
      String string0 = referenceType0.getGenericSignature();
      assertEquals("Ljava/lang/Comparable<Ljava/util/HashMap<Ljava/lang/Comparable;Ljava/lang/Comparable;>;>;", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1]);
      JavaType javaType0 = referenceType0.getAnchorType();
      assertFalse(javaType0.useStaticType());
      assertNotNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1]);
      referenceType0.getContentType();
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom(simpleType0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, referenceType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      JavaType[] javaTypeArray0 = new JavaType[0];
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) simpleType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentType(referenceType0);
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAnchorType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType1.equals((Object)referenceType0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (List<JavaType>) null);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0, (JavaType) simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, mapType0);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentType(mapType0);
      assertTrue(referenceType1.isAnchorType());
      assertTrue(referenceType1.isInterface());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) referenceType0, (JavaType) simpleType0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withKeyTypeHandler(object0);
      assertTrue(referenceType0.isAnchorType());
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(referenceType0.useStaticType());
      assertTrue(mapType1.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1]);
      ReferenceType referenceType1 = referenceType0.withTypeHandler((Object) null);
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1]);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(javaTypeArray0[1]);
      boolean boolean0 = referenceType1.equals(referenceType0);
      assertTrue(referenceType0.isAnchorType());
      assertTrue(boolean0);
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler((Object) null);
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) referenceType0, (JavaType) simpleType0);
      MapLikeType mapLikeType0 = mapType0.withKeyValueHandler(referenceType0);
      assertTrue(mapLikeType0.hasHandlers());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(mapLikeType0.equals((Object)mapType0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1]);
      ReferenceType referenceType1 = referenceType0.withValueHandler((Object) null);
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(typeBindings0);
      boolean boolean0 = referenceType1.isAnchorType();
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeFactory typeFactory0 = new TypeFactory((LRUMap<Object, JavaType>) null);
      Class<HashMap> class0 = HashMap.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      ArrayType arrayType0 = new ArrayType(simpleType0, (TypeBindings) null, simpleType0, "\"yfL#f33zxL=v", simpleType0, false);
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) arrayType0, (JavaType) simpleType0);
      ReferenceType referenceType0 = new ReferenceType(mapType0, arrayType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler("\"yfL#f33zxL=v");
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(referenceType1.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[7];
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) mapLikeType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      assertFalse(referenceType2.isAnchorType());
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType0.isAnchorType());
      assertSame(referenceType2, referenceType1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      boolean boolean0 = referenceType0.isAnchorType();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1]);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      boolean boolean0 = referenceType0.equals(resolvedRecursiveType0);
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TypeFactory typeFactory0 = new TypeFactory((LRUMap<Object, JavaType>) null);
      Class<HashMap> class0 = HashMap.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (List<JavaType>) null);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0, (JavaType) simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, mapType0);
      typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) referenceType0, (JavaType) mapType0);
      assertTrue(referenceType0.isInterface());
      assertFalse(referenceType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = new ReferenceType(class0, typeBindings0, simpleType0, javaTypeArray0, simpleType0, simpleType0, class0, simpleType0, true);
      boolean boolean0 = referenceType0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(referenceType0.isAnchorType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1]);
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(javaTypeArray0[1], javaTypeArray0[0]);
      boolean boolean0 = referenceType1.equals(referenceType0);
      assertTrue(referenceType0.isAnchorType());
      assertFalse(boolean0);
      assertFalse(referenceType0.useStaticType());
  }
}
