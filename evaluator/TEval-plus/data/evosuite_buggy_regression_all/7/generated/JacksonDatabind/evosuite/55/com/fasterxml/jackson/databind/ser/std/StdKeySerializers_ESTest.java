/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:03:15 GMT 2023
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.std.StdKeySerializers;
import java.io.OutputStream;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdKeySerializers_ESTest extends StdKeySerializers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getDefault();
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      // Undeclared exception!
      try { 
        stdKeySerializers_Dynamic0.serialize(deserializationFeature0, (JsonGenerator) null, serializerProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
      Object object0 = stdKeySerializers_Dynamic0.readResolve();
      assertSame(object0, stdKeySerializers_Dynamic0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StdKeySerializers.StringKeySerializer stdKeySerializers_StringKeySerializer0 = new StdKeySerializers.StringKeySerializer();
      UUID uUID0 = MockUUID.randomUUID();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, byteArrayBuilder0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        stdKeySerializers_StringKeySerializer0.serialize(uUID0, jsonGeneratorDelegate0, serializerProvider0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.UUID cannot be cast to java.lang.String
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdKeySerializers$StringKeySerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getStdKeySerializer((SerializationConfig) null, (Class<?>) null, true);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getStdKeySerializer((SerializationConfig) null, class0, true);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<String> class0 = String.class;
      JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getStdKeySerializer((SerializationConfig) null, class0, false);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getStdKeySerializer((SerializationConfig) null, class0, true);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Short> class0 = Short.class;
      JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getStdKeySerializer((SerializationConfig) null, class0, false);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        stdKeySerializers_Dynamic0.serialize(class0, (JsonGenerator) null, serializerProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Date> class0 = Date.class;
      JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getStdKeySerializer((SerializationConfig) null, class0, true);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Locale locale0 = Locale.JAPANESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      // Undeclared exception!
      try { 
        stdKeySerializers_Dynamic0.serialize(mockGregorianCalendar0, (JsonGenerator) null, serializerProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      UUID uUID0 = MockUUID.randomUUID();
      // Undeclared exception!
      try { 
        stdKeySerializers_Dynamic0.serialize(uUID0, (JsonGenerator) null, serializerProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<DeserializationFeature> class0 = DeserializationFeature.class;
      JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getStdKeySerializer((SerializationConfig) null, class0, true);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getFallbackKeySerializer((SerializationConfig) null, (Class<?>) null);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.getFallbackKeySerializer((SerializationConfig) null, class0);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonSerializer<Object> jsonSerializer0 = StdKeySerializers.DEFAULT_KEY_SERIALIZER;
      Class<MockCalendar> class0 = MockCalendar.class;
      StdKeySerializers.Default stdKeySerializers_Default0 = new StdKeySerializers.Default((byte)1, class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        stdKeySerializers_Default0.serialize(jsonSerializer0, filteringGeneratorDelegate0, defaultSerializerProvider_Impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.ser.std.StdKeySerializer cannot be cast to java.util.Date
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeySerializers.Default stdKeySerializers_Default0 = new StdKeySerializers.Default((-1201), class0);
      Calendar calendar0 = MockCalendar.getInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        stdKeySerializers_Default0.serialize(calendar0, (JsonGenerator) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 97, objectMapper0, (OutputStream) null);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
      objectMapper0.configure(serializationFeature0, true);
      StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
      stdKeySerializers_Dynamic0.serialize(serializationFeature1, uTF8JsonGenerator0, serializerProvider0);
      assertEquals(62, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StdKeySerializers.Dynamic stdKeySerializers_Dynamic0 = new StdKeySerializers.Dynamic();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.setDefaultKeySerializer(stdKeySerializers_Dynamic0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      // Undeclared exception!
      try { 
        stdKeySerializers_Dynamic0.serialize(deserializationFeature0, (JsonGenerator) null, serializerProvider0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }
}
