/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 30 07:17:55 GMT 2023
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator;
import com.fasterxml.jackson.databind.deser.std.MapDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.type.ClassKey;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLSyntaxErrorException;
import java.time.chrono.ChronoLocalDate;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapDeserializer_ESTest extends MapDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      Class<Object> class0 = Object.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(8, class0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
      try { 
        mapDeserializer0.deserializeWithType((JsonParser) null, (DeserializationContext) null, (TypeDeserializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.MapDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(3, class0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(mapType0, jsonLocationInstantiator0, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      MapDeserializer mapDeserializer1 = new MapDeserializer(mapDeserializer0);
      assertFalse(mapDeserializer1.equals((Object)mapDeserializer0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<String> class1 = String.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(22, class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 5);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer0, coreXMLDeserializers_Std0, (TypeDeserializer) null);
      JavaType javaType0 = mapDeserializer0.getValueType();
      assertFalse(javaType0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(4, class0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 1114);
      // Undeclared exception!
      try { 
        mapDeserializer0.wrapAndThrow(sQLSyntaxErrorException0, jsonLocationInstantiator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can not pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper0.reader(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(8, class0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
      try { 
        mapDeserializer0.findBackReference("_zYu#9uWcqk00>W~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not handle managed/back reference '_zYu#9uWcqk00>W~': type: container deserializer of type com.fasterxml.jackson.databind.deser.std.MapDeserializer returned null for 'getContentDeserializer()'
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(2, class0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
      try { 
        mapDeserializer0.deserialize((JsonParser) null, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.MapDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(7, class0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JavaType javaType0 = mapDeserializer0.getContentType();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<InvocationTargetException> class0 = InvocationTargetException.class;
      Class<ClassKey> class1 = ClassKey.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(10, class1);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "JSON", false, class2);
      MapDeserializer mapDeserializer0 = new MapDeserializer(mapType0, jsonLocationInstantiator0, stdKeyDeserializer0, coreXMLDeserializers_Std0, asExternalTypeDeserializer0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      MapDeserializer mapDeserializer1 = mapDeserializer0.withResolved(stdKeyDeserializer0, (TypeDeserializer) null, coreXMLDeserializers_Std0, linkedHashSet0);
      assertFalse(mapDeserializer1.isCachable());
      assertFalse(mapDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(7, class0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      MapDeserializer mapDeserializer1 = mapDeserializer0.withResolved(stdKeyDeserializer0, (TypeDeserializer) null, mapDeserializer0, linkedHashSet0);
      assertFalse(mapDeserializer1.isCachable());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(3, class0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(mapType0, jsonLocationInstantiator0, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      MapDeserializer mapDeserializer1 = mapDeserializer0.withResolved(stdKeyDeserializer0, (TypeDeserializer) null, (JsonDeserializer<?>) null, linkedHashSet0);
      MapDeserializer mapDeserializer2 = mapDeserializer1.withResolved(stdKeyDeserializer0, (TypeDeserializer) null, (JsonDeserializer<?>) null, linkedHashSet0);
      assertNotSame(mapDeserializer2, mapDeserializer0);
      assertSame(mapDeserializer2, mapDeserializer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(7, class0);
      Class<IntNode> class1 = IntNode.class;
      Class<NamedType> class2 = NamedType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      MapLikeType mapLikeType0 = MapLikeType.construct(class1, simpleType0, simpleType0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(mapLikeType0, jsonLocationInstantiator0, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      assertTrue(mapDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      MapType mapType0 = MapType.construct(class0, simpleType0, simpleType0);
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, (JsonDeserializer<?>) null);
      MapDeserializer mapDeserializer0 = new MapDeserializer(mapType0, jsonLocationInstantiator0, stdKeyDeserializer_DelegatingKD0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      assertTrue(mapDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(6, class0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      String[] stringArray0 = new String[0];
      mapDeserializer0.setIgnorableProperties(stringArray0);
      assertTrue(mapDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(6, class0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      String[] stringArray0 = new String[1];
      mapDeserializer0.setIgnorableProperties(stringArray0);
      assertFalse(mapDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(7, class0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
      try { 
        mapDeserializer0.resolve((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.MapDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(7, class0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
      try { 
        mapDeserializer0.createContextual((DeserializationContext) null, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.enableDefaultTyping();
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper0.reader(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<String> class1 = String.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer((-1), class0);
      HashSet<String> hashSet0 = new HashSet<String>();
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-2223));
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer0, coreXMLDeserializers_Std0, (TypeDeserializer) null);
      MapDeserializer mapDeserializer1 = new MapDeserializer(mapDeserializer0, stdKeyDeserializer0, coreXMLDeserializers_Std0, (TypeDeserializer) null, hashSet0);
      boolean boolean0 = mapDeserializer1.isCachable();
      assertTrue(mapDeserializer0.isCachable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(6, class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 12);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer0, coreXMLDeserializers_Std0, (TypeDeserializer) null);
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      // Undeclared exception!
      try { 
        mapDeserializer0.deserialize(jsonParser0, (DeserializationContext) null, (Map<Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.MapDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(6, class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 12);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer0, coreXMLDeserializers_Std0, (TypeDeserializer) null);
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      mapDeserializer0._readAndBind(jsonParser0, (DeserializationContext) null, (Map<Object, Object>) null);
      assertFalse(jsonParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(22, class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 12);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer0, coreXMLDeserializers_Std0, (TypeDeserializer) null);
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      mapDeserializer0._readAndBindStringMap(jsonParser0, (DeserializationContext) null, (Map<Object, Object>) null);
      assertEquals(1, jsonParser0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(6, class0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        mapDeserializer0.wrapAndThrow(mockError0, (Object) null, "SXV&ABV");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(5, class0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        mapDeserializer0.wrapAndThrow(mockIOException0, (Object) null, "com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(7, class0);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, jsonLocationInstantiator0, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException("7ri~!-f(79y");
      try { 
        mapDeserializer0.wrapAndThrow(jsonMappingException0, jsonLocationInstantiator0, "7ri~!-f(79y");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }
}
