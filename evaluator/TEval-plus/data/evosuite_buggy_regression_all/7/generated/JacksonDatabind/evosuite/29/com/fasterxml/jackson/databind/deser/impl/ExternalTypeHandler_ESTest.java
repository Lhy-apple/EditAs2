/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:57:43 GMT 2023
 */

package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator;
import com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer;
import com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.type.SimpleType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExternalTypeHandler_ESTest extends ExternalTypeHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
      PropertyName propertyName0 = new PropertyName("]Y;rcM&0W", "]Y;rcM&0W");
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "]Y;rcM&0W", false, class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, class0, annotationMap0, 58);
      Object object0 = externalTypeHandler0.complete((JsonParser) null, (DeserializationContext) null, (Object) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 58, object0, propertyMetadata0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asPropertyTypeDeserializer0);
      ExternalTypeHandler externalTypeHandler1 = externalTypeHandler_Builder0.build();
      ExternalTypeHandler externalTypeHandler2 = new ExternalTypeHandler(externalTypeHandler1);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[1];
      settableBeanPropertyArray0[0] = (SettableBeanProperty) creatorProperty0;
      PropertyBasedCreator propertyBasedCreator0 = new PropertyBasedCreator(jsonLocationInstantiator0, settableBeanPropertyArray0);
      PropertyValueBuffer propertyValueBuffer0 = propertyBasedCreator0.startBuilding((JsonParser) null, (DeserializationContext) null, (ObjectIdReader) null);
      // Undeclared exception!
      try { 
        externalTypeHandler2.complete((JsonParser) null, (DeserializationContext) null, propertyValueBuffer0, propertyBasedCreator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 58
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "!npFHvH<2X", false, class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, class0, annotationMap0, (-126));
      Object object0 = externalTypeHandler0.complete((JsonParser) null, (DeserializationContext) null, (Object) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-126), object0, propertyMetadata0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asPropertyTypeDeserializer0);
      ExternalTypeHandler externalTypeHandler1 = externalTypeHandler_Builder0.build();
      // Undeclared exception!
      try { 
        externalTypeHandler1.handlePropertyValue((JsonParser) null, (DeserializationContext) null, "", externalTypeHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
      ExternalTypeHandler externalTypeHandler1 = externalTypeHandler0.start();
      assertNotSame(externalTypeHandler1, externalTypeHandler0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        externalTypeHandler0._deserialize((JsonParser) null, defaultDeserializationContext_Impl0, (-2414), "sg/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        externalTypeHandler0._deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, externalTypeHandler_Builder0, (-533), "q9&*T)%h3|S=MH");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
      boolean boolean0 = externalTypeHandler0.handleTypePropertyValue((JsonParser) null, (DeserializationContext) null, ">QCn3N\"0TndJR8{@Q", externalTypeHandler_Builder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
      PropertyName propertyName0 = new PropertyName("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", false, class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, class0, annotationMap0, (-131));
      Object object0 = externalTypeHandler0.complete((JsonParser) null, (DeserializationContext) null, (Object) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-131), object0, propertyMetadata0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asPropertyTypeDeserializer0);
      ExternalTypeHandler externalTypeHandler1 = externalTypeHandler_Builder0.build();
      // Undeclared exception!
      try { 
        externalTypeHandler1.handleTypePropertyValue((JsonParser) null, (DeserializationContext) null, "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", annotationMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "!npFHvH<2X", false, class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, class0, annotationMap0, (-126));
      Object object0 = externalTypeHandler0.complete((JsonParser) null, (DeserializationContext) null, (Object) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-126), object0, propertyMetadata0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asPropertyTypeDeserializer0);
      ExternalTypeHandler externalTypeHandler1 = externalTypeHandler_Builder0.build();
      ExternalTypeHandler externalTypeHandler2 = new ExternalTypeHandler(externalTypeHandler1);
      boolean boolean0 = externalTypeHandler2.handleTypePropertyValue((JsonParser) null, (DeserializationContext) null, "", externalTypeHandler1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      boolean boolean0 = externalTypeHandler0.handlePropertyValue((JsonParser) null, defaultDeserializationContext_Impl0, "0k|", externalTypeHandler_Builder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
      PropertyName propertyName0 = PropertyName.construct("!FHvH<2X", "!FHvH<2X");
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "!FHvH<2X", true, class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, class0, annotationMap0, (-143));
      Object object0 = externalTypeHandler0.complete((JsonParser) null, (DeserializationContext) null, (Object) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-143), object0, propertyMetadata0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asPropertyTypeDeserializer0);
      ExternalTypeHandler externalTypeHandler1 = externalTypeHandler_Builder0.build();
      // Undeclared exception!
      try { 
        externalTypeHandler1.handlePropertyValue((JsonParser) null, (DeserializationContext) null, "!FHvH<2X", simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = SimpleType.construct(class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, (TypeIdResolver) null, "!npFHvH<2X", false, class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, class0, annotationMap0, (-126));
      Object object0 = externalTypeHandler0.complete((JsonParser) null, (DeserializationContext) null, (Object) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, simpleType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-126), object0, propertyMetadata0);
      externalTypeHandler_Builder0.addExternal(creatorProperty0, asPropertyTypeDeserializer0);
      ExternalTypeHandler externalTypeHandler1 = externalTypeHandler_Builder0.build();
      ExternalTypeHandler externalTypeHandler2 = new ExternalTypeHandler(externalTypeHandler1);
      Object object1 = externalTypeHandler2.complete((JsonParser) null, (DeserializationContext) null, (Object) externalTypeHandler_Builder0);
      assertSame(object1, externalTypeHandler_Builder0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExternalTypeHandler.Builder externalTypeHandler_Builder0 = new ExternalTypeHandler.Builder();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ExternalTypeHandler externalTypeHandler0 = externalTypeHandler_Builder0.build();
      // Undeclared exception!
      try { 
        externalTypeHandler0.complete((JsonParser) null, (DeserializationContext) defaultDeserializationContext_Impl0, (PropertyValueBuffer) null, (PropertyBasedCreator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler", e);
      }
  }
}
