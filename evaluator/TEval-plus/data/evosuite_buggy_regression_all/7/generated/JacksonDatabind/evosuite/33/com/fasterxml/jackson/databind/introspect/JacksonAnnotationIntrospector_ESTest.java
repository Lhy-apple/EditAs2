/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:59:01 GMT 2023
 */

package com.fasterxml.jackson.databind.introspect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.IOException;
import java.lang.annotation.Annotation;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JacksonAnnotationIntrospector_ESTest extends JacksonAnnotationIntrospector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructNoTypeResolverBuilder();
      assertNull(stdTypeResolverBuilder0.getTypeProperty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructStdTypeResolverBuilder();
      assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      ObjectMapper objectMapper0 = new ObjectMapper();
      try { 
        objectMapper0.writeValueAsBytes(basicBeanDescription0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loop has been executed more times than the allowed 10000 (through reference chain: com.fasterxml.jackson.databind.introspect.BasicBeanDescription[\"classInfo\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"contextClass\"]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\"defaultConstructor\"]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\"declaringClass\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
      Object object0 = jacksonAnnotationIntrospector0.findFilterId(annotatedClass0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      Version version0 = jacksonAnnotationIntrospector0.version();
      assertEquals(6, version0.getMinorVersion());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      String string0 = jacksonAnnotationIntrospector0.findEnumValue(jsonInclude_Include0);
      assertEquals("USE_DEFAULTS", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      Class<Object> class0 = Object.class;
      AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
      PropertyName propertyName0 = jacksonAnnotationIntrospector0.findRootName(annotatedClass0);
      assertNull(propertyName0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      String[] stringArray0 = jacksonAnnotationIntrospector0.findPropertiesToIgnore((Annotated) annotatedConstructor0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      List<NamedType> list0 = jacksonAnnotationIntrospector0.findSubtypes(annotatedConstructor0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      String string0 = jacksonAnnotationIntrospector0.findTypeName(annotatedClass0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      ObjectIdInfo objectIdInfo0 = jacksonAnnotationIntrospector0.findObjectReferenceInfo(annotatedConstructor0, (ObjectIdInfo) null);
      assertNull(objectIdInfo0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      Object object0 = jacksonAnnotationIntrospector0.findKeySerializer(annotatedConstructor0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      JsonInclude.Include jsonInclude_Include1 = jacksonAnnotationIntrospector0.findSerializationInclusionForContent(annotatedConstructor0, jsonInclude_Include0);
      assertEquals(JsonInclude.Include.NON_ABSENT, jsonInclude_Include1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      JsonInclude.Value jsonInclude_Value0 = jacksonAnnotationIntrospector0.findPropertyInclusion(annotatedConstructor0);
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      Object object0 = jacksonAnnotationIntrospector0.findKeyDeserializer(annotatedConstructor0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      Object object0 = jacksonAnnotationIntrospector0.findContentDeserializer(annotatedConstructor0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      JavaType javaType0 = TypeFactory.unknownType();
      Class<?> class0 = jacksonAnnotationIntrospector0.findDeserializationKeyType(annotatedConstructor0, javaType0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      Class<?> class0 = jacksonAnnotationIntrospector0.findDeserializationContentType(annotatedConstructor0, (JavaType) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      Object object0 = jacksonAnnotationIntrospector0.findDeserializationContentConverter(annotatedConstructor0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = jacksonAnnotationIntrospector0.findPOJOBuilderConfig(annotatedClass0);
      assertNull(jsonPOJOBuilder_Value0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      Class<AnnotatedConstructor> class0 = AnnotatedConstructor.class;
      Class<?> class1 = jacksonAnnotationIntrospector0._classIfExplicit((Class<?>) null, class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      Class<String> class0 = String.class;
      Class<Annotation> class1 = Annotation.class;
      Class<?> class2 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class1);
      assertEquals(17, class2.getModifiers());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      Class<String> class0 = String.class;
      Class<?> class1 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName("R?B]j/o", "");
      assertEquals("R?B]j/o", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName("", "");
      assertEquals("", propertyName0.getSimpleName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(")", (String) null);
      assertFalse(propertyName0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
      PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(")", ")");
      assertTrue(propertyName0.hasNamespace());
  }
}
