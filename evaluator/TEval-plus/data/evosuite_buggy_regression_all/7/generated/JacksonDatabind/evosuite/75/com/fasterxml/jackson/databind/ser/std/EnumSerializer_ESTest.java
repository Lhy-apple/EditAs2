/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:08:00 GMT 2023
 */

package com.fasterxml.jackson.databind.ser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.ser.std.EnumSerializer;
import com.fasterxml.jackson.databind.util.EnumValues;
import java.time.chrono.ChronoLocalDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EnumSerializer_ESTest extends EnumSerializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EnumSerializer enumSerializer0 = null;
      try {
        enumSerializer0 = new EnumSerializer((EnumValues) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.EnumSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EnumSerializer enumSerializer0 = null;
      try {
        enumSerializer0 = new EnumSerializer((EnumValues) null, (Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.EnumSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonFormat.Value jsonFormat_Value0 = BeanProperty.EMPTY_FORMAT;
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        EnumSerializer.construct(class0, (SerializationConfig) null, (BeanDescription) null, jsonFormat_Value0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.EnumValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.NATURAL;
      JsonFormat.Value jsonFormat_Value0 = JsonFormat.Value.forShape(jsonFormat_Shape0);
      Boolean boolean0 = EnumSerializer._isShapeWrittenUsingIndex(class0, jsonFormat_Value0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<String> class0 = String.class;
      Boolean boolean0 = EnumSerializer._isShapeWrittenUsingIndex(class0, (JsonFormat.Value) null, false);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonFormat.Value jsonFormat_Value0 = new JsonFormat.Value();
      Class<SerializedString> class0 = SerializedString.class;
      Boolean boolean0 = EnumSerializer._isShapeWrittenUsingIndex(class0, jsonFormat_Value0, true);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.SCALAR;
      JsonFormat.Value jsonFormat_Value0 = JsonFormat.Value.forShape(jsonFormat_Shape0);
      Class<Object> class0 = Object.class;
      Boolean boolean0 = EnumSerializer._isShapeWrittenUsingIndex(class0, jsonFormat_Value0, false);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.STRING;
      JsonFormat.Value jsonFormat_Value0 = JsonFormat.Value.forShape(jsonFormat_Shape0);
      Boolean boolean0 = EnumSerializer._isShapeWrittenUsingIndex(class0, jsonFormat_Value0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.ARRAY;
      JsonFormat.Value jsonFormat_Value0 = JsonFormat.Value.forShape(jsonFormat_Shape0);
      Class<CreatorProperty> class0 = CreatorProperty.class;
      Boolean boolean0 = EnumSerializer._isShapeWrittenUsingIndex(class0, jsonFormat_Value0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.NUMBER_FLOAT;
      JsonFormat.Value jsonFormat_Value0 = JsonFormat.Value.forShape(jsonFormat_Shape0);
      Class<Integer> class0 = Integer.TYPE;
      Boolean boolean0 = EnumSerializer._isShapeWrittenUsingIndex(class0, jsonFormat_Value0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.OBJECT;
      JsonFormat.Value jsonFormat_Value0 = JsonFormat.Value.forShape(jsonFormat_Shape0);
      Class<CreatorProperty> class0 = CreatorProperty.class;
      // Undeclared exception!
      try { 
        EnumSerializer._isShapeWrittenUsingIndex(class0, jsonFormat_Value0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported serialization shape (OBJECT) for Enum com.fasterxml.jackson.databind.deser.CreatorProperty, not supported as property annotation
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.EnumSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.OBJECT;
      JsonFormat.Value jsonFormat_Value0 = JsonFormat.Value.forShape(jsonFormat_Shape0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        EnumSerializer._isShapeWrittenUsingIndex(class0, jsonFormat_Value0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unsupported serialization shape (OBJECT) for Enum java.lang.Object, not supported as class annotation
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.EnumSerializer", e);
      }
  }
}
