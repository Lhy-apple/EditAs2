/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:01:17 GMT 2023
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RawValue;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenBuffer_ESTest extends TokenBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Short short0 = new Short((short)0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      tokenBuffer0.writeString("");
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_STRING, jsonToken0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      tokenBuffer_Parser0.peekNextToken();
      tokenBuffer_Parser0.setCodec(objectMapper1);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, false);
      tokenBuffer_Parser0.getTextCharacters();
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, false, true);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser2, defaultDeserializationContext_Impl0);
      tokenBuffer0.append(tokenBuffer1);
      try { 
        tokenBuffer_Parser1.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000033; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, true);
      PipedReader pipedReader0 = new PipedReader(3);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.writeNumber(9.223372E18F);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) null);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "_C<G>+M&x?Na rSxp[");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper1, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeBoolean(true);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      int int0 = tokenBuffer_Segment0.rawType(8);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Module[] moduleArray0 = new Module[0];
      ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, false);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
      objectMapper2.configure(serializationFeature0, false);
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospectors((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      String string0 = "com.fasterxml.jackson.databind.cfg.MapperConfigBase";
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("mJx$uk4N0I", 40, 40);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[6];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(treeMap0);
      objectMapper0.reader((InjectableValues) injectableValues_Std0);
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      Float float0 = new Float((-1889.0385F));
      arrayNode0.add(float0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, deserializationContext0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'd';
      arrayNode0.numberNode(0.0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw(charArray0, 645, 645);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      objectMapper0.configure(jsonParser_Feature0, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      MathContext mathContext0 = MathContext.DECIMAL64;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("U(I2Zvp#o$';", 9, 11);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.serialize((JsonGenerator) null);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      assertNotNull(tokenBuffer0);
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      SerializedString serializedString0 = new SerializedString("");
      assertNotNull(serializedString0);
      assertEquals("", serializedString0.toString());
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.getValue());
      
      tokenBuffer0.writeString((SerializableString) serializedString0);
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals("", serializedString0.toString());
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.getValue());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertNotNull(tokenBuffer0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      byte[] byteArray0 = new byte[0];
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      assertNotNull(jsonFactory2);
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      assertNotNull(jsonFactory3);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser((Reader) stringReader0);
      assertNotNull(readerBasedJsonParser0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser((JsonParser) readerBasedJsonParser0);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawUTF8String(byteArray0, 37, 37);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      JsonLocation jsonLocation0 = tokenBuffer_Parser0.getCurrentLocation();
      assertNotNull(jsonLocation0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Module[] moduleArray0 = new Module[0];
      ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
      assertNotNull(objectMapper1);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, false);
      assertNotNull(objectMapper2);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2, true);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, moduleArray0.length);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, moduleArray0.length);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, false);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, moduleArray0.length);
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(0, moduleArray0.length);
      
      tokenBuffer1.firstToken();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Module[] moduleArray0 = new Module[0];
      ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
      assertNotNull(objectMapper1);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, false);
      assertNotNull(objectMapper2);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospectors((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      assertNotNull(objectMapper3);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, moduleArray0.length);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 0, (Object) null, (Object) objectMapper3, (Object) objectMapper0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      tokenBuffer0.writeNumber(12);
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) jsonToken0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "_C<G>+M&x?Na rSxp[");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      assertNotNull(tokenBuffer0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      
      tokenBuffer0.writeArrayFieldStart("u]gH@JG");
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertEquals(JsonToken.FIELD_NAME, jsonToken0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(jsonToken0.isBoolean());
      assertFalse(jsonToken0.isNumeric());
      assertNull(jsonToken0.asString());
      assertEquals(5, jsonToken0.id());
      assertFalse(jsonToken0.isScalarValue());
      assertFalse(jsonToken0.isStructEnd());
      assertFalse(jsonToken0.isStructStart());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      tokenBuffer0.writeNull();
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      
      tokenBuffer0.writeArrayFieldStart("u]gH@JG");
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      assertEquals(JsonToken.END_OBJECT, jsonToken0);
      assertFalse(jsonToken0.isStructStart());
      assertFalse(jsonToken0.isBoolean());
      assertEquals("}", jsonToken0.asString());
      assertFalse(jsonToken0.isNumeric());
      assertFalse(jsonToken0.isScalarValue());
      assertTrue(jsonToken0.isStructEnd());
      assertEquals(2, jsonToken0.id());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      assertNotNull(tokenBuffer0);
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      tokenBuffer0._appendRaw((short)0, injectableValues_Std0);
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer0.writeNumber((BigDecimal) null);
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = objectMapper0.copy();
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      MathContext mathContext0 = MathContext.DECIMAL32;
      assertNotNull(mathContext0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      assertNull(tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000033; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      assertNotNull(objectMapper1);
      assertEquals(0, deserializationFeatureArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
      ObjectMapper objectMapper2 = objectMapper1.configure(mapperFeature0, true);
      assertNotNull(objectMapper2);
      assertEquals(0, deserializationFeatureArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      ObjectMapper objectMapper3 = objectMapper2.clearProblemHandlers();
      assertNotNull(objectMapper3);
      assertEquals(0, deserializationFeatureArray0.length);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[0];
      ObjectMapper objectMapper4 = objectMapper3.disable(mapperFeatureArray0);
      assertNotNull(objectMapper4);
      assertEquals(0, deserializationFeatureArray0.length);
      assertEquals(0, mapperFeatureArray0.length);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3, true);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, deserializationFeatureArray0.length);
      
      tokenBuffer0.writeNull();
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(0, deserializationFeatureArray0.length);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper2);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      tokenBuffer0.writeObjectId(double0);
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(0, deserializationFeatureArray0.length);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper2);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, deserializationFeatureArray0.length);
      
      int int0 = (-360);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.withoutAttribute((Object) null);
      assertNotNull(objectReader1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectReader objectReader2 = objectReader0.withFeatures(deserializationFeatureArray0);
      assertNotNull(objectReader2);
      assertEquals(3, deserializationFeatureArray0.length);
      assertSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader2, objectReader1);
      assertSame(objectReader2, objectReader0);
      
      ObjectReader objectReader3 = objectReader1.with(locale0);
      assertNotNull(objectReader3);
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertSame(objectReader1, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader3, true);
      assertNotNull(tokenBuffer0);
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      boolean boolean0 = tokenBuffer0.isClosed();
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(boolean0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertSame(objectReader1, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      tokenBuffer_Segment0._tokenTypes = (-1667L);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Class<Object> class0 = Object.class;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      assertNotNull(jsonFormatVisitorWrapper_Base0);
      
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      
      try { 
        tokenBuffer_Parser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000033; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser((Reader) pipedReader0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      assertNotNull(jsonParserDelegate0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertEquals(1, jsonParserDelegate0.getFeatureMask());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParserDelegate0);
      assertNotNull(tokenBuffer0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertEquals(1, jsonParserDelegate0.getFeatureMask());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.deserialize(jsonParserDelegate0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      assertNotNull(tokenBuffer0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      Short short0 = new Short((short)22);
      assertNotNull(short0);
      assertEquals((short)22, (short)short0);
      
      tokenBuffer0._appendRaw((short)22, objectMapper1);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1, true);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper1, false);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertNull(tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertFalse(tokenBuffer2.isClosed());
      
      // Undeclared exception!
      try { 
        tokenBuffer2.append(tokenBuffer0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/databind/JsonMappingException$Reference
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      assertNotNull(tokenBuffer0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      tokenBuffer0.writeNumber((String) null);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      boolean boolean0 = true;
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      assertNotNull(objectIdGenerators_UUIDGenerator0);
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(53, jsonToken0, (Object) objectIdGenerators_UUIDGenerator0, (Object) jsonParser0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.skipChildren();
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser1);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      
      String string0 = tokenBuffer_Parser0.nextTextValue();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(7, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      BigDecimal bigDecimal0 = new BigDecimal((double) (short)0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(jsonParser0, objectMapper1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      assertNotNull(arrayNode0);
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper1);
      assertNotNull(jsonParser0);
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      assertNotNull(tokenBuffer0);
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer0.firstToken();
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      assertNotNull(tokenBuffer0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      tokenBuffer_Parser0.peekNextToken();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertSame(objectMapper0, objectMapper1);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertNull(charArray0);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, false, false);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      
      String string0 = tokenBuffer_Parser0.getCurrentName();
      assertNull(string0);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      String string1 = tokenBuffer_Parser2.getText();
      assertNull(string1);
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      assertNotNull(tokenBuffer0);
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      Short short0 = new Short((short)5);
      assertNotNull(short0);
      assertEquals((short)5, (short)short0);
      
      tokenBuffer0._appendRaw((short)5, injectableValues_Std0);
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1, true);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      assertNotNull(jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      assertNotNull(jsonFactory2);
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser(charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, charArray0.length);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(readerBasedJsonParser0);
      assertNotNull(tokenBuffer0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(1, charArray0.length);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw('O');
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Module[] moduleArray0 = new Module[0];
      ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
      assertNotNull(objectMapper1);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, false);
      assertNotNull(objectMapper2);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospectors((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      assertNotNull(objectMapper3);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      assertNotNull(tokenBuffer0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, moduleArray0.length);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 0, (Object) null, (Object) objectMapper3, (Object) objectMapper0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)99;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeUTF8String(byteArray0, 2000, 46);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper2 = objectMapper1.addHandler(deserializationProblemHandler0);
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      assertNotNull(objectMapper3);
      assertEquals(4, jsonParser_FeatureArray0.length);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(4, jsonParser_FeatureArray0.length);
      
      boolean boolean0 = tokenBuffer0.canWriteBinaryNatively();
      assertTrue(boolean0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(4, jsonParser_FeatureArray0.length);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      tokenBuffer_Parser0.peekNextToken();
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertSame(objectMapper0, objectMapper1);
      
      tokenBuffer_Parser0.overrideCurrentName("write a binary value");
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals("write a binary value", tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertSame(objectMapper0, objectMapper1);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      
      Integer integer0 = new Integer((-3266));
      assertNotNull(integer0);
      assertEquals((-3266), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      assertNotNull(defaultPrettyPrinter0);
      
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      
      tokenBuffer_Parser1.peekNextToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      tokenBuffer_Parser0.setCodec(objectMapper0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      
      char[] charArray0 = tokenBuffer_Parser2.getTextCharacters();
      assertNull(charArray0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      
      TokenBuffer.Parser tokenBuffer_Parser3 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser3);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser3.getTextOffset());
      assertFalse(tokenBuffer_Parser3.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser3.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser3.peekNextToken());
      assertTrue(tokenBuffer_Parser3.canReadTypeId());
      assertFalse(tokenBuffer_Parser3.hasCurrentToken());
      assertNull(tokenBuffer_Parser3.getCurrentName());
      assertFalse(tokenBuffer_Parser3.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser3.getFormatFeatures());
      assertFalse(tokenBuffer_Parser3.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser3.canReadObjectId());
      assertNull(tokenBuffer_Parser3.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser3.getCurrentTokenId());
      assertNull(tokenBuffer_Parser3.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser3.getFeatureMask());
      assertFalse(tokenBuffer_Parser3.isClosed());
      
      String string0 = tokenBuffer_Parser1.getCurrentName();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Module[] moduleArray0 = new Module[1];
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      Version version0 = tokenBuffer0.version();
      assertNotNull(version0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(6, version0.getMinorVersion());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertTrue(version0.isSnapshot());
      assertEquals(4, version0.getPatchLevel());
      assertEquals(2, version0.getMajorVersion());
      assertFalse(version0.isUknownVersion());
      
      SimpleModule simpleModule0 = new SimpleModule("g}GO4YFy4<", version0);
      assertNotNull(simpleModule0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(6, version0.getMinorVersion());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertTrue(version0.isSnapshot());
      assertEquals(4, version0.getPatchLevel());
      assertEquals(2, version0.getMajorVersion());
      assertFalse(version0.isUknownVersion());
      assertEquals("g}GO4YFy4<", simpleModule0.getModuleName());
      
      moduleArray0[0] = (Module) simpleModule0;
      ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
      assertNotNull(objectMapper1);
      assertEquals(1, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "g}GO4YFy4<");
      assertNotNull(objectMapper2);
      assertEquals(1, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      
      FloatNode floatNode0 = FloatNode.valueOf((-1.0F));
      assertNotNull(floatNode0);
      assertEquals((-1.0F), floatNode0.floatValue(), 0.01F);
      assertEquals((-1.0), floatNode0.doubleValue(), 0.01);
      assertEquals(0, floatNode0.size());
      assertNull(floatNode0.textValue());
      assertEquals("-1.0", floatNode0.asText());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isBigInteger());
      assertEquals((-1L), floatNode0.longValue());
      assertFalse(floatNode0.isDouble());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isShort());
      assertEquals((short) (-1), floatNode0.shortValue());
      assertTrue(floatNode0.isFloat());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals((-1), floatNode0.intValue());
      assertFalse(floatNode0.isInt());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      
      BigDecimal bigDecimal0 = floatNode0.decimalValue();
      assertNotNull(bigDecimal0);
      assertEquals((-1.0F), floatNode0.floatValue(), 0.01F);
      assertEquals((-1.0), floatNode0.doubleValue(), 0.01);
      assertEquals(0, floatNode0.size());
      assertNull(floatNode0.textValue());
      assertEquals("-1.0", floatNode0.asText());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isBigInteger());
      assertEquals((-1L), floatNode0.longValue());
      assertFalse(floatNode0.isDouble());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isShort());
      assertEquals((short) (-1), floatNode0.shortValue());
      assertTrue(floatNode0.isFloat());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals((-1), floatNode0.intValue());
      assertFalse(floatNode0.isInt());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      
      NumericNode numericNode0 = arrayNode0.numberNode(bigDecimal0);
      assertNotNull(numericNode0);
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertEquals((-1.0F), floatNode0.floatValue(), 0.01F);
      assertEquals((-1.0), floatNode0.doubleValue(), 0.01);
      assertEquals(0, floatNode0.size());
      assertNull(floatNode0.textValue());
      assertEquals("-1.0", floatNode0.asText());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isBigInteger());
      assertEquals((-1L), floatNode0.longValue());
      assertFalse(floatNode0.isDouble());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isShort());
      assertEquals((short) (-1), floatNode0.shortValue());
      assertTrue(floatNode0.isFloat());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals((-1), floatNode0.intValue());
      assertFalse(floatNode0.isInt());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertTrue(numericNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, numericNode0.numberType());
      assertFalse(numericNode0.isFloat());
      assertFalse(numericNode0.booleanValue());
      assertFalse(numericNode0.isIntegralNumber());
      assertTrue(numericNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, numericNode0.asToken());
      assertFalse(numericNode0.isLong());
      assertEquals(0, numericNode0.size());
      assertFalse(numericNode0.isDouble());
      assertNull(numericNode0.textValue());
      assertFalse(numericNode0.isShort());
      assertFalse(numericNode0.isInt());
      assertFalse(numericNode0.isBigInteger());
      
      JsonParser jsonParser0 = objectMapper2.treeAsTokens(numericNode0);
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertEquals((-1.0F), floatNode0.floatValue(), 0.01F);
      assertEquals((-1.0), floatNode0.doubleValue(), 0.01);
      assertEquals(0, floatNode0.size());
      assertNull(floatNode0.textValue());
      assertEquals("-1.0", floatNode0.asText());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isBigInteger());
      assertEquals((-1L), floatNode0.longValue());
      assertFalse(floatNode0.isDouble());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isShort());
      assertEquals((short) (-1), floatNode0.shortValue());
      assertTrue(floatNode0.isFloat());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals((-1), floatNode0.intValue());
      assertFalse(floatNode0.isInt());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertTrue(numericNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, numericNode0.numberType());
      assertFalse(numericNode0.isFloat());
      assertFalse(numericNode0.booleanValue());
      assertFalse(numericNode0.isIntegralNumber());
      assertTrue(numericNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, numericNode0.asToken());
      assertFalse(numericNode0.isLong());
      assertEquals(0, numericNode0.size());
      assertFalse(numericNode0.isDouble());
      assertNull(numericNode0.textValue());
      assertFalse(numericNode0.isShort());
      assertFalse(numericNode0.isInt());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(1, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(jsonParser0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertEquals((-1.0F), floatNode0.floatValue(), 0.01F);
      assertEquals((-1.0), floatNode0.doubleValue(), 0.01);
      assertEquals(0, floatNode0.size());
      assertNull(floatNode0.textValue());
      assertEquals("-1.0", floatNode0.asText());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isBigInteger());
      assertEquals((-1L), floatNode0.longValue());
      assertFalse(floatNode0.isDouble());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isShort());
      assertEquals((short) (-1), floatNode0.shortValue());
      assertTrue(floatNode0.isFloat());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals((-1), floatNode0.intValue());
      assertFalse(floatNode0.isInt());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertTrue(numericNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, numericNode0.numberType());
      assertFalse(numericNode0.isFloat());
      assertFalse(numericNode0.booleanValue());
      assertFalse(numericNode0.isIntegralNumber());
      assertTrue(numericNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, numericNode0.asToken());
      assertFalse(numericNode0.isLong());
      assertEquals(0, numericNode0.size());
      assertFalse(numericNode0.isDouble());
      assertNull(numericNode0.textValue());
      assertFalse(numericNode0.isShort());
      assertFalse(numericNode0.isInt());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(1, moduleArray0.length);
      
      tokenBuffer1.close();
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertEquals((-1.0F), floatNode0.floatValue(), 0.01F);
      assertEquals((-1.0), floatNode0.doubleValue(), 0.01);
      assertEquals(0, floatNode0.size());
      assertNull(floatNode0.textValue());
      assertEquals("-1.0", floatNode0.asText());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isBigInteger());
      assertEquals((-1L), floatNode0.longValue());
      assertFalse(floatNode0.isDouble());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isShort());
      assertEquals((short) (-1), floatNode0.shortValue());
      assertTrue(floatNode0.isFloat());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals((-1), floatNode0.intValue());
      assertFalse(floatNode0.isInt());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals(JsonNodeType.NUMBER, numericNode0.getNodeType());
      assertTrue(numericNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, numericNode0.numberType());
      assertFalse(numericNode0.isFloat());
      assertFalse(numericNode0.booleanValue());
      assertFalse(numericNode0.isIntegralNumber());
      assertTrue(numericNode0.isFloatingPointNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, numericNode0.asToken());
      assertFalse(numericNode0.isLong());
      assertEquals(0, numericNode0.size());
      assertFalse(numericNode0.isDouble());
      assertNull(numericNode0.textValue());
      assertFalse(numericNode0.isShort());
      assertFalse(numericNode0.isInt());
      assertFalse(numericNode0.isBigInteger());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(1, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-%,hF XBO");
      assertFalse(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      
      tokenBuffer_Segment0._tokenTypes = (-525L);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser1);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.isClosed());
      
      tokenBuffer0.writeBoolean(false);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      int int0 = tokenBuffer_Segment1.rawType(800);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      // Undeclared exception!
      try { 
        tokenBuffer1.copyCurrentStructure(tokenBuffer_Parser1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-%,hF XBO");
      assertFalse(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      tokenBuffer_Segment0._tokenTypes = (-525L);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      tokenBuffer0.writeNumber(1L);
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " entries)");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setFeatureMask(65535);
      assertNotNull(tokenBuffer1);
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(65535, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(65535, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      MathContext mathContext0 = MathContext.DECIMAL32;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, 8, mathContext0);
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(65535, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertSame(tokenBuffer0, tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertNotNull(tokenBuffer0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setFeatureMask((-859));
      assertNotNull(tokenBuffer1);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals((-859), tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals((-859), tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      charArray0[1] = 'b';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("", (-351), (-351));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      TextNode textNode0 = jsonNodeFactory0.textNode("");
      assertNotNull(textNode0);
      assertFalse(textNode0.isInt());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.booleanValue());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isBigDecimal());
      assertEquals("", textNode0.textValue());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isLong());
      assertEquals("", textNode0.asText());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isIntegralNumber());
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(textNode0);
      assertNotNull(contextAttributes1);
      assertFalse(textNode0.isInt());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.booleanValue());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isBigDecimal());
      assertEquals("", textNode0.textValue());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isLong());
      assertEquals("", textNode0.asText());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isIntegralNumber());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper2.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(textNode0.isInt());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.booleanValue());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isBigDecimal());
      assertEquals("", textNode0.textValue());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isBigInteger());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isLong());
      assertEquals("", textNode0.asText());
      assertFalse(textNode0.isDouble());
      assertFalse(textNode0.isIntegralNumber());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue(charArray0, 1524, (-792));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      MathContext mathContext0 = MathContext.DECIMAL32;
      assertNotNull(mathContext0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1, true);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.isClosed());
      
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canOmitFields());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertSame(objectMapper0, objectMapper1);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      
      tokenBuffer0.writeObject(serializedString0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertSame(objectMapper0, objectMapper1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      Short short0 = new Short((short) (-1324));
      assertNotNull(short0);
      assertEquals((short) (-1324), (short)short0);
      
      Double double0 = new Double((short) (-1324));
      assertNotNull(double0);
      assertEquals((-1324.0), (double)double0, 0.01);
      
      tokenBuffer0._appendRaw((short) (-1324), bigInteger0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) null);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "_C<G>+M&x?Na rSxp[");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper1, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      
      String string0 = tokenBuffer_Parser0.nextTextValue();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer0.writeBoolean(true);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      int int0 = tokenBuffer_Segment0.rawType(8);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      
      tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Module[] moduleArray0 = new Module[0];
      ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
      assertNotNull(objectMapper1);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, false);
      assertNotNull(objectMapper2);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospectors((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      assertNotNull(objectMapper3);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, moduleArray0.length);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append((-186), jsonToken0, (Object) objectMapper2, (Object) null);
      assertNull(tokenBuffer_Segment1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.appendRaw(16, 0, (Object) null, (Object) objectMapper3, (Object) objectMapper0);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      MathContext mathContext0 = MathContext.DECIMAL32;
      assertNotNull(mathContext0);
      
      tokenBuffer0.writeRawValue("[creator property, name '", 0, 3);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, false);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospectors((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      // Undeclared exception!
      try { 
        tokenBuffer_Segment1.appendRaw((-853), (-853), (Object) tokenBuffer0, (Object) injectableValues_Std0, (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -853
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      TextNode textNode0 = jsonNodeFactory0.textNode("");
      assertNotNull(textNode0);
      assertFalse(textNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.booleanValue());
      assertEquals("", textNode0.textValue());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isBigInteger());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isDouble());
      assertEquals("", textNode0.asText());
      assertFalse(textNode0.isFloatingPointNumber());
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(textNode0);
      assertNotNull(contextAttributes1);
      assertFalse(textNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.booleanValue());
      assertEquals("", textNode0.textValue());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isBigInteger());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isDouble());
      assertEquals("", textNode0.asText());
      assertFalse(textNode0.isFloatingPointNumber());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      
      TextNode textNode1 = arrayNode0.textNode("$Nh?bLqtigftjL'vB");
      assertNotNull(textNode1);
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals("$Nh?bLqtigftjL'vB", textNode1.textValue());
      assertFalse(textNode1.isFloat());
      assertFalse(textNode1.isBigInteger());
      assertEquals(0, textNode1.size());
      assertFalse(textNode1.isLong());
      assertFalse(textNode1.isDouble());
      assertFalse(textNode1.isIntegralNumber());
      assertEquals("$Nh?bLqtigftjL'vB", textNode1.asText());
      assertFalse(textNode1.isFloatingPointNumber());
      assertFalse(textNode1.isInt());
      assertEquals(JsonToken.VALUE_STRING, textNode1.asToken());
      assertNull(textNode1.numberType());
      assertFalse(textNode1.booleanValue());
      assertFalse(textNode1.isBigDecimal());
      assertEquals(JsonNodeType.STRING, textNode1.getNodeType());
      assertFalse(textNode1.isShort());
      assertNotSame(textNode1, textNode0);
      
      ContextAttributes contextAttributes2 = contextAttributes1.withPerCallAttribute(textNode1, jsonNodeFactory0);
      assertNotNull(contextAttributes2);
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(textNode1.equals((Object)textNode0));
      assertFalse(contextAttributes2.equals((Object)contextAttributes1));
      assertFalse(contextAttributes2.equals((Object)contextAttributes0));
      assertFalse(textNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.booleanValue());
      assertEquals("", textNode0.textValue());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isBigInteger());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isDouble());
      assertEquals("", textNode0.asText());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals("$Nh?bLqtigftjL'vB", textNode1.textValue());
      assertFalse(textNode1.isFloat());
      assertFalse(textNode1.isBigInteger());
      assertEquals(0, textNode1.size());
      assertFalse(textNode1.isLong());
      assertFalse(textNode1.isDouble());
      assertFalse(textNode1.isIntegralNumber());
      assertEquals("$Nh?bLqtigftjL'vB", textNode1.asText());
      assertFalse(textNode1.isFloatingPointNumber());
      assertFalse(textNode1.isInt());
      assertEquals(JsonToken.VALUE_STRING, textNode1.asToken());
      assertNull(textNode1.numberType());
      assertFalse(textNode1.booleanValue());
      assertFalse(textNode1.isBigDecimal());
      assertEquals(JsonNodeType.STRING, textNode1.getNodeType());
      assertFalse(textNode1.isShort());
      assertSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(contextAttributes1, contextAttributes2);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(textNode1, textNode0);
      assertNotSame(contextAttributes2, contextAttributes1);
      assertNotSame(contextAttributes2, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper2.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(contextAttributes0.equals((Object)contextAttributes2));
      assertFalse(textNode0.equals((Object)textNode1));
      assertFalse(contextAttributes1.equals((Object)contextAttributes2));
      assertFalse(textNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertNull(textNode0.numberType());
      assertFalse(textNode0.booleanValue());
      assertEquals("", textNode0.textValue());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isBigInteger());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isDouble());
      assertEquals("", textNode0.asText());
      assertFalse(textNode0.isFloatingPointNumber());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(contextAttributes0, contextAttributes1);
      assertNotSame(contextAttributes0, contextAttributes2);
      assertNotSame(textNode0, textNode1);
      assertNotSame(contextAttributes1, contextAttributes2);
      assertSame(contextAttributes1, contextAttributes0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2);
      assertNotNull(tokenBuffer0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.useDefaultPrettyPrinter();
      assertNotNull(tokenBuffer1);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      TextNode textNode0 = jsonNodeFactory0.textNode("");
      assertNotNull(textNode0);
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("", textNode0.asText());
      assertFalse(textNode0.isBigInteger());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isDouble());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals("", textNode0.textValue());
      assertFalse(textNode0.booleanValue());
      assertNull(textNode0.numberType());
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(textNode0);
      assertNotNull(contextAttributes1);
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("", textNode0.asText());
      assertFalse(textNode0.isBigInteger());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isDouble());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals("", textNode0.textValue());
      assertFalse(textNode0.booleanValue());
      assertNull(textNode0.numberType());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper2.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("", textNode0.asText());
      assertFalse(textNode0.isBigInteger());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isDouble());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals("", textNode0.textValue());
      assertFalse(textNode0.booleanValue());
      assertNull(textNode0.numberType());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectReader0, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("", textNode0.asText());
      assertFalse(textNode0.isBigInteger());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isDouble());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals("", textNode0.textValue());
      assertFalse(textNode0.booleanValue());
      assertNull(textNode0.numberType());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertNull(charArray0);
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("", textNode0.asText());
      assertFalse(textNode0.isBigInteger());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isDouble());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals("", textNode0.textValue());
      assertFalse(textNode0.booleanValue());
      assertNull(textNode0.numberType());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      Version version0 = tokenBuffer_Parser0.version();
      assertNotNull(version0);
      assertFalse(textNode0.isBigDecimal());
      assertFalse(textNode0.isIntegralNumber());
      assertEquals("", textNode0.asText());
      assertFalse(textNode0.isBigInteger());
      assertEquals(0, textNode0.size());
      assertFalse(textNode0.isDouble());
      assertEquals(JsonNodeType.STRING, textNode0.getNodeType());
      assertFalse(textNode0.isLong());
      assertFalse(textNode0.isFloatingPointNumber());
      assertFalse(textNode0.isFloat());
      assertFalse(textNode0.isShort());
      assertFalse(textNode0.isInt());
      assertEquals(JsonToken.VALUE_STRING, textNode0.asToken());
      assertEquals("", textNode0.textValue());
      assertFalse(textNode0.booleanValue());
      assertNull(textNode0.numberType());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertEquals(4, version0.getPatchLevel());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertEquals(2, version0.getMajorVersion());
      assertFalse(version0.isUknownVersion());
      assertTrue(version0.isSnapshot());
      assertEquals(6, version0.getMinorVersion());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      assertNotNull(objectMapper1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectMapper objectMapper2 = objectMapper0.enable(deserializationFeature0);
      assertNotNull(objectMapper2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectMapper objectMapper3 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      assertNotNull(objectMapper3);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper3, true, false);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, true);
      assertNotNull(tokenBuffer0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      boolean boolean0 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertTrue(boolean0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      MathContext mathContext0 = MathContext.DECIMAL32;
      assertNotNull(mathContext0);
      
      String string0 = tokenBuffer0.toString();
      assertNotNull(string0);
      assertEquals("[TokenBuffer: ]", string0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertSame(objectMapper0, objectMapper1);
      
      tokenBuffer0.firstToken();
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertSame(objectMapper0, objectMapper1);
      
      String string1 = tokenBuffer0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("[TokenBuffer: ]", string1);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("[creator aroperxy, name '", 0, 46);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "No enum constants for class ");
      assertFalse(boolean0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(100, jsonToken0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      assertEquals(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, serializationFeature0);
      assertFalse(serializationFeature0.enabledByDefault());
      assertEquals(1048576, serializationFeature0.getMask());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(518, (-2501), (Object) serializationFeature0);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(serializationFeature0.enabledByDefault());
      assertEquals(1048576, serializationFeature0.getMask());
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      
      tokenBuffer_Segment0._tokenTypes = (long) 16;
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      tokenBuffer_Segment0.type((-86));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer_Parser0.peekNextToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeBoolean(true);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      
      // Undeclared exception!
      try { 
        SerializationFeature.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.databind.SerializationFeature.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Module[] moduleArray0 = new Module[0];
      ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
      assertNotNull(objectMapper1);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, false);
      assertNotNull(objectMapper2);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospectors((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      assertNotNull(objectMapper3);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, moduleArray0.length);
      
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.databind.cfg.MapperConfigBase");
      assertNotNull(serializedString0);
      assertEquals("com.fasterxml.jackson.databind.cfg.MapperConfigBase", serializedString0.getValue());
      assertEquals(51, serializedString0.charLength());
      assertEquals("com.fasterxml.jackson.databind.cfg.MapperConfigBase", serializedString0.toString());
      
      tokenBuffer0.writeString((SerializableString) serializedString0);
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals("com.fasterxml.jackson.databind.cfg.MapperConfigBase", serializedString0.getValue());
      assertEquals(51, serializedString0.charLength());
      assertEquals("com.fasterxml.jackson.databind.cfg.MapperConfigBase", serializedString0.toString());
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, moduleArray0.length);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, false);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, moduleArray0.length);
      
      tokenBuffer_Parser0.setCodec(objectMapper1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper1);
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      assertNotNull(tokenBuffer0);
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      
      int int0 = objectMapper0.mixInCount();
      assertEquals(0, int0);
      assertSame(objectMapper0, objectMapper1);
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      tokenBuffer0._appendRaw(0, short0);
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer1 = tokenBuffer0.forceUseOfBigDecimal(false);
      assertNotNull(tokenBuffer1);
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(5, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) null);
      assertNull(tokenBuffer_Segment1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "_C<G>+M&x?Na rSxp[");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper objectMapper2 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      tokenBuffer0.writeBoolean(true);
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      
      int int0 = tokenBuffer_Segment0.rawType(8);
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken1 = JsonToken.FIELD_NAME;
      tokenBuffer0._append(jsonToken1, tokenBuffer_Parser0);
      assertFalse(jsonToken1.equals((Object)jsonToken0));
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(jsonToken1, jsonToken0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-%,hF XBO");
      assertFalse(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      tokenBuffer_Parser0._segment = tokenBuffer_Segment0;
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0._segment.hasIds());
      
      tokenBuffer_Segment0._tokenTypes = (-525L);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        tokenBuffer_Parser0.readValueAsTree();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into ArrayNode
         //  at [Source: java.lang.String@0000000033; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isClosed());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      assertNotNull(tokenBuffer0);
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      SerializedString serializedString0 = new SerializedString("");
      assertNotNull(serializedString0);
      assertEquals("", serializedString0.toString());
      assertEquals("", serializedString0.getValue());
      assertEquals(0, serializedString0.charLength());
      
      tokenBuffer0.writeString((SerializableString) serializedString0);
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals("", serializedString0.toString());
      assertEquals("", serializedString0.getValue());
      assertEquals(0, serializedString0.charLength());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3, jsonToken0);
      assertNull(tokenBuffer_Segment1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertNull(object0);
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Module[] moduleArray0 = new Module[0];
      ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
      assertNotNull(objectMapper1);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, false);
      assertNotNull(objectMapper2);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospectors((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      assertNotNull(objectMapper3);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, moduleArray0.length);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.next();
      assertNull(tokenBuffer_Segment1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, moduleArray0.length);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.setFeatureMask(16);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(16, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TextNode textNode0 = tokenBuffer_Parser0.readValueAsTree();
      assertNull(textNode0);
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertNull(object0);
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) null);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      int int0 = tokenBuffer_Segment0.rawType(8);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      
      Object object0 = tokenBuffer_Parser0.getInputSource();
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000033; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.enable(jsonParser_Feature0);
      assertNotNull(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(1, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(1, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertNotNull(tokenBuffer0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(1, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(1, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      tokenBuffer0.writeRawValue("yJ3qnkrv{,1/h>j]V(");
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(1, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(1, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      int int0 = 518;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      Class<Double> class0 = Double.class;
      try { 
        tokenBuffer_Parser0.readValueAs(class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: java.lang.String@0000000033; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(2175, (-2860), (Object) objectMapper0, (Object) null, (Object) objectMapper0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.enable(jsonParser_Feature0);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(512, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(512, tokenBuffer_Parser1.getFeatureMask());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = (TokenBuffer.Parser)tokenBuffer_Parser0.overrideStdFeatures(343, 2175);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(599, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertEquals(599, tokenBuffer_Parser2.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(objectMapper0, objectMapper1);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1, defaultDeserializationContext_Impl0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(599, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(599, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      tokenBuffer0.writeEndObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(599, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(599, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      tokenBuffer0.writeTypeId(defaultDeserializationContext_Impl0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(599, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(599, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      try { 
        tokenBuffer0.writeObject(tokenBuffer_Parser1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000033; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      assertNotNull(defaultPrettyPrinter0);
      
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0);
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      assertNotNull(objectIdGenerators_UUIDGenerator0);
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.appendRaw(2005, 2175, (Object) null, (Object) jsonParser_Feature0, (Object) objectIdGenerators_UUIDGenerator0);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.enable(jsonParser_Feature0);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(512, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(512, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = (TokenBuffer.Parser)tokenBuffer_Parser0.overrideStdFeatures(16, (-34));
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals(16, tokenBuffer_Parser2.getFeatureMask());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper1.getDeserializationContext();
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeEndObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = null;
      try {
        defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertNotNull(injectableValues_Std0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertNotNull(objectReader0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      assertNotNull(tokenBuffer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      
      Float float0 = new Float((-5017.945833));
      assertNotNull(float0);
      assertEquals((-5017.946F), (float)float0, 0.01F);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeObject(float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Module[] moduleArray0 = new Module[0];
      ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
      assertNotNull(objectMapper1);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, false);
      assertNotNull(objectMapper2);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospectors((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      assertNotNull(objectMapper3);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, moduleArray0.length);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 0, (Object) null, (Object) objectMapper3, (Object) objectMapper0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Byte byte0 = new Byte((byte) (-65));
      assertNotNull(byte0);
      assertEquals((byte) (-65), (byte)byte0);
      
      tokenBuffer0.writeTypeId(jsonParser_Feature0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)10, bigInteger1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertNotSame(bigInteger1, bigInteger0);
      
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      assertEquals(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, serializationFeature0);
      assertFalse(serializationFeature0.enabledByDefault());
      assertEquals(1048576, serializationFeature0.getMask());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeObject(serializationFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      List<Module> list0 = ObjectMapper.findModules();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      assertNotNull(arrayNode0);
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      assertNotNull(jsonParser0);
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      assertNotNull(tokenBuffer0);
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      tokenBuffer0._appendRaw((short)0, injectableValues_Std0);
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "No enum constants for class ");
      assertFalse(boolean0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(100, jsonToken0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      assertEquals(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, serializationFeature0);
      assertEquals(1048576, serializationFeature0.getMask());
      assertFalse(serializationFeature0.enabledByDefault());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(518, (-2501), (Object) serializationFeature0);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(1048576, serializationFeature0.getMask());
      assertFalse(serializationFeature0.enabledByDefault());
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      
      tokenBuffer_Segment0._tokenTypes = (long) 16;
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      tokenBuffer_Segment0.type((-86));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MapperFeature mapperFeature0 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "No enum constants for class ");
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      boolean boolean1 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectReader0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      try { 
        tokenBuffer_Parser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000033; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) null);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "_C<G>+M&x?Na rSxp[");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper1, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      String string0 = tokenBuffer_Parser0.nextTextValue();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer0.writeBoolean(true);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      int int0 = tokenBuffer_Segment0.rawType((byte)0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      
      JsonLocation jsonLocation0 = tokenBuffer_Parser0.getCurrentLocation();
      assertNotNull(jsonLocation0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      String string1 = tokenBuffer_Parser0.nextFieldName();
      assertNull(string1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, false);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      MathContext mathContext0 = MathContext.DECIMAL32;
      assertNotNull(mathContext0);
      
      tokenBuffer0.writeEndArray();
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertSame(objectMapper0, objectMapper1);
      
      tokenBuffer0.writeRawValue("[creator aroperxy, name '", 12, 3);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      assertNotNull(objectNode0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      
      Integer integer0 = new Integer(4500);
      assertNotNull(integer0);
      assertEquals(4500, (int)integer0);
      
      ObjectNode objectNode1 = objectNode0.put("", integer0);
      assertNotNull(objectNode1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isLong());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      
      ArrayNode arrayNode0 = objectNode1.putArray("");
      assertNotNull(arrayNode0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isLong());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isLong());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      assertNotNull(tokenBuffer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.booleanValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isLong());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.booleanValue());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isShort());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isDouble());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeString((char[]) null, 4500, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      assertNotNull(arrayNode0);
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      assertNotNull(jsonParser0);
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      assertNotNull(tokenBuffer0);
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      tokenBuffer_Parser0.peekNextToken();
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertSame(objectMapper0, objectMapper1);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertNull(charArray0);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      ObjectNode objectNode0 = arrayNode0.insertObject(1810);
      assertNotNull(objectNode0);
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectNode objectNode1 = objectNode0.put("", 0.0);
      assertNotNull(objectNode1);
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isInt());
      assertNull(objectNode1.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isShort());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      
      ObjectNode objectNode2 = objectNode1.put("(ZVkHz\"lV~2kl)", 0.0F);
      assertNotNull(objectNode2);
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals(2, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isInt());
      assertNull(objectNode1.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(2, objectNode1.size());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isInt());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode1);
      
      ObjectNode objectNode3 = objectNode2.put("\n@_N^hRU/#eOR", (BigDecimal) null);
      assertNotNull(objectNode3);
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(3, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isInt());
      assertNull(objectNode1.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(3, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertEquals(3, objectNode2.size());
      assertFalse(objectNode2.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isInt());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode3.isDouble());
      assertFalse(objectNode3.isIntegralNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isLong());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.isInt());
      assertNull(objectNode3.textValue());
      assertFalse(objectNode3.isBigInteger());
      assertFalse(objectNode3.booleanValue());
      assertEquals(3, objectNode3.size());
      assertNull(objectNode3.numberType());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode3, objectNode0);
      assertSame(objectNode3, objectNode1);
      
      JsonNode jsonNode0 = objectNode2.path(1810);
      assertNotNull(jsonNode0);
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(3, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isInt());
      assertNull(objectNode1.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(3, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertEquals(3, objectNode2.size());
      assertFalse(objectNode2.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isInt());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isInt());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigDecimal());
      assertNull(jsonNode0.numberType());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isShort());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertEquals("", jsonNode0.toString());
      assertEquals(0, jsonNode0.size());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloat());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode1);
      
      tokenBuffer0.writeTree(objectNode2);
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isLong());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals("", objectNode0.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(3, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isInt());
      assertNull(objectNode1.numberType());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isBigDecimal());
      assertEquals(3, objectNode1.size());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isFloat());
      assertNull(objectNode1.textValue());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isIntegralNumber());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertEquals(3, objectNode2.size());
      assertFalse(objectNode2.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isInt());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode0);
      assertSame(objectNode2, objectNode1);
      
      tokenBuffer_Parser0.close();
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      
      BigInteger bigInteger0 = arrayNode0.bigIntegerValue();
      assertNotNull(bigInteger0);
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      tokenBuffer0.writeNumber(bigInteger0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      tokenBuffer_Parser0.peekNextToken();
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer_Parser0.setCodec(objectMapper0);
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, false, true);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertNull(charArray0);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      
      tokenBuffer0.writeNumber((short) (-1288));
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertSame(objectMapper0, objectMapper1);
      
      TokenBuffer.Parser tokenBuffer_Parser3 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, false);
      assertNotNull(tokenBuffer_Parser3);
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser3.canReadObjectId());
      assertTrue(tokenBuffer_Parser3.canReadTypeId());
      assertNull(tokenBuffer_Parser3.peekNextToken());
      assertFalse(tokenBuffer_Parser3.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser3.isClosed());
      assertNull(tokenBuffer_Parser3.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser3.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser3.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser3.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser3.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser3.hasTextCharacters());
      assertNull(tokenBuffer_Parser3.getCurrentToken());
      assertNull(tokenBuffer_Parser3.getCurrentName());
      assertEquals(0, tokenBuffer_Parser3.getFormatFeatures());
      assertFalse(tokenBuffer_Parser3.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser3.getTextOffset());
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertNull(object0);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser1);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      
      try { 
        tokenBuffer_Parser1.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000033; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      assertNotNull(objectMapper1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, false);
      assertNotNull(objectMapper2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
      ObjectMapper objectMapper3 = objectMapper0.enable(serializationFeature1);
      assertNotNull(objectMapper3);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(serializationFeature1, serializationFeature0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      assertNotNull(tokenBuffer0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      tokenBuffer0.writeNumber((-2195L));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSON");
      assertFalse(boolean0);
      
      byte[] byteArray0 = objectMapper1.writeValueAsBytes((Object) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)117, (byte)108, (byte)108}, byteArray0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(4, byteArray0.length);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setFeatureMask((-100));
      assertNotNull(tokenBuffer1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((-100), tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-100), tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      MathContext mathContext0 = MathContext.DECIMAL32;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, 11, mathContext0);
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((-100), tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(tokenBuffer0, tokenBuffer1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertNull(object0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) null);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "_C<G>+M&x?Na rSxp[");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper1, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.skipChildren();
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_C<G>+M&x?Na rSxp[");
      assertFalse(boolean0);
      
      String string0 = tokenBuffer_Parser0.nextTextValue();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      tokenBuffer_Segment1._tokenTypes = (long) 16;
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      
      BigDecimal bigDecimal0 = new BigDecimal((-700.3297759775));
      assertNotNull(bigDecimal0);
      assertEquals((byte)68, bigDecimal0.byteValue());
      assertEquals((short) (-700), bigDecimal0.shortValue());
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((byte)68, bigDecimal0.byteValue());
      assertEquals((short) (-700), bigDecimal0.shortValue());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      
      String string1 = tokenBuffer_Parser0.nextFieldName();
      assertNull(string1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(1, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      
      try { 
        tokenBuffer_Parser2.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000033; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Byte byte0 = new Byte((byte)115);
      assertNotNull(byte0);
      assertEquals((byte)115, (byte)byte0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) "QA");
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, ", can not serialize");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.skipChildren();
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      String string0 = tokenBuffer_Parser0.nextTextValue();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(10, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.getCurrentToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      BigDecimal bigDecimal0 = new BigDecimal((double) (byte)0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(10, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(10, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment2.hasIds());
      
      try { 
        tokenBuffer_Parser1._checkIsNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_FALSE) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000033; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) null);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "_C<G>+M&x?Na rSxp[");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper1, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      String string0 = tokenBuffer_Parser0.nextTextValue();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer0.writeBoolean(true);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      int int0 = 8;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("}hz ;eXs+W5#>q");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) null);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "_C<G>+M&x?Na rSxp[");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper1, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.skipChildren();
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      String string0 = tokenBuffer_Parser0.nextTextValue();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      BigDecimal bigDecimal0 = new BigDecimal((-700.3297759775));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-700), bigDecimal0.shortValue());
      assertEquals((byte)68, bigDecimal0.byteValue());
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((short) (-700), bigDecimal0.shortValue());
      assertEquals((byte)68, bigDecimal0.byteValue());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, false);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      assertNotNull(objectIdGenerators_UUIDGenerator0);
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(5, byteArray0.length);
      
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = objectIdGenerators_UUIDGenerator0.key(bigInteger0);
      assertNotNull(objectIdGenerator_IdKey0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertEquals(5, byteArray0.length);
      
      tokenBuffer0._appendRaw((-2149), objectIdGenerators_UUIDGenerator0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      int int0 = tokenBuffer0.getFeatureMask();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertEquals(31, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      boolean boolean0 = tokenBuffer_Parser0.hasTextCharacters();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      JsonToken jsonToken1 = JsonToken.FIELD_NAME;
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator1 = new ObjectIdGenerators.UUIDGenerator();
      assertNotNull(objectIdGenerators_UUIDGenerator1);
      assertFalse(objectIdGenerators_UUIDGenerator1.equals((Object)objectIdGenerators_UUIDGenerator0));
      assertFalse(objectIdGenerators_UUIDGenerator1.maySerializeAsObject());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.append(16, jsonToken1, (Object) null, (Object) objectIdGenerators_UUIDGenerator1);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(jsonToken1.equals((Object)jsonToken0));
      assertFalse(objectIdGenerators_UUIDGenerator1.equals((Object)objectIdGenerators_UUIDGenerator0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(objectIdGenerators_UUIDGenerator1.maySerializeAsObject());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(jsonToken1, jsonToken0);
      assertNotSame(objectIdGenerators_UUIDGenerator1, objectIdGenerators_UUIDGenerator0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      assertNotNull(objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      Float float0 = new Float((double) 46);
      assertNotNull(float0);
      assertEquals(46.0F, (float)float0, 0.01F);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(46, jsonToken0, (Object) "", (Object) float0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(46, 16, (Object) defaultSerializerProvider_Impl0, (Object) objectMapper0, (Object) defaultSerializerProvider_Impl0);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertNull(charArray0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, false, true);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      
      String string0 = tokenBuffer_Parser1.getCurrentName();
      assertNull(string0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      tokenBuffer0.writeNumber(bigInteger0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "No enum constants for class ");
      assertFalse(boolean0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(100, jsonToken0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      assertEquals(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, serializationFeature0);
      assertFalse(serializationFeature0.enabledByDefault());
      assertEquals(1048576, serializationFeature0.getMask());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(518, (-2501), (Object) serializationFeature0);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(serializationFeature0.enabledByDefault());
      assertEquals(1048576, serializationFeature0.getMask());
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      
      tokenBuffer_Segment0._tokenTypes = (long) 16;
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      tokenBuffer_Segment0.type((-86));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MapperFeature mapperFeature0 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "No enum constants for class ");
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonGenerator_Feature0, true);
      assertNotNull(objectMapper3);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper3, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      String string0 = tokenBuffer_Parser0.getCurrentName();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      
      int int0 = tokenBuffer_Parser0.getTextOffset();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0.overrideFormatFeatures(16, (-86));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No FormatFeatures defined for parser of type com.fasterxml.jackson.databind.util.TokenBuffer$Parser
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      Object object0 = tokenBuffer_Parser0.getCurrentValue();
      assertNull(object0);
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertSame(objectMapper0, objectMapper1);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertNotNull(iOContext0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      assertNotNull(charsToNameCanonicalizer1);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, objectMapper1, charsToNameCanonicalizer1);
      assertNotNull(readerBasedJsonParser0);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(2, readerBasedJsonParser0.getFeatureMask());
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature0);
      assertNotNull(readerBasedJsonParser1);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(3, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(readerBasedJsonParser1);
      assertNotNull(tokenBuffer0);
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.collisionCount());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(64, charsToNameCanonicalizer0.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(3, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(3, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, true, true);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(0, int0);
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl1);
      assertNotNull(tokenBuffer1);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      tokenBuffer1.firstToken();
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) null);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "_C<G>+M&x?Na rSxp[");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper1, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.skipChildren();
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      String string0 = tokenBuffer_Parser0.nextTextValue();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      BigDecimal bigDecimal0 = new BigDecimal((-700.3297759775));
      assertNotNull(bigDecimal0);
      assertEquals((byte)68, bigDecimal0.byteValue());
      assertEquals((short) (-700), bigDecimal0.shortValue());
      
      int int0 = bigDecimal0.signum();
      assertEquals((-1), int0);
      assertEquals((byte)68, bigDecimal0.byteValue());
      assertEquals((short) (-700), bigDecimal0.shortValue());
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((byte)68, bigDecimal0.byteValue());
      assertEquals((short) (-700), bigDecimal0.shortValue());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      
      tokenBuffer0.writeString((String) null);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) null);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "_C<G>+M&x?Na rSxp[");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper1, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.skipChildren();
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      String string0 = tokenBuffer_Parser0.nextTextValue();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      BigDecimal bigDecimal0 = new BigDecimal((-700.3297759775));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-700), bigDecimal0.shortValue());
      assertEquals((byte)68, bigDecimal0.byteValue());
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((short) (-700), bigDecimal0.shortValue());
      assertEquals((byte)68, bigDecimal0.byteValue());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      
      String string1 = tokenBuffer_Parser2.getCurrentName();
      assertNull(string1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeBinary((Base64Variant) null, byteArray0, (int) (byte)82, (int) (byte)82);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) null);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "_C<G>+M&x?Na rSxp[");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper1, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.skipChildren();
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      
      String string0 = tokenBuffer_Parser0.nextTextValue();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      BigDecimal bigDecimal0 = new BigDecimal((-700.3297759775));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-700), bigDecimal0.shortValue());
      assertEquals((byte)68, bigDecimal0.byteValue());
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals((short) (-700), bigDecimal0.shortValue());
      assertEquals((byte)68, bigDecimal0.byteValue());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, true);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      
      String string1 = tokenBuffer_Parser2.getCurrentName();
      assertNull(string1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      
      System.setCurrentTimeMillis((byte)0);
      try { 
        tokenBuffer_Parser1.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (END_ARRAY) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000033; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Module[] moduleArray0 = new Module[0];
      ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
      assertNotNull(objectMapper1);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, false);
      assertNotNull(objectMapper2);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospectors((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      assertNotNull(objectMapper3);
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, moduleArray0.length);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 0, (Object) null, (Object) objectMapper3, (Object) objectMapper0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      MathContext mathContext0 = MathContext.DECIMAL32;
      assertNotNull(mathContext0);
      
      tokenBuffer0.writeRawValue("[creator property, name '", 0, 3);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      
      ObjectCodec objectCodec0 = tokenBuffer0.getCodec();
      assertNotNull(objectCodec0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, moduleArray0.length);
      assertSame(objectMapper0, objectCodec0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectCodec0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectCodec0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectCodec0);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectCodec0, objectMapper0);
      assertSame(objectCodec0, objectMapper1);
      assertSame(objectCodec0, objectMapper3);
      assertSame(objectCodec0, objectMapper2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Byte byte0 = new Byte((byte)115);
      assertNotNull(byte0);
      assertEquals((byte)115, (byte)byte0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) "QA");
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, ", can not serialize");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.skipChildren();
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      String string0 = tokenBuffer_Parser0.nextTextValue();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(10, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      BigDecimal bigDecimal0 = new BigDecimal((double) (byte)0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(10, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(10, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment2.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setCodec(objectMapper1);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(10, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(10, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertNotNull(injectableValues_Std0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertNotNull(objectReader0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      assertNotNull(tokenBuffer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      tokenBuffer0.serialize((JsonGenerator) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Byte byte0 = new Byte((byte)115);
      assertNotNull(byte0);
      assertEquals((byte)115, (byte)byte0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) ";B");
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, ", can not serialize");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      boolean boolean0 = true;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.skipChildren();
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      String string0 = tokenBuffer_Parser0.nextTextValue();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(10, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      try { 
        tokenBuffer0.writeObject(tokenBuffer_Parser1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (VALUE_FALSE) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000033; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) null);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "_C<G>+x?Na rSxp[");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper1, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      
      String string0 = tokenBuffer_Parser0.nextTextValue();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer0.writeBoolean(true);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      int int0 = tokenBuffer_Segment0.rawType((byte)0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      TokenBuffer tokenBuffer2 = tokenBuffer1.deserialize(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer2.firstToken());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      
      String string1 = tokenBuffer_Parser0.nextFieldName();
      assertNull(string1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer_Parser0.close();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      String string2 = tokenBuffer2.toString();
      assertNotNull(string2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals("[TokenBuffer: [objectId=0]END_ARRAY]", string2);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer2.firstToken());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue((String) null, (-1565), (-1565));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertNotNull(injectableValues_Std0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertNotNull(objectReader0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      assertNotNull(jsonFactory2);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      assertNotNull(jsonFactory3);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonFactory_Feature0);
      assertNotNull(jsonFactory4);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory0);
      
      ObjectReader objectReader1 = objectReader0.withRootName((String) null);
      assertNotNull(objectReader1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      
      JsonFactory jsonFactory5 = jsonFactory4.setCodec(objectReader1);
      assertNotNull(jsonFactory5);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory5.equals((Object)jsonFactory0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertSame(objectReader0, objectReader1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(objectReader1, objectReader0);
      assertSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory2);
      assertNotSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory4);
      
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory6 = jsonFactory5.configure(jsonFactory_Feature1, true);
      assertNotNull(jsonFactory6);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory5));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory_Feature0.equals((Object)jsonFactory_Feature1));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory5.equals((Object)jsonFactory0));
      assertFalse(jsonFactory_Feature1.equals((Object)jsonFactory_Feature0));
      assertFalse(jsonFactory6.equals((Object)jsonFactory0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertFalse(jsonFactory6.requiresPropertyOrdering());
      assertFalse(jsonFactory6.canHandleBinaryNatively());
      assertTrue(jsonFactory6.canUseCharArrays());
      assertEquals("JSON", jsonFactory6.getFormatName());
      assertEquals(" ", jsonFactory6.getRootValueSeparator());
      assertFalse(jsonFactory6.requiresCustomCodec());
      assertSame(objectReader0, objectReader1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory6);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory6);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory5);
      assertNotSame(jsonFactory_Feature0, jsonFactory_Feature1);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory6);
      assertSame(objectReader1, objectReader0);
      assertSame(jsonFactory5, jsonFactory1);
      assertNotSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory6);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory4);
      assertNotSame(jsonFactory_Feature1, jsonFactory_Feature0);
      assertSame(jsonFactory6, jsonFactory1);
      assertNotSame(jsonFactory6, jsonFactory0);
      assertSame(jsonFactory6, jsonFactory2);
      assertSame(jsonFactory6, jsonFactory4);
      assertSame(jsonFactory6, jsonFactory3);
      assertSame(jsonFactory6, jsonFactory5);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)9;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory3.createParser(byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory6));
      assertFalse(jsonFactory0.equals((Object)jsonFactory5));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertArrayEquals(new byte[] {(byte)7, (byte)28, (byte)108, (byte)9}, byteArray0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(513, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(4, byteArray0.length);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory6);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory6);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory5);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(uTF8StreamJsonParser0, (DeserializationContext) null);
      assertNotNull(tokenBuffer0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory6));
      assertFalse(jsonFactory0.equals((Object)jsonFactory5));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertArrayEquals(new byte[] {(byte)7, (byte)28, (byte)108, (byte)9}, byteArray0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(513, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(4, byteArray0.length);
      
      tokenBuffer0.writeNull();
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory6));
      assertFalse(jsonFactory0.equals((Object)jsonFactory5));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertArrayEquals(new byte[] {(byte)7, (byte)28, (byte)108, (byte)9}, byteArray0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(513, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(4, byteArray0.length);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory6);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory6);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory5);
      
      String string0 = tokenBuffer0.toString();
      assertNotNull(string0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory6));
      assertFalse(jsonFactory0.equals((Object)jsonFactory5));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertArrayEquals(new byte[] {(byte)7, (byte)28, (byte)108, (byte)9}, byteArray0);
      assertEquals("[TokenBuffer: VALUE_NULL]", string0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(513, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(4, byteArray0.length);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory6);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory6);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory5);
      
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory6));
      assertFalse(jsonFactory0.equals((Object)jsonFactory5));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertArrayEquals(new byte[] {(byte)7, (byte)28, (byte)108, (byte)9}, byteArray0);
      assertEquals(JsonToken.VALUE_NULL, jsonToken0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(513, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonToken0.isStructEnd());
      assertEquals(11, jsonToken0.id());
      assertFalse(jsonToken0.isStructStart());
      assertTrue(jsonToken0.isScalarValue());
      assertFalse(jsonToken0.isNumeric());
      assertEquals("null", jsonToken0.asString());
      assertFalse(jsonToken0.isBoolean());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(4, byteArray0.length);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory6);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory6);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory5);
      
      tokenBuffer0.writeEndObject();
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory6));
      assertFalse(jsonFactory0.equals((Object)jsonFactory5));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertArrayEquals(new byte[] {(byte)7, (byte)28, (byte)108, (byte)9}, byteArray0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(513, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(4, byteArray0.length);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory6);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory6);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory5);
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertNotNull(tokenBuffer1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory6));
      assertFalse(jsonFactory0.equals((Object)jsonFactory5));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertArrayEquals(new byte[] {(byte)7, (byte)28, (byte)108, (byte)9}, byteArray0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(513, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(4, byteArray0.length);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory6);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory6);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      String string1 = tokenBuffer0.toString();
      assertNotNull(string1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory6));
      assertFalse(jsonFactory0.equals((Object)jsonFactory5));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)7, (byte)28, (byte)108, (byte)9}, byteArray0);
      assertEquals("[TokenBuffer: VALUE_NULL, END_OBJECT]", string1);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(513, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(4, byteArray0.length);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory6);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory6);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory6);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory5);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertNotNull(objectReader0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertNotNull(tokenBuffer1);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      
      String string0 = tokenBuffer0.toString();
      assertNotNull(string0);
      assertEquals("[TokenBuffer: ]", string0);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertSame(tokenBuffer0, tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      tokenBuffer0.close();
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("[creator aroperxy, name '", 0, 46);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      int int0 = arrayNode0.intValue();
      assertEquals(0, int0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      assertNotNull(tokenBuffer0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      tokenBuffer0._appendRaw((short)0, injectableValues_Std0);
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      try { 
        tokenBuffer_Parser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000033; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper1);
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasCurrentToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      assertNotNull(tokenBuffer0);
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer0.firstToken();
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.enable(jsonGenerator_Feature0);
      assertNotNull(tokenBuffer1);
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(543, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(543, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      assertNotNull(objectReader0);
      
      boolean boolean0 = true;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.serialize((JsonGenerator) null);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      assertNotNull(booleanNode0);
      assertFalse(booleanNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_FALSE, booleanNode0.asToken());
      assertNull(booleanNode0.numberType());
      assertFalse(booleanNode0.booleanValue());
      assertFalse(booleanNode0.isLong());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isFloat());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertEquals(0, booleanNode0.size());
      assertEquals("false", booleanNode0.asText());
      assertFalse(booleanNode0.isShort());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.asBoolean());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isBigInteger());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeTree(booleanNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Byte byte0 = new Byte((byte)115);
      assertNotNull(byte0);
      assertEquals((byte)115, (byte)byte0);
      
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) "QA");
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, ", can not serialize");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.skipChildren();
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      String string0 = tokenBuffer_Parser0.nextTextValue();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(2, tokenBuffer_Parser0.getCurrentTokenId());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(2, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(2, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      try { 
        tokenBuffer0.writeObject(tokenBuffer_Parser1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (END_OBJECT) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000033; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      assertNotNull(defaultPrettyPrinter0);
      
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0);
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      assertNotNull(objectIdGenerators_UUIDGenerator0);
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.appendRaw(2005, 2175, (Object) null, (Object) jsonParser_Feature0, (Object) objectIdGenerators_UUIDGenerator0);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.enable(jsonParser_Feature0);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(512, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(512, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = (TokenBuffer.Parser)tokenBuffer_Parser0.overrideStdFeatures(16, (-34));
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertEquals(16, tokenBuffer_Parser2.getFeatureMask());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper1.getDeserializationContext();
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeEndObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      
      Byte byte0 = new Byte((byte) (-123));
      assertNotNull(byte0);
      assertEquals((byte) (-123), (byte)byte0);
      
      tokenBuffer0.writeTypeId(byte0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser3 = new TokenBuffer.Parser(tokenBuffer_Segment2, objectMapper2, true, true);
      assertNotNull(tokenBuffer_Parser3);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser3.hasCurrentToken());
      assertFalse(tokenBuffer_Parser3.isClosed());
      assertTrue(tokenBuffer_Parser3.canReadObjectId());
      assertNull(tokenBuffer_Parser3.getCurrentName());
      assertEquals(0, tokenBuffer_Parser3.getTextOffset());
      assertFalse(tokenBuffer_Parser3.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser3.getFeatureMask());
      assertTrue(tokenBuffer_Parser3.canReadTypeId());
      assertNull(tokenBuffer_Parser3.getCurrentToken());
      assertNull(tokenBuffer_Parser3.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser3.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser3.hasTextCharacters());
      assertFalse(tokenBuffer_Parser3.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser3.getFormatFeatures());
      assertFalse(tokenBuffer_Parser3.requiresCustomCodec());
      assertNull(tokenBuffer_Parser3.peekNextToken());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertTrue(tokenBuffer_Segment2.hasIds());
      
      Object object0 = tokenBuffer_Parser1.getEmbeddedObject();
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(16, tokenBuffer_Parser1.getFeatureMask());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(16, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      // Undeclared exception!
      try { 
        tokenBuffer2.writeRaw((SerializableString) defaultPrettyPrinter0.DEFAULT_ROOT_VALUE_SEPARATOR);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.booleanValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.numberType());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper objectMapper2 = objectMapper0.disableDefaultTyping();
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      ObjectReader objectReader0 = objectMapper2.reader((InjectableValues) injectableValues_Std0);
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      
      Float float0 = new Float((-5017.945833));
      assertNotNull(float0);
      assertEquals((-5017.946F), (float)float0, 0.01F);
      
      tokenBuffer0.writeObject((Object) null);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canOmitFields());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      assertNotNull(objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      JsonLocation jsonLocation0 = tokenBuffer_Parser0.getCurrentLocation();
      assertNotNull(jsonLocation0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      tokenBuffer_Parser0.close();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      assertNotNull(arrayNode0);
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.booleanValue());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      tokenBuffer_Parser0.peekNextToken();
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer_Parser0.setCodec(objectMapper0);
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, false, true);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertFalse(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.isClosed());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      
      String string0 = tokenBuffer_Parser1.nextTextValue();
      assertNull(string0);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      tokenBuffer0.writeBoolean(true);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      int int0 = tokenBuffer_Segment0.rawType((-3617));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(10, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      JsonLocation jsonLocation0 = tokenBuffer_Parser0.getCurrentLocation();
      assertNotNull(jsonLocation0);
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      
      String string1 = tokenBuffer_Parser1.nextFieldName();
      assertNull(string1);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      try { 
        tokenBuffer_Parser2.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000033; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, false);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      MathContext mathContext0 = MathContext.DECIMAL32;
      assertNotNull(mathContext0);
      
      tokenBuffer0.writeRawValue("[creator aroperxy, name '", 0, 3);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertSame(objectMapper0, objectMapper1);
      
      tokenBuffer0.writeString((SerializableString) null);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(2854, jsonToken0, (Object) null, (Object) serializedString0, (Object) integer0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "[objectId=");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper1, true, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      
      String string0 = tokenBuffer_Parser0.nextTextValue();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(10, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer0.writeBoolean(true);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(10, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      int int0 = tokenBuffer_Segment1.rawType(6);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(10, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.deserialize(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(10, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      
      String string1 = tokenBuffer_Parser0.nextFieldName();
      assertNull(string1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer_Parser0.close();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Byte byte0 = new Byte((byte)115);
      assertNotNull(byte0);
      assertEquals((byte)115, (byte)byte0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      assertNotNull(jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      assertNotNull(jsonFactory2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      assertNotNull(jsonFactory3);
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-41);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 16, (byte)115);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-41), (byte) (-41)}, byteArray0);
      assertEquals((-13), byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      
      InputDecorator inputDecorator1 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Reader) null).when(inputDecorator1).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Reader.class));
      JsonFactory jsonFactory4 = jsonFactory2.setInputDecorator(inputDecorator1);
      assertNotNull(jsonFactory4);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory4.equals((Object)jsonFactory3));
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-41), (byte) (-41)}, byteArray0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals((-13), byteArrayInputStream0.available());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals(3, byteArray0.length);
      assertSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory1);
      assertNotSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte) (-41);
      byteArray1[2] = (byte) (-24);
      byteArray1[3] = (byte)115;
      int int0 = tokenBuffer_Segment0.rawType((byte) (-41));
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory1);
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory1.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory1, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory1);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertNotNull(objectNode0);
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      
      ObjectNode objectNode1 = objectNode0.put("JSON", (BigDecimal) null);
      assertNotNull(objectNode1);
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.booleanValue());
      assertNull(objectNode0.numberType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertEquals(1, objectNode1.size());
      assertEquals("", objectNode1.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isShort());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      
      ObjectNode objectNode2 = arrayNode0.insertObject((byte) (-41));
      assertNotNull(objectNode2);
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isIntegralNumber());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(0, objectNode2.size());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      
      JsonNode jsonNode0 = objectNode2.path((int) (byte) (-86));
      assertNotNull(jsonNode0);
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isIntegralNumber());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(0, objectNode2.size());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertEquals("", jsonNode0.toString());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory5 = jsonFactory0.disable(jsonParser_Feature0);
      assertNotNull(jsonFactory5);
      assertFalse(jsonFactory5.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertSame(jsonFactory5, jsonFactory4);
      assertSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory0);
      assertNotSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory1);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory5.createParser("P#No~h");
      assertNotNull(readerBasedJsonParser0);
      assertFalse(jsonFactory5.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertSame(jsonFactory5, jsonFactory4);
      assertSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory0);
      assertNotSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory1);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(readerBasedJsonParser0);
      assertNotNull(tokenBuffer0);
      assertFalse(jsonFactory5.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      tokenBuffer0.writeTree(jsonNode0);
      assertFalse(jsonFactory5.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(objectNode2.equals((Object)objectNode1));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(1, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isIntegralNumber());
      assertEquals("", objectNode2.asText());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isBigInteger());
      assertEquals(0, objectNode2.size());
      assertFalse(objectNode2.booleanValue());
      assertNull(objectNode2.numberType());
      assertFalse(jsonNode0.isLong());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertEquals("", jsonNode0.toString());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isBigInteger());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isBigDecimal());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertSame(jsonFactory5, jsonFactory4);
      assertSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory0);
      assertNotSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Byte byte0 = new Byte((byte)115);
      assertNotNull(byte0);
      assertEquals((byte)115, (byte)byte0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) ";B");
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      
      tokenBuffer_Parser0.getCurrentToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      
      tokenBuffer_Parser0.setCodec(objectMapper0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      
      boolean boolean0 = false;
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      
      char[] charArray0 = tokenBuffer_Parser1.getTextCharacters();
      assertNull(charArray0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      
      tokenBuffer0.writeNumber((short) (byte)115);
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      
      TokenBuffer.Parser tokenBuffer_Parser3 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, false);
      assertNotNull(tokenBuffer_Parser3);
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser2));
      assertEquals(0, tokenBuffer_Parser3.getFormatFeatures());
      assertFalse(tokenBuffer_Parser3.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser3.getFeatureMask());
      assertFalse(tokenBuffer_Parser3.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser3.getCurrentName());
      assertFalse(tokenBuffer_Parser3.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser3.getTextOffset());
      assertNull(tokenBuffer_Parser3.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser3.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser3.canReadTypeId());
      assertNull(tokenBuffer_Parser3.peekNextToken());
      assertFalse(tokenBuffer_Parser3.hasCurrentToken());
      assertFalse(tokenBuffer_Parser3.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser3.isClosed());
      assertFalse(tokenBuffer_Parser3.hasTextCharacters());
      assertNull(tokenBuffer_Parser3.getLastClearedToken());
      
      Object object0 = tokenBuffer_Parser3.getEmbeddedObject();
      assertNull(object0);
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser2));
      assertEquals(0, tokenBuffer_Parser3.getFormatFeatures());
      assertFalse(tokenBuffer_Parser3.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser3.getFeatureMask());
      assertFalse(tokenBuffer_Parser3.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser3.getCurrentName());
      assertFalse(tokenBuffer_Parser3.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser3.getTextOffset());
      assertNull(tokenBuffer_Parser3.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser3.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser3.canReadTypeId());
      assertNull(tokenBuffer_Parser3.peekNextToken());
      assertFalse(tokenBuffer_Parser3.hasCurrentToken());
      assertFalse(tokenBuffer_Parser3.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser3.isClosed());
      assertFalse(tokenBuffer_Parser3.hasTextCharacters());
      assertNull(tokenBuffer_Parser3.getLastClearedToken());
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser2);
      
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(15, (-3083), (Object) null, (Object) objectMapper0, (Object) null);
      assertNull(tokenBuffer_Segment1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer_Segment0.hasIds());
      
      tokenBuffer0._hasNativeId = false;
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      
      tokenBuffer0._generatorFeatures = 16;
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(16, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(16, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000033; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      assertNotNull(tokenBuffer0);
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      SerializedString serializedString0 = new SerializedString("");
      assertNotNull(serializedString0);
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.toString());
      assertEquals("", serializedString0.getValue());
      
      tokenBuffer0.writeString((SerializableString) serializedString0);
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.toString());
      assertEquals("", serializedString0.getValue());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer1.firstToken());
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) byte0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "_C<G>+x?Na rSxp[");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper1, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      
      String string0 = tokenBuffer_Parser0.nextTextValue();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer0.writeBoolean(false);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      int int0 = tokenBuffer_Segment0.rawType((byte)0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertNotNull(objectNode0);
      assertNull(objectNode0.textValue());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      
      ObjectNode objectNode1 = objectNode0.put("", (BigDecimal) null);
      assertNotNull(objectNode1);
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode1.isDouble());
      assertNull(objectNode1.numberType());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isBigDecimal());
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      
      JsonNode jsonNode0 = objectNode0.path(16);
      assertNotNull(jsonNode0);
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isIntegralNumber());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isLong());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertEquals("", jsonNode0.toString());
      assertEquals(0, jsonNode0.size());
      assertNull(jsonNode0.textValue());
      assertFalse(jsonNode0.isFloat());
      assertEquals("", jsonNode0.asText());
      assertFalse(jsonNode0.isBigInteger());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertSame(objectNode0, objectNode1);
      
      tokenBuffer0.writeTree(objectNode0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertSame(objectNode0, objectNode1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertNotNull(iOContext0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1832);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      assertNotNull(mockPrintStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 505, objectMapper1, mockPrintStream0);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(505, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setHighestNonEscapedChar(0);
      assertNotNull(uTF8JsonGenerator1);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(505, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(505, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      
      tokenBuffer0.serialize(uTF8JsonGenerator1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(505, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(15, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertEquals(15, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(505, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) null);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "_C<G>+x?Na rSxp[");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper1, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      String string0 = tokenBuffer_Parser0.getValueAsString();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer0.writeBoolean(true);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      int int0 = tokenBuffer_Segment0.rawType((byte)0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      String string1 = tokenBuffer_Parser0.nextFieldName();
      assertNull(string1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      String string2 = tokenBuffer2.toString();
      assertNotNull(string2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals("[TokenBuffer: ]", string2);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) byte0, (Object) null);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "_C<G>+x?Na rSxp[");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper1, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      String string0 = tokenBuffer_Parser0.getValueAsString();
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer0.writeBoolean(true);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      int int0 = tokenBuffer_Segment0.rawType((byte)0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      String string1 = tokenBuffer_Parser0.nextFieldName();
      assertNull(string1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      tokenBuffer_Parser0.close();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(4, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      try { 
        tokenBuffer_Parser0.readBinaryValue((Base64Variant) null, (OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (END_ARRAY) not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary
         //  at [Source: java.lang.String@0000000033; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      assertNotNull(tokenBuffer0);
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      SerializedString serializedString0 = new SerializedString("");
      assertNotNull(serializedString0);
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.getValue());
      assertEquals("", serializedString0.toString());
      
      tokenBuffer0.writeString((SerializableString) serializedString0);
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.getValue());
      assertEquals("", serializedString0.toString());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      
      // Undeclared exception!
      tokenBuffer2.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      
      Byte byte0 = new Byte((byte)55);
      assertNotNull(byte0);
      assertEquals((byte)55, (byte)byte0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append((int) (byte)55, jsonToken0, (Object) byte0, (Object) null, (Object) null);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      
      ObjectMapper objectMapper1 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "_C<G>+x?Na rSxp[");
      assertNotNull(objectMapper2);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.setFeatureMask((byte)55);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(55, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(55, tokenBuffer_Parser1.getFeatureMask());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser1);
      assertNotNull(tokenBuffer1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(55, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(55, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(31, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals((-1), tokenBuffer1.getOutputBuffered());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(0, tokenBuffer1.getFormatFeatures());
      assertFalse(tokenBuffer1.isClosed());
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper1, false, true);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser2.peekNextToken());
      
      String string0 = tokenBuffer_Parser2.nextTextValue();
      assertNull(string0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.isExpectedStartArrayToken());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertFalse(tokenBuffer_Parser2.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertEquals(5, tokenBuffer_Parser2.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser2.hasCurrentToken());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser2.getFormatFeatures());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser2.getCurrentToken());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      
      tokenBuffer0.writeEndArray();
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      tokenBuffer0.writeBoolean(true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      
      int int0 = tokenBuffer_Segment0.rawType(62);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      TokenBuffer tokenBuffer2 = new TokenBuffer(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
      assertNotNull(tokenBuffer2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((-1), tokenBuffer2.getOutputBuffered());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(31, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(0, tokenBuffer2.getFormatFeatures());
      assertFalse(tokenBuffer2.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(55, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(tokenBuffer_Parser1);
      assertNotNull(jsonParserDelegate0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertEquals(55, jsonParserDelegate0.getFeatureMask());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(55, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser1.isExpectedStartObjectToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFormatFeatures());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(55, tokenBuffer_Parser1.getFeatureMask());
      
      // Undeclared exception!
      try { 
        tokenBuffer1.deserialize(jsonParserDelegate0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "AwH=@tKNE(Du`#^\"", true);
      assertNotNull(iOContext0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, objectMapper0, pipedWriter0);
      assertNotNull(writerBasedJsonGenerator0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      assertNotNull(filteringGeneratorDelegate0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      
      ObjectCodec objectCodec0 = filteringGeneratorDelegate0.getCodec();
      assertNotNull(objectCodec0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertSame(objectMapper0, objectCodec0);
      assertSame(objectCodec0, objectMapper0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectCodec0, true);
      assertNotNull(tokenBuffer0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      
      tokenBuffer0.writeTree((TreeNode) null);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertSame(objectMapper0, objectCodec0);
      assertSame(objectCodec0, objectMapper0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertNotNull(tokenBuffer_Segment0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AwH=@tKNE(Du`#^\"");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectCodec0, true, false);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      
      tokenBuffer_Parser0.nextToken();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isExpectedStartObjectToken());
      assertFalse(tokenBuffer_Parser0.isExpectedStartArrayToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFormatFeatures());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertSame(objectMapper0, objectCodec0);
      assertSame(objectCodec0, objectMapper0);
      
      char char0 = 'I';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("AwH=@tKNE(Du`#^\"", ", ", false, 'I', (-441));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 2)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }
}
