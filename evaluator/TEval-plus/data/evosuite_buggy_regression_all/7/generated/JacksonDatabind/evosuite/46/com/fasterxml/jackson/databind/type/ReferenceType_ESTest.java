/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:00:17 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.LinkedList;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReferenceType_ESTest extends ReferenceType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, (Object) class0);
      boolean boolean0 = referenceType0.isReferenceType();
      assertFalse(referenceType0.useStaticType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, (Object) null);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      referenceType0.getGenericSignature(stringBuilder0);
      assertEquals("Ljava/lang/Object<J;;", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      CollectionType collectionType0 = CollectionType.construct(class0, simpleType0);
      Integer integer0 = Integer.valueOf(426);
      ArrayType arrayType0 = ArrayType.construct(collectionType0, integer0, collectionType0);
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, arrayType0, object0, object0, true);
      JavaType javaType0 = referenceType0.getReferencedType();
      assertFalse(javaType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      MapLikeType mapLikeType0 = MapLikeType.construct(class1, simpleType0, simpleType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, mapLikeType0);
      ReferenceType referenceType0 = new ReferenceType(class0, collectionLikeType0, mapLikeType0, collectionLikeType0, true);
      String string0 = referenceType0.toString();
      assertEquals("[reference type, class java.lang.Object<java.lang.Object<java.lang.Integer<int,int>><[collection-like type; class java.lang.Object, contains [map-like type; class java.lang.Integer, [simple type, class int] -> [simple type, class int]]]>]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = new SimpleType(class0);
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, class0, "qSXxNH", true);
      StringBuilder stringBuilder0 = new StringBuilder("Io(1PH~zc9q");
      referenceType0.getErasedSignature(stringBuilder0);
      assertEquals("Io(1PH~zc9qLjava/lang/Object;", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<String> class0 = String.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, linkedList0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, javaType0, (Object) javaType0, (Object) objectReader0);
      referenceType0.getParameterSource();
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, (Object) class0);
      Class<Integer> class1 = Integer.class;
      JavaType javaType0 = referenceType0._narrow(class1);
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Object> class1 = Object.class;
      ReferenceType referenceType0 = new ReferenceType(class1, simpleType0, class0, class1, false);
      int int0 = referenceType0.containedTypeCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, (Object) class0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler("wQt`'iv]");
      assertNotSame(referenceType1, referenceType0);
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Integer> class1 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class1, simpleType0, object0, object0, true);
      Integer integer0 = new Integer(1213);
      ArrayType arrayType0 = new ArrayType(referenceType0, object0, integer0, referenceType0, true);
      ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class0, (JavaType) arrayType0, object0, (Object) referenceType0);
      ReferenceType referenceType2 = referenceType1.withTypeHandler((Object) null);
      assertSame(referenceType2, referenceType1);
      assertFalse(referenceType2.useStaticType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, (Object) class0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(referenceType0);
      assertNotSame(referenceType1, referenceType0);
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, (Object) null);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler((Object) null);
      assertSame(referenceType1, referenceType0);
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, (Object) class0);
      ReferenceType referenceType1 = referenceType0.withValueHandler("wQt`'iv]");
      boolean boolean0 = referenceType1.equals(referenceType0);
      assertTrue(referenceType1.hasValueHandler());
      assertTrue(boolean0);
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      ReferenceType referenceType0 = new ReferenceType(class0, simpleType0, (Object) null, (Object) null, true);
      ReferenceType referenceType1 = referenceType0.withValueHandler((Object) null);
      assertSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, (Object) class0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(simpleType0);
      assertNotSame(referenceType1, referenceType0);
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, (Object) class0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
      assertSame(referenceType1, referenceType0);
      assertFalse(referenceType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, (Object) class0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      assertTrue(referenceType1.useStaticType());
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<TreeSet> class1 = TreeSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, collectionType0, object0, object0, true);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      assertSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, (Object) class0);
      JavaType javaType0 = referenceType0.containedType(8000);
      assertFalse(referenceType0.useStaticType());
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      Object object0 = new Object();
      ArrayType arrayType0 = new ArrayType(simpleType0, simpleType0, class0, object0, false);
      Class<String> class1 = String.class;
      CollectionType collectionType0 = CollectionType.construct(class1, simpleType0);
      ReferenceType referenceType0 = new ReferenceType(class0, collectionType0, arrayType0, object0, false);
      JavaType javaType0 = referenceType0.containedType(0);
      assertSame(javaType0, collectionType0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, (Object) class0);
      String string0 = referenceType0.containedTypeName(62);
      assertFalse(referenceType0.useStaticType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
      Object object0 = new Object();
      ArrayType arrayType0 = new ArrayType(simpleType0, simpleType0, class0, object0, false);
      Class<String> class1 = String.class;
      CollectionType collectionType0 = CollectionType.construct(class1, simpleType0);
      ReferenceType referenceType0 = new ReferenceType(class0, collectionType0, arrayType0, object0, false);
      String string0 = referenceType0.containedTypeName(0);
      assertNotNull(string0);
      assertEquals("T", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<TreeSet> class1 = TreeSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      Object object0 = new Object();
      ReferenceType referenceType0 = new ReferenceType(class0, collectionType0, object0, object0, true);
      boolean boolean0 = referenceType0.equals(referenceType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, (Object) class0);
      boolean boolean0 = referenceType0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, (Object) class0);
      boolean boolean0 = referenceType0.equals("wQt`'iv]");
      assertFalse(boolean0);
      assertFalse(referenceType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (JavaType) simpleType0, (Object) simpleType0, (Object) class0);
      Class<String> class1 = String.class;
      ReferenceType referenceType1 = new ReferenceType(class1, referenceType0, class1, referenceType0, true);
      boolean boolean0 = referenceType0.equals(referenceType1);
      assertFalse(boolean0);
      assertFalse(referenceType0.useStaticType());
  }
}
