/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:58:40 GMT 2023
 */

package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapType_ESTest extends MapType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      MapType mapType0 = MapType.construct(class0, javaType0, javaType0);
      MapType mapType1 = mapType0.withContentValueHandler("[map type; class ");
      assertFalse(mapType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Map> class1 = Map.class;
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class1, (JavaType) simpleType0, (JavaType) simpleType0);
      MapType mapType1 = mapType0.withKeyValueHandler("]");
      assertFalse(mapType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
      MapType mapType0 = new MapType(simpleType0, simpleType0, simpleType0);
      Class<Object> class0 = Object.class;
      JavaType javaType0 = mapType0._narrow(class0);
      assertTrue(javaType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      Class<Integer> class2 = Integer.class;
      JavaType[] javaTypeArray0 = new JavaType[8];
      JavaType javaType0 = mapType0.refine(class2, (TypeBindings) null, mapType0, javaTypeArray0);
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      MapType mapType0 = MapType.construct(class0, javaType0, javaType0);
      MapType mapType1 = mapType0.withTypeHandler("java.lang.Object<java.lang.Object,java.lang.Object>");
      assertFalse(mapType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      MapType mapType0 = MapType.construct(class0, javaType0, javaType0);
      MapType mapType1 = mapType0.withContentTypeHandler("");
      assertFalse(mapType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      String string0 = mapType0.getTypeName();
      assertFalse(mapType0.useStaticType());
      assertEquals("[map type; class java.util.Map, [simple type, class java.lang.Object] -> [map type; class java.util.Map, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionLikeType collectionLikeType0 = new CollectionLikeType(simpleType0, simpleType0);
      MapType mapType0 = new MapType(collectionLikeType0, collectionLikeType0, collectionLikeType0);
      Integer integer0 = new Integer(3330);
      MapType mapType1 = mapType0.withKeyTypeHandler(integer0);
      assertFalse(mapType1.isArrayType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      Object object0 = new Object();
      MapType mapType1 = mapType0.withValueHandler(object0);
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.equals((Object)mapType0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionLikeType collectionLikeType0 = new CollectionLikeType(simpleType0, simpleType0);
      MapType mapType0 = new MapType(collectionLikeType0, collectionLikeType0, collectionLikeType0);
      MapType mapType1 = mapType0.withStaticTyping();
      MapType mapType2 = mapType1.withStaticTyping();
      assertTrue(mapType2.useStaticType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      MapType mapType0 = MapType.construct(class0, javaType0, javaType0);
      JavaType javaType1 = mapType0.withContentType(mapType0);
      assertNotSame(javaType1, mapType0);
      assertFalse(javaType1.equals((Object)mapType0));
      assertFalse(javaType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Map> class1 = Map.class;
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class1, (JavaType) simpleType0, (JavaType) simpleType0);
      JavaType javaType0 = mapType0.withContentType(simpleType0);
      assertSame(javaType0, mapType0);
      assertFalse(javaType0.useStaticType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeFactory typeFactory0 = TypeFactory.instance;
      Class<Map> class1 = Map.class;
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class1, (JavaType) simpleType0, (JavaType) simpleType0);
      MapType mapType1 = mapType0.withKeyType(mapType0);
      assertNotSame(mapType1, mapType0);
      assertFalse(mapType1.equals((Object)mapType0));
      assertFalse(mapType1.useStaticType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<String> class0 = String.class;
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
      MapType mapType0 = MapType.construct((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      MapType mapType1 = mapType0.withKeyType(simpleType0);
      assertSame(mapType1, mapType0);
      assertFalse(mapType1.useStaticType());
  }
}
