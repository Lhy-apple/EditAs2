/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:02:02 GMT 2023
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.math.RoundingMode;
import java.util.Collection;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AnnotationIntrospector_ESTest extends AnnotationIntrospector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.managed((String) null);
      AnnotationIntrospector.ReferenceProperty.Type annotationIntrospector_ReferenceProperty_Type0 = annotationIntrospector_ReferenceProperty0.getType();
      assertEquals(AnnotationIntrospector.ReferenceProperty.Type.MANAGED_REFERENCE, annotationIntrospector_ReferenceProperty_Type0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AnnotationIntrospector.ReferenceProperty.Type annotationIntrospector_ReferenceProperty_Type0 = AnnotationIntrospector.ReferenceProperty.Type.BACK_REFERENCE;
      AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = new AnnotationIntrospector.ReferenceProperty(annotationIntrospector_ReferenceProperty_Type0, "BACK_REFERENCE");
      String string0 = annotationIntrospector_ReferenceProperty0.getName();
      assertEquals("BACK_REFERENCE", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.back(",Falthough was supposed Ro have one");
      boolean boolean0 = annotationIntrospector_ReferenceProperty0.isBackReference();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Object object0 = annotationIntrospector0.findContentSerializer((Annotated) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      NameTransformer nameTransformer0 = annotationIntrospector0.findUnwrappingNameTransformer((AnnotatedMember) null);
      assertNull(nameTransformer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      JavaType javaType1 = annotationIntrospector0.refineSerializationType(serializationConfig0, (Annotated) null, mapLikeType0);
      assertFalse(javaType1.isCollectionLikeType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Boolean boolean0 = annotationIntrospector0.findIgnoreUnknownProperties((AnnotatedClass) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      String string0 = annotationIntrospector0.findClassDescription((AnnotatedClass) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Object object0 = annotationIntrospector0.findContentDeserializer((Annotated) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      String[] stringArray0 = annotationIntrospector0.findSerializationPropertyOrder((AnnotatedClass) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectIdInfo objectIdInfo0 = annotationIntrospector0.findObjectIdInfo((Annotated) null);
      assertNull(objectIdInfo0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      boolean boolean0 = annotationIntrospector0.hasCreatorAnnotation((Annotated) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Boolean boolean0 = annotationIntrospector0.findSerializationSortAlphabetically((Annotated) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(serializationConfig0, javaType0, (ClassIntrospector.MixInResolver) null);
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      Stack<BeanPropertyWriter> stack0 = new Stack<BeanPropertyWriter>();
      annotationIntrospector0.findAndAddVirtualProperties(serializationConfig0, annotatedClass0, stack0);
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Object object0 = annotationIntrospector0.findValueInstantiator((AnnotatedClass) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedClass annotatedClass0 = AnnotatedClass.construct((JavaType) mapLikeType0, (MapperConfig<?>) serializationConfig0);
      PropertyName propertyName0 = annotationIntrospector0.findRootName(annotatedClass0);
      assertNull(propertyName0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = annotationIntrospector0.findPOJOBuilderConfig((AnnotatedClass) null);
      assertNull(jsonPOJOBuilder_Value0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Boolean boolean0 = annotationIntrospector0.isIgnorableType((AnnotatedClass) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      TypeResolverBuilder<?> typeResolverBuilder0 = annotationIntrospector0.findPropertyTypeResolver((MapperConfig<?>) null, (AnnotatedMember) null, javaType0);
      assertNull(typeResolverBuilder0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = annotationIntrospector0.findNameForDeserialization((Annotated) null);
      assertNull(propertyName0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Object object0 = annotationIntrospector0.findDeserializer((Annotated) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Object object0 = annotationIntrospector0.findInjectableValueId((AnnotatedMember) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      boolean boolean0 = annotationIntrospector0.isAnnotationBundle((Annotation) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findPropertyAccess((Annotated) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Object object0 = annotationIntrospector0.findKeyDeserializer((Annotated) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      String string0 = annotationIntrospector0.findPropertyDescription((Annotated) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Object object0 = annotationIntrospector0.findKeySerializer((Annotated) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedMethod annotatedMethod0 = annotationIntrospector0.resolveSetterConflict((MapperConfig<?>) null, (AnnotatedMethod) null, (AnnotatedMethod) null);
      assertNull(annotatedMethod0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector)ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.pair(jacksonAnnotationIntrospector0, jacksonAnnotationIntrospector0);
      assertNotNull(annotationIntrospector0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      String string0 = annotationIntrospector0.findTypeName((AnnotatedClass) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Object object0 = annotationIntrospector0.findSerializationContentConverter((AnnotatedMember) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findCreatorBinding((Annotated) null);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      JavaType javaType1 = annotationIntrospector0.refineDeserializationType(serializationConfig0, (Annotated) null, mapLikeType0);
      assertTrue(javaType1.isMapLikeType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      String string0 = annotationIntrospector0.findImplicitPropertyName((AnnotatedMember) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectIdInfo objectIdInfo0 = annotationIntrospector0.findObjectReferenceInfo((Annotated) null, (ObjectIdInfo) null);
      assertNull(objectIdInfo0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Boolean boolean0 = annotationIntrospector0.isTypeId((AnnotatedMember) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Object object0 = annotationIntrospector0.findSerializer((Annotated) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      List<NamedType> list0 = annotationIntrospector0.findSubtypes((Annotated) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = annotationIntrospector0.findWrapperName((Annotated) null);
      assertNull(propertyName0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Object object0 = annotationIntrospector0.findFilterId((Annotated) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      JsonInclude.Include jsonInclude_Include1 = annotationIntrospector0.findSerializationInclusion((Annotated) null, jsonInclude_Include0);
      assertSame(jsonInclude_Include0, jsonInclude_Include1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      // Undeclared exception!
      try { 
        annotationIntrospector0.allIntrospectors((Collection<AnnotationIntrospector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.AnnotationIntrospector", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Object object0 = annotationIntrospector0.findDeserializationContentConverter((AnnotatedMember) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Object object0 = annotationIntrospector0.findNullSerializer((Annotated) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<?>[] classArray0 = annotationIntrospector0.findViews((Annotated) null);
      assertNull(classArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      String[] stringArray0 = annotationIntrospector0.findPropertiesToIgnore((Annotated) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Collection<AnnotationIntrospector> collection0 = annotationIntrospector0.allIntrospectors();
      assertTrue(collection0.contains(annotationIntrospector0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      JsonInclude.Include jsonInclude_Include1 = annotationIntrospector0.findSerializationInclusionForContent((Annotated) null, jsonInclude_Include0);
      assertSame(jsonInclude_Include0, jsonInclude_Include1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      boolean boolean0 = annotationIntrospector0.hasAsValueAnnotation((AnnotatedMethod) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector)ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
      // Undeclared exception!
      try { 
        jacksonAnnotationIntrospector0.isTypeId((AnnotatedMember) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.AnnotationIntrospector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      TypeResolverBuilder<?> typeResolverBuilder0 = annotationIntrospector0.findPropertyContentTypeResolver((MapperConfig<?>) null, (AnnotatedMember) null, referenceType0);
      assertNull(typeResolverBuilder0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      JsonInclude.Value jsonInclude_Value0 = annotationIntrospector0.findPropertyInclusion((Annotated) null);
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, annotationMap0);
      Object object0 = annotationIntrospector0.findDeserializationConverter(annotatedField0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      boolean boolean0 = annotationIntrospector0.hasAnyGetterAnnotation((AnnotatedMethod) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = annotationIntrospector0.findNameForSerialization((Annotated) null);
      assertNull(propertyName0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      boolean boolean0 = annotationIntrospector0.hasAnySetterAnnotation((AnnotatedMethod) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      JsonFormat.Value jsonFormat_Value0 = annotationIntrospector0.findFormat((Annotated) null);
      assertNull(jsonFormat_Value0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Object object0 = annotationIntrospector0.findSerializationConverter((Annotated) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      TypeResolverBuilder<?> typeResolverBuilder0 = annotationIntrospector0.findTypeResolver((MapperConfig<?>) null, (AnnotatedClass) null, javaType0);
      assertNull(typeResolverBuilder0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      String string0 = annotationIntrospector0.findPropertyDefaultValue((Annotated) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<?> class0 = annotationIntrospector0.findPOJOBuilder((AnnotatedClass) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Boolean boolean0 = annotationIntrospector0.hasRequiredMarker((AnnotatedMember) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      // Undeclared exception!
      try { 
        annotationIntrospector0._hasOneOf((Annotated) null, (Class<? extends Annotation>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.AnnotationIntrospector", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Integer integer0 = annotationIntrospector0.findPropertyIndex((Annotated) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Object object0 = annotationIntrospector0.findNamingStrategy((AnnotatedClass) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      annotationIntrospector0.findSerializationTyping((Annotated) null);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      boolean boolean0 = annotationIntrospector0.hasIgnoreMarker((AnnotatedMember) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = annotationIntrospector0.findReferenceType((AnnotatedMember) null);
      assertNull(annotationIntrospector_ReferenceProperty0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector)ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
      // Undeclared exception!
      try { 
        jacksonAnnotationIntrospector0.hasRequiredMarker((AnnotatedMember) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.AnnotationIntrospector", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.back("=NjW]|>;b1)");
      boolean boolean0 = annotationIntrospector_ReferenceProperty0.isManagedReference();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.managed("=N^jW]?|>-b1)");
      boolean boolean0 = annotationIntrospector_ReferenceProperty0.isManagedReference();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      AnnotationIntrospector.ReferenceProperty annotationIntrospector_ReferenceProperty0 = AnnotationIntrospector.ReferenceProperty.managed(", although was supposed to have one");
      boolean boolean0 = annotationIntrospector_ReferenceProperty0.isBackReference();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      JavaType javaType1 = annotationIntrospector0.refineSerializationType(serializationConfig0, (Annotated) null, referenceType0);
      assertSame(javaType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      JavaType javaType1 = annotationIntrospector0.refineSerializationType(serializationConfig0, (Annotated) null, javaType0);
      assertSame(javaType0, javaType1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<RoundingMode> class0 = RoundingMode.class;
      Enum<RoundingMode>[] enumArray0 = (Enum<RoundingMode>[]) Array.newInstance(Enum.class, 3);
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      enumArray0[1] = (Enum<RoundingMode>) roundingMode0;
      enumArray0[2] = (Enum<RoundingMode>) roundingMode0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      String[] stringArray1 = annotationIntrospector0.findEnumValues(class0, enumArray0, stringArray0);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      JavaType javaType1 = annotationIntrospector0.refineDeserializationType(serializationConfig0, (Annotated) null, referenceType0);
      assertFalse(javaType1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      JavaType javaType1 = annotationIntrospector0.refineDeserializationType(serializationConfig0, (Annotated) null, javaType0);
      assertFalse(javaType1.hasValueHandler());
  }
}
