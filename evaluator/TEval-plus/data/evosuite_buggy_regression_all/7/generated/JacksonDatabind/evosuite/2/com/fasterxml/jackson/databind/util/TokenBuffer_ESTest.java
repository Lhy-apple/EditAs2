/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 18:54:17 GMT 2023
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonStreamContext;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.JsonWriteContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URL;
import java.util.HashMap;
import java.util.ServiceLoader;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TokenBuffer_ESTest extends TokenBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, int0);
      
      int int1 = new Integer(0);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      tokenBuffer0.writeNumber(bigInteger0);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      objectMapper0.isEnabled(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.writeNumber((short) (-833));
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      assertNotNull(tokenBuffer_Segment0);
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Object object0 = tokenBuffer0._typeId;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(2568, jsonToken0, (Object) null, (Object) defaultSerializerProvider_Impl0, (Object) jsonToken0);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append((int) (short) (-833), jsonToken0);
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, false);
      tokenBuffer_Parser0.getTextLength();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer_Segment0.append((int) (byte)41, jsonToken0, (Object) jsonToken0, (Object) bigDecimal0, (Object) bigInteger0);
      Byte byte0 = new Byte((byte)41);
      tokenBuffer_Segment0.appendRaw(0, 0, (Object) byte0);
      TreeMap<Integer, Object> treeMap0 = tokenBuffer_Segment0._nativeIds;
      tokenBuffer_Segment0._nativeIds = null;
      tokenBuffer_Segment0.appendRaw(0, 0, (Object) "");
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.next();
      assertTrue(tokenBuffer_Segment1.hasIds());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      Byte byte0 = new Byte((byte)0);
      Object object0 = new Object();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(41, 41, (Object) byte0, (Object) byte0, object0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, false, false);
      boolean boolean0 = tokenBuffer_Parser0.hasTextCharacters();
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      ObjectMapper objectMapper0 = new ObjectMapper();
      tokenBuffer0.writeEndArray();
      tokenBuffer0.firstToken();
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("JSON");
      assertNotNull(readerBasedJsonParser0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(readerBasedJsonParser0);
      assertNotNull(tokenBuffer0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(readerBasedJsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      tokenBuffer0.writeNumber(bigInteger0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Long long0 = Long.valueOf((-9223372036854775808L));
      assertEquals((-9223372036854775808L), (long)long0);
      assertNotNull(long0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(1690, 1690, (Object) long0);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      
      BigDecimal bigDecimal1 = new BigDecimal((long) 16);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertEquals((byte)16, bigDecimal1.byteValue());
      assertEquals((short)16, bigDecimal1.shortValue());
      
      tokenBuffer0.writeNumber(bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((byte)16, bigDecimal1.byteValue());
      assertEquals((short)16, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      tokenBuffer_Segment0._nativeIds = treeMap0;
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(0, treeMap0.size());
      assertEquals(0, tokenBuffer_Segment0._nativeIds.size());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      tokenBuffer_Parser0.nextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      tokenBuffer_Parser0.close();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      tokenBuffer0._appendRaw(16, tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(deserializationFeatureArray0);
      assertEquals(1, deserializationFeatureArray0.length);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectReader objectReader2 = objectReader1.with(deserializationFeature0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(1, deserializationFeatureArray0.length);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotNull(objectReader2);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader1, false);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertEquals(1, deserializationFeatureArray0.length);
      assertNotNull(tokenBuffer0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeEndObject();
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertEquals(1, deserializationFeatureArray0.length);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader1, objectReader0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertEquals(1, deserializationFeatureArray0.length);
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TokenBuffer tokenBuffer0 = null;
      try {
        tokenBuffer0 = new TokenBuffer((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      tokenBuffer_Parser0.close();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      try { 
        tokenBuffer_Parser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000031; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertNotNull(tokenBuffer0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser();
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      tokenBuffer0.writeFieldName("");
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeStartObject();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      Integer integer0 = new Integer(347);
      assertEquals(347, (int)integer0);
      assertNotNull(integer0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(347, jsonToken0, (Object) integer0, (Object) jsonToken0);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer_Segment0._tokenTypes = 0L;
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Object object0 = tokenBuffer_Segment0.findObjectId(475);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNull(object0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Segment0.hasIds());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      
      tokenBuffer0.writeNumberField(",oOHW", 16);
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      
      Double double0 = new Double((-5370.38839));
      assertEquals((-5370.38839), (double)double0, 0.01);
      assertNotNull(double0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      
      tokenBuffer1.writeNumber((long) 16);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      
      tokenBuffer1.writeString(",oOHW");
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      tokenBuffer0.writeStartObject();
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(4583, jsonToken0);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      Integer integer0 = new Integer(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      tokenBuffer0.writeNumber(664);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      tokenBuffer0.writeEndArray();
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(jsonToken0.asString());
      assertFalse(jsonToken0.isStructStart());
      assertTrue(jsonToken0.isScalarValue());
      assertTrue(jsonToken0.isNumeric());
      assertFalse(jsonToken0.isStructEnd());
      assertFalse(jsonToken0.isBoolean());
      assertEquals(7, jsonToken0.id());
      
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer0.writeNumberField("9&hv", 3967);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer_Parser0.peekNextToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000031; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      boolean boolean0 = false;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser(byteArray0, (-2076), (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)83, (byte)5, (byte) (-118), (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(readerBasedJsonParser0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)83, (byte)5, (byte) (-118), (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(tokenBuffer0);
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      tokenBuffer0.writeObjectId(bigDecimal0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)83, (byte)5, (byte) (-118), (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      
      tokenBuffer0.writeNumber((short) (byte)5);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)83, (byte)5, (byte) (-118), (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      
      boolean boolean1 = true;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("JSON", "", true, 'e', (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(36, (-1758), (Object) bigDecimal0);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      
      // Undeclared exception!
      try { 
        tokenBuffer_Segment1.append((-1758), jsonToken0, (Object) tokenBuffer_Segment0, (Object) tokenBuffer_Segment0, (Object) bigDecimal1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1758
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser(byteArray0, (-2076), (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)83, (byte)5, (byte) (-118), (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(readerBasedJsonParser0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)83, (byte)5, (byte) (-118), (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(tokenBuffer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      tokenBuffer0.writeObjectId(bigDecimal0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)83, (byte)5, (byte) (-118), (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("JSON", "", true, 'e', (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      assertEquals(JsonTypeInfo.As.WRAPPER_ARRAY, jsonTypeInfo_As0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(1710, jsonToken0, (Object) null, (Object) jsonTypeInfo_As0, (Object) null);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment2.hasIds());
      
      tokenBuffer0.writeStartObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      tokenBuffer_Parser0.overrideCurrentName("@5-8ufZVrW\"2");
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals("@5-8ufZVrW\"2", tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotNull(defaultDeserializationContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(tokenBuffer0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      
      JsonWriteContext jsonWriteContext0 = tokenBuffer0.getOutputContext();
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, JsonWriteContext.STATUS_OK_AS_IS);
      assertEquals(2, JsonWriteContext.STATUS_OK_AFTER_COLON);
      assertEquals(5, JsonWriteContext.STATUS_EXPECT_NAME);
      assertEquals(1, JsonWriteContext.STATUS_OK_AFTER_COMMA);
      assertEquals(3, JsonWriteContext.STATUS_OK_AFTER_SPACE);
      assertEquals(4, JsonWriteContext.STATUS_EXPECT_VALUE);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotNull(jsonWriteContext0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(jsonWriteContext0.inObject());
      assertTrue(jsonWriteContext0.inRoot());
      assertNull(jsonWriteContext0.getCurrentName());
      assertFalse(jsonWriteContext0.inArray());
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertEquals(0, jsonWriteContext0.getCurrentIndex());
      assertEquals("ROOT", jsonWriteContext0.getTypeDesc());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer1.setFeatureMask(16);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(16, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(16, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      tokenBuffer0.writeEndArray();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[typeId=");
      assertFalse(boolean0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(charArray0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      tokenBuffer_Parser0.overrideCurrentName("[typeId=");
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals("[typeId=", tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      tokenBuffer_Parser0.nextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals("[typeId=", tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      try { 
        tokenBuffer_Parser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000031; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(2, 145, (Object) null);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000031; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      Byte byte0 = new Byte((byte)12);
      assertEquals((byte)12, (byte)byte0);
      assertNotNull(byte0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append((-175), jsonToken0, (Object) byte0, (Object) tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(tokenBuffer_Segment1);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = new TokenBuffer.Segment();
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment2.hasIds());
      
      String string0 = tokenBuffer_Parser0.getText();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNull(string0);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      JsonToken jsonToken1 = tokenBuffer_Parser0.peekNextToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertEquals(JsonToken.FIELD_NAME, jsonToken1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertSame(jsonToken1, jsonToken0);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(jsonToken1.isScalarValue());
      assertEquals(5, jsonToken1.id());
      assertFalse(jsonToken1.isStructEnd());
      assertFalse(jsonToken1.isNumeric());
      assertFalse(jsonToken1.isBoolean());
      assertFalse(jsonToken1.isStructStart());
      assertNull(jsonToken1.asString());
      
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000031; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      assertNotNull(tokenBuffer0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setHighestNonEscapedChar(0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotNull(tokenBuffer1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer1, true);
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertTrue(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      
      ObjectMapper objectMapper1 = (ObjectMapper)jsonGeneratorDelegate0.getCodec();
      assertSame(objectMapper0, objectMapper1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertTrue(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, objectMapper1.mixInCount());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, false, true);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertTrue(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectCodec objectCodec0 = null;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)13;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeBinary(byteArray0, (-1526), (int) (byte)8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      tokenBuffer_Parser0.nextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      int int0 = 664;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeUTF8String((byte[]) null, 16, 5329);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("JSON");
      assertNotNull(readerBasedJsonParser0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(readerBasedJsonParser0);
      assertNotNull(tokenBuffer0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("JSON", 618, 1833);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      JsonStreamContext jsonStreamContext0 = tokenBuffer_Parser0.getParsingContext();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(jsonStreamContext0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(jsonStreamContext0.inObject());
      assertFalse(jsonStreamContext0.inArray());
      assertEquals("ROOT", jsonStreamContext0.getTypeDesc());
      assertTrue(jsonStreamContext0.inRoot());
      assertNull(jsonStreamContext0.getCurrentName());
      assertEquals(0, jsonStreamContext0.getCurrentIndex());
      assertEquals(0, jsonStreamContext0.getEntryCount());
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000031; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(71, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(71, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser();
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(71, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      tokenBuffer0.writeEndArray();
      assertSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(71, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      
      tokenBuffer0.writeString((SerializableString) null);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(71, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      tokenBuffer0.writeNumberField("z`l", (float) 16);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer_Parser0.overrideCurrentName("z`l");
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals("z`l", tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals("z`l", tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      assertNotNull(tokenBuffer0);
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.enable(jsonGenerator_Feature0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotNull(tokenBuffer1);
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      
      IntNode intNode0 = (IntNode)arrayNode0.numberNode((byte)0);
      assertNotNull(intNode0);
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isShort());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isFloat());
      assertEquals(0.0, intNode0.doubleValue(), 0.01);
      assertEquals(0, intNode0.size());
      assertEquals(0, intNode0.intValue());
      assertFalse(intNode0.booleanValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals(0.0F, intNode0.floatValue(), 0.01F);
      assertTrue(intNode0.isIntegralNumber());
      assertTrue(intNode0.isInt());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(0L, intNode0.longValue());
      assertFalse(intNode0.isBigDecimal());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((short)0, intNode0.shortValue());
      
      tokenBuffer0.writeTree(intNode0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isShort());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isFloat());
      assertEquals(0.0, intNode0.doubleValue(), 0.01);
      assertEquals(0, intNode0.size());
      assertEquals(0, intNode0.intValue());
      assertFalse(intNode0.booleanValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals(0.0F, intNode0.floatValue(), 0.01F);
      assertTrue(intNode0.isIntegralNumber());
      assertTrue(intNode0.isInt());
      assertTrue(intNode0.canConvertToLong());
      assertEquals(0L, intNode0.longValue());
      assertFalse(intNode0.isBigDecimal());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((short)0, intNode0.shortValue());
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer0.enable(jsonGenerator_Feature1);
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      assertSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotNull(tokenBuffer2);
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isLong());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertEquals(0, arrayNode0.size());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(111, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer2.isClosed());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(111, tokenBuffer2.getFeatureMask());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.enable(jsonGenerator_Feature0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertNotNull(tokenBuffer2);
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canOmitFields());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      tokenBuffer0.writeEndArray();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotNull(tokenBuffer2);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertNull(tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.isClosed());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      tokenBuffer0.writeEndArray();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer1.firstToken();
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      
      TokenBuffer tokenBuffer3 = tokenBuffer1.append(tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer1, tokenBuffer3);
      assertSame(tokenBuffer3, tokenBuffer1);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertNotSame(tokenBuffer3, tokenBuffer0);
      assertNotNull(tokenBuffer3);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertTrue(tokenBuffer3.canOmitFields());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertFalse(tokenBuffer3.canWriteTypeId());
      assertFalse(tokenBuffer3.isClosed());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer3.firstToken());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      tokenBuffer0.writeBooleanField("6,mb", true);
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      
      // Undeclared exception!
      try { 
        tokenBuffer1.writeRaw((SerializableString) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_EXCEPTIONS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      assertEquals(0, serializationFeatureArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[6];
      MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.USE_GETTERS_AS_SETTERS;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.AUTO_DETECT_SETTERS;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.AUTO_DETECT_GETTERS;
      mapperFeatureArray0[3] = mapperFeature3;
      MapperFeature mapperFeature4 = MapperFeature.AUTO_DETECT_SETTERS;
      mapperFeatureArray0[4] = mapperFeature4;
      MapperFeature mapperFeature5 = MapperFeature.AUTO_DETECT_GETTERS;
      mapperFeatureArray0[5] = mapperFeature5;
      ObjectMapper objectMapper2 = objectMapper1.disable(mapperFeatureArray0);
      assertEquals(0, serializationFeatureArray0.length);
      assertEquals(6, mapperFeatureArray0.length);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("JSON", (-1911), 11);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000031; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<Module> class0 = Module.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus("", false);
      ServiceLoader<Module> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[com.fasterxml.jackson.databind.Module]", serviceLoader0.toString());
      
      ObjectMapper objectMapper1 = objectMapper0.registerModules((Iterable<Module>) serviceLoader0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("java.util.ServiceLoader[com.fasterxml.jackson.databind.Module]", serviceLoader0.toString());
      assertEquals(0, objectMapper1.mixInCount());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      assertNotNull(tokenBuffer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("java.util.ServiceLoader[com.fasterxml.jackson.databind.Module]", serviceLoader0.toString());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      
      Version version0 = tokenBuffer0.version();
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(version0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("java.util.ServiceLoader[com.fasterxml.jackson.databind.Module]", serviceLoader0.toString());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(version0.isUknownVersion());
      assertTrue(version0.isSnapshot());
      assertEquals(4, version0.getMinorVersion());
      assertEquals(2, version0.getMajorVersion());
      assertEquals("jackson-databind", version0.getArtifactId());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertEquals(0, version0.getPatchLevel());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<Module> class0 = Module.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ServiceLoader<Module> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[com.fasterxml.jackson.databind.Module]", serviceLoader0.toString());
      
      ObjectMapper objectMapper1 = objectMapper0.registerModules((Iterable<Module>) serviceLoader0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("java.util.ServiceLoader[com.fasterxml.jackson.databind.Module]", serviceLoader0.toString());
      assertEquals(0, objectMapper1.mixInCount());
      
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertNotNull(objectMapper2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("java.util.ServiceLoader[com.fasterxml.jackson.databind.Module]", serviceLoader0.toString());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper3 = objectMapper2.setSerializationInclusion(jsonInclude_Include0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertNotNull(objectMapper3);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("java.util.ServiceLoader[com.fasterxml.jackson.databind.Module]", serviceLoader0.toString());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3, false);
      assertNotNull(tokenBuffer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("java.util.ServiceLoader[com.fasterxml.jackson.databind.Module]", serviceLoader0.toString());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(bigInteger0);
      assertEquals((byte)4, bigInteger0.byteValue());
      assertEquals((short)4, bigInteger0.shortValue());
      
      tokenBuffer0._appendRaw((-906), bigInteger0);
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("java.util.ServiceLoader[com.fasterxml.jackson.databind.Module]", serviceLoader0.toString());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals((byte)4, bigInteger0.byteValue());
      assertEquals((short)4, bigInteger0.shortValue());
      
      tokenBuffer0.flush();
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("java.util.ServiceLoader[com.fasterxml.jackson.databind.Module]", serviceLoader0.toString());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectCodec objectCodec0 = null;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.skipChildren();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      
      tokenBuffer_Parser0.close();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      double double0 = tokenBuffer_Parser0.getValueAsDouble();
      assertEquals(0.0, double0, 0.01);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        tokenBuffer0.writeString(charArray0, (-841), 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser();
      assertNotNull(tokenBuffer_Parser0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      tokenBuffer0.writeNumber(0L);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer0.asParser((JsonParser) tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotNull(tokenBuffer_Parser1);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      
      tokenBuffer0.writeFieldName("");
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      tokenBuffer0.writeStartObject();
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      Integer integer0 = new Integer(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) integer0, (Object) jsonToken0);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      
      TreeMap<Integer, Object> treeMap0 = tokenBuffer_Segment0._nativeIds;
      assertNull(treeMap0);
      
      tokenBuffer_Segment0._nativeIds = null;
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      tokenBuffer_Segment0._tokenTypes = 0L;
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      SerializedString serializedString0 = new SerializedString("");
      assertNotNull(serializedString0);
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.getValue());
      assertEquals("", serializedString0.toString());
      
      tokenBuffer0.writeFieldName((SerializableString) serializedString0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.getValue());
      assertEquals("", serializedString0.toString());
      
      tokenBuffer_Parser0.peekNextToken();
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000031; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      try { 
        tokenBuffer_Parser0.getShortValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000031; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append((-1242), jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(tokenBuffer_Segment1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      tokenBuffer0._mayHaveNativeIds = true;
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      tokenBuffer0.writeNumber(bigInteger0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      tokenBuffer1.serialize(tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      tokenBuffer0.writeNumber((long) 16);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      tokenBuffer0.writeFieldName("");
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      tokenBuffer0.writeStartObject();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      Integer integer0 = new Integer(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.append(12000, jsonToken0, (Object) tokenBuffer_Segment1, (Object) tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Segment2.hasIds());
      
      TreeMap<Integer, Object> treeMap0 = tokenBuffer_Segment0._nativeIds;
      assertNull(treeMap0);
      
      Object object0 = tokenBuffer_Segment2.findObjectId(16);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Segment2.hasIds());
      
      boolean boolean0 = tokenBuffer_Segment2.hasIds();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertTrue(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Segment2.hasIds());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertNotNull(tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser();
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      tokenBuffer0.writeNumber(0L);
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer0.asParser((JsonParser) tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotNull(tokenBuffer_Parser1);
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      
      tokenBuffer0.writeFieldName("");
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      tokenBuffer0.writeStartObject();
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      Integer integer0 = new Integer(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(16, jsonToken0, (Object) integer0, (Object) jsonToken0);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      
      TreeMap<Integer, Object> treeMap0 = tokenBuffer_Segment0._nativeIds;
      assertNull(treeMap0);
      
      tokenBuffer_Segment0._nativeIds = null;
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      SerializedString serializedString0 = new SerializedString("");
      assertNotNull(serializedString0);
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.toString());
      assertEquals("", serializedString0.getValue());
      
      JsonToken jsonToken1 = tokenBuffer_Parser0.peekNextToken();
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(jsonToken1.equals((Object)jsonToken0));
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(jsonToken1, jsonToken0);
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(jsonToken1.isStructStart());
      assertEquals(7, jsonToken1.id());
      assertTrue(jsonToken1.isNumeric());
      assertTrue(jsonToken1.isScalarValue());
      assertNull(jsonToken1.asString());
      assertFalse(jsonToken1.isBoolean());
      assertFalse(jsonToken1.isStructEnd());
      
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000031; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer_Parser0.overrideCurrentName("-");
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals("-", tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1._next;
      assertNull(tokenBuffer_Segment2);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'v';
      charArray0[2] = 'r';
      // Undeclared exception!
      try { 
        tokenBuffer1.writeRawValue(charArray0, 16, (-1507));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      JsonStreamContext jsonStreamContext0 = tokenBuffer_Parser0.getParsingContext();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(jsonStreamContext0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, jsonStreamContext0.getCurrentIndex());
      assertNull(jsonStreamContext0.getCurrentName());
      assertEquals("ROOT", jsonStreamContext0.getTypeDesc());
      assertTrue(jsonStreamContext0.inRoot());
      assertFalse(jsonStreamContext0.inObject());
      assertFalse(jsonStreamContext0.inArray());
      assertEquals(0, jsonStreamContext0.getEntryCount());
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      
      tokenBuffer_Parser0.setCodec((ObjectCodec) null);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000031; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(2077, jsonToken0);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper1.mixInCount());
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues(injectableValues_Std0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotNull(objectMapper2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
      ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature0, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(objectMapper3, objectMapper0);
      assertNotNull(objectMapper3);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper4 = objectMapper3.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "");
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertFalse(objectMapper4.equals((Object)objectMapper0));
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper4);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper4);
      assertNotSame(objectMapper3, objectMapper0);
      assertSame(objectMapper4, objectMapper1);
      assertNotSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper3);
      assertNotNull(objectMapper4);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(0, objectMapper4.mixInCount());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper4, true, true);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper4));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertFalse(objectMapper4.equals((Object)objectMapper0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(0, objectMapper4.mixInCount());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      Version version0 = tokenBuffer_Parser0.version();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper4));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertFalse(objectMapper4.equals((Object)objectMapper0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper4);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper4);
      assertNotSame(objectMapper3, objectMapper0);
      assertSame(objectMapper4, objectMapper1);
      assertNotSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper3);
      assertNotNull(version0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(0, objectMapper4.mixInCount());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(version0.isUknownVersion());
      assertEquals(4, version0.getMinorVersion());
      assertTrue(version0.isSnapshot());
      assertEquals(2, version0.getMajorVersion());
      assertEquals(0, version0.getPatchLevel());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertEquals("jackson-databind", version0.getArtifactId());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      Integer integer0 = new Integer((-1254));
      assertEquals((-1254), (int)integer0);
      assertNotNull(integer0);
      
      tokenBuffer0.writeObject(integer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      tokenBuffer0.writeNumber(664);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      tokenBuffer0.writeEndArray();
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      Random.setNextRandom(664);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser();
      assertNotNull(tokenBuffer_Parser0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      tokenBuffer0.writeNumber(0L);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      tokenBuffer0.writeFieldName("");
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      tokenBuffer0.writeStartObject();
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      Integer integer0 = new Integer(347);
      assertEquals(347, (int)integer0);
      assertNotNull(integer0);
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(347, jsonToken0, (Object) integer0, (Object) jsonToken0);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Segment1.hasIds());
      
      TreeMap<Integer, Object> treeMap0 = tokenBuffer_Segment0._nativeIds;
      assertNull(treeMap0);
      
      tokenBuffer_Segment0._nativeIds = null;
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      tokenBuffer_Segment0._tokenTypes = 0L;
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      Object object0 = tokenBuffer_Segment0.findObjectId(475);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNull(object0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      tokenBuffer0.writeEndObject();
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) tokenBuffer0, (Object) null, (Object) tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Segment2.hasIds());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      tokenBuffer0.writeNumberField("1b~e1l8]wV6<h", (float) 16);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      JsonStreamContext jsonStreamContext0 = tokenBuffer_Parser0.getParsingContext();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotNull(jsonStreamContext0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, jsonStreamContext0.getEntryCount());
      assertTrue(jsonStreamContext0.inRoot());
      assertEquals("ROOT", jsonStreamContext0.getTypeDesc());
      assertNull(jsonStreamContext0.getCurrentName());
      assertFalse(jsonStreamContext0.inArray());
      assertFalse(jsonStreamContext0.inObject());
      assertEquals(0, jsonStreamContext0.getCurrentIndex());
      
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer0.setCodec((ObjectCodec) null);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer2.isClosed());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      
      // Undeclared exception!
      try { 
        tokenBuffer1.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      tokenBuffer0.writeEndArray();
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertEquals(JsonToken.END_ARRAY, jsonToken0);
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(jsonToken0.isBoolean());
      assertEquals("]", jsonToken0.asString());
      assertFalse(jsonToken0.isStructStart());
      assertTrue(jsonToken0.isStructEnd());
      assertEquals(4, jsonToken0.id());
      assertFalse(jsonToken0.isScalarValue());
      assertFalse(jsonToken0.isNumeric());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canOmitFields());
      
      tokenBuffer1.serialize(tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      
      int int0 = tokenBuffer_Parser0.getValueAsInt();
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      
      Double double0 = new Double(16);
      assertEquals(16.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null, false);
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer2);
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertNull(tokenBuffer2.firstToken());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      // Undeclared exception!
      try { 
        tokenBuffer2.deserialize(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      
      // Undeclared exception!
      try { 
        tokenBuffer1.writeRaw("Bk[n l\"");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser("ZT(-,NqZH{4e23");
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(5, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(readerBasedJsonParser0);
      assertNotNull(tokenBuffer0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(5, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawUTF8String(byteArray0, (-2213), (-2213));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      assertNotNull(floatNode0);
      assertFalse(floatNode0.isLong());
      assertEquals(0, floatNode0.intValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isDouble());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.booleanValue());
      assertEquals(0.0F, floatNode0.floatValue(), 0.01F);
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals(0, floatNode0.size());
      assertEquals(0.0, floatNode0.doubleValue(), 0.01);
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.canConvertToInt());
      assertEquals(0L, floatNode0.longValue());
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.isIntegralNumber());
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertFalse(floatNode0.isInt());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isBigInteger());
      assertEquals((short)0, floatNode0.shortValue());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.disable(jsonParser_Feature0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotNull(tokenBuffer_Parser1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3, jsonToken0, (Object) bigDecimal0, (Object) tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNull(tokenBuffer_Segment1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      SerializedString serializedString0 = new SerializedString("");
      assertNotNull(serializedString0);
      assertEquals("", serializedString0.getValue());
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.toString());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      tokenBuffer0.writeFieldName((SerializableString) serializedString0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("", serializedString0.getValue());
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.toString());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000031; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper1.mixInCount());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, false, false);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      
      FormatSchema formatSchema0 = tokenBuffer_Parser0.getSchema();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotSame(objectMapper1, objectMapper0);
      assertNull(formatSchema0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader1, true);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotNull(tokenBuffer0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      tokenBuffer0.writeNumberField("JSON", 34.38257F);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      JsonStreamContext jsonStreamContext0 = tokenBuffer_Parser0.getParsingContext();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotSame(objectMapper1, objectMapper0);
      assertNotNull(jsonStreamContext0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(jsonStreamContext0.inRoot());
      assertFalse(jsonStreamContext0.inObject());
      assertNull(jsonStreamContext0.getCurrentName());
      assertEquals("ROOT", jsonStreamContext0.getTypeDesc());
      assertEquals(0, jsonStreamContext0.getCurrentIndex());
      assertFalse(jsonStreamContext0.inArray());
      assertEquals(0, jsonStreamContext0.getEntryCount());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.disable(jsonGenerator_Feature0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotNull(tokenBuffer1);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
      
      tokenBuffer_Parser0.peekNextToken();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      
      int int0 = tokenBuffer1.getFeatureMask();
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(79, int0);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<Module> class0 = Module.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ServiceLoader<Module> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[com.fasterxml.jackson.databind.Module]", serviceLoader0.toString());
      
      ObjectMapper objectMapper1 = objectMapper0.registerModules((Iterable<Module>) serviceLoader0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("java.util.ServiceLoader[com.fasterxml.jackson.databind.Module]", serviceLoader0.toString());
      assertEquals(0, objectMapper1.mixInCount());
      
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertNotNull(objectMapper2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("java.util.ServiceLoader[com.fasterxml.jackson.databind.Module]", serviceLoader0.toString());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      
      tokenBuffer1.writeStartObject();
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      
      TokenBuffer.Parser tokenBuffer_Parser2 = (TokenBuffer.Parser)tokenBuffer0.asParser();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertNotNull(tokenBuffer_Parser2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      
      ObjectMapper objectMapper3 = new ObjectMapper();
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper1));
      assertFalse(objectMapper3.equals((Object)objectMapper2));
      assertNotNull(objectMapper3);
      assertEquals(0, objectMapper3.mixInCount());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0 = new PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy();
      assertNotNull(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      
      ObjectMapper objectMapper4 = objectMapper3.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      assertFalse(objectMapper4.equals((Object)objectMapper1));
      assertFalse(objectMapper4.equals((Object)objectMapper2));
      assertFalse(objectMapper4.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper1));
      assertFalse(objectMapper3.equals((Object)objectMapper2));
      assertNotSame(objectMapper4, objectMapper1);
      assertNotSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper3);
      assertNotSame(objectMapper4, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertNotSame(objectMapper3, objectMapper0);
      assertNotSame(objectMapper3, objectMapper1);
      assertNotSame(objectMapper3, objectMapper2);
      assertNotNull(objectMapper4);
      assertEquals(0, objectMapper4.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      
      TokenBuffer.Parser tokenBuffer_Parser3 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper2, true, true);
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper4));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser1));
      assertFalse(objectMapper1.equals((Object)objectMapper3));
      assertFalse(objectMapper1.equals((Object)objectMapper4));
      assertFalse(objectMapper2.equals((Object)objectMapper4));
      assertFalse(objectMapper2.equals((Object)objectMapper3));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser3);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer_Parser3.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser3.getTextOffset());
      assertFalse(tokenBuffer_Parser3.requiresCustomCodec());
      assertNull(tokenBuffer_Parser3.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser3.getFeatureMask());
      assertTrue(tokenBuffer_Parser3.canReadObjectId());
      assertFalse(tokenBuffer_Parser3.hasCurrentToken());
      assertFalse(tokenBuffer_Parser3.isClosed());
      assertFalse(tokenBuffer_Parser3.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser3.getCurrentTokenId());
      assertNull(tokenBuffer_Parser3.peekNextToken());
      assertTrue(tokenBuffer_Parser3.canReadTypeId());
      assertNull(tokenBuffer_Parser3.getCurrentName());
      assertEquals("java.util.ServiceLoader[com.fasterxml.jackson.databind.Module]", serviceLoader0.toString());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      boolean boolean0 = tokenBuffer_Parser3.hasTextCharacters();
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper4));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser1));
      assertFalse(objectMapper1.equals((Object)objectMapper3));
      assertFalse(objectMapper1.equals((Object)objectMapper4));
      assertFalse(objectMapper2.equals((Object)objectMapper4));
      assertFalse(objectMapper2.equals((Object)objectMapper3));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper4);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser1);
      assertNotSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper4);
      assertSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper2, objectMapper4);
      assertNotSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer_Parser3.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser3.getTextOffset());
      assertFalse(tokenBuffer_Parser3.requiresCustomCodec());
      assertNull(tokenBuffer_Parser3.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser3.getFeatureMask());
      assertTrue(tokenBuffer_Parser3.canReadObjectId());
      assertFalse(tokenBuffer_Parser3.hasCurrentToken());
      assertFalse(tokenBuffer_Parser3.isClosed());
      assertFalse(tokenBuffer_Parser3.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser3.getCurrentTokenId());
      assertNull(tokenBuffer_Parser3.peekNextToken());
      assertTrue(tokenBuffer_Parser3.canReadTypeId());
      assertNull(tokenBuffer_Parser3.getCurrentName());
      assertEquals("java.util.ServiceLoader[com.fasterxml.jackson.databind.Module]", serviceLoader0.toString());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      boolean boolean1 = tokenBuffer1.isEnabled(jsonGenerator_Feature0);
      assertFalse(boolean1 == boolean0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertTrue(boolean1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      
      JsonStreamContext jsonStreamContext0 = tokenBuffer_Parser1.getParsingContext();
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotNull(jsonStreamContext0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(jsonStreamContext0.inArray());
      assertNull(jsonStreamContext0.getCurrentName());
      assertTrue(jsonStreamContext0.inRoot());
      assertFalse(jsonStreamContext0.inObject());
      assertEquals(0, jsonStreamContext0.getEntryCount());
      assertEquals("ROOT", jsonStreamContext0.getTypeDesc());
      assertEquals(0, jsonStreamContext0.getCurrentIndex());
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setCodec((ObjectCodec) null);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      
      tokenBuffer_Parser0.peekNextToken();
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      tokenBuffer0.writeNumber(bigInteger0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectReader0.withValueToUpdate((Object) null);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader2 = objectMapper0.reader((InjectableValues) null);
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotNull(objectReader2);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader3 = objectReader1.withAttribute(objectMapper0, objectReader2);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertNotSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader0);
      assertNotNull(objectReader3);
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader3);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertNotNull(tokenBuffer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw('\\');
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      tokenBuffer0.writeEndArray();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[typeId=");
      assertFalse(boolean0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(charArray0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      tokenBuffer0.writeStartArray();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      
      tokenBuffer0.writeStartArray();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      tokenBuffer_Parser0.peekNextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectCodec objectCodec0 = null;
      boolean boolean0 = false;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      Double double0 = new Double(16);
      assertEquals(16.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        tokenBuffer_Segment0.appendRaw((-514), (-1278), (Object) tokenBuffer_Parser0, (Object) double0, (Object) double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -514
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!YZ^*vAi@prJ*E");
      assertFalse(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(16, 16, (Object) tokenBuffer0, (Object) tokenBuffer_Segment0, (Object) bigInteger0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertTrue(tokenBuffer_Segment2.hasIds());
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      TokenBuffer.Segment tokenBuffer_Segment3 = new TokenBuffer.Segment();
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment3);
      assertFalse(tokenBuffer_Segment3.hasIds());
      
      JsonToken jsonToken1 = JsonToken.VALUE_FALSE;
      TokenBuffer.Segment tokenBuffer_Segment4 = tokenBuffer_Segment3.append(16, jsonToken1);
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment2));
      assertFalse(jsonToken1.equals((Object)jsonToken0));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment4);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment2);
      assertNotSame(jsonToken1, jsonToken0);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment2);
      assertNotNull(tokenBuffer_Segment4);
      assertFalse(tokenBuffer_Segment3.hasIds());
      assertFalse(tokenBuffer_Segment4.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment4, (ObjectCodec) null, true, true);
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment4));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment2));
      assertFalse(jsonToken1.equals((Object)jsonToken0));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment3.hasIds());
      assertFalse(tokenBuffer_Segment4.hasIds());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      
      ByteArrayBuilder byteArrayBuilder0 = tokenBuffer_Parser1._byteBuilder;
      assertNull(byteArrayBuilder0);
      
      tokenBuffer_Parser0._byteBuilder = null;
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      TokenBuffer.Segment tokenBuffer_Segment5 = tokenBuffer_Segment4.append(16, jsonToken0, (Object) short0);
      assertFalse(jsonToken0.equals((Object)jsonToken1));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment4));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment2));
      assertFalse(jsonToken1.equals((Object)jsonToken0));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment4));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment5);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment4);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment2);
      assertNotSame(jsonToken1, jsonToken0);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment5);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment4);
      assertNotNull(tokenBuffer_Segment5);
      assertFalse(tokenBuffer_Segment3.hasIds());
      assertFalse(tokenBuffer_Segment4.hasIds());
      assertFalse(tokenBuffer_Segment5.hasIds());
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment4));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment5));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment4);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment5);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      boolean boolean1 = tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment4));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment5));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment4);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment5);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      
      tokenBuffer_Parser0.overrideCurrentName("[typeId=");
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals("[typeId=", tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      
      tokenBuffer_Parser0.nextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals("[typeId=", tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      tokenBuffer0.writeNumberField("Strange Map type ", 1286.744F);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      
      JsonStreamContext jsonStreamContext0 = tokenBuffer_Parser1.getParsingContext();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotNull(jsonStreamContext0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(jsonStreamContext0.inRoot());
      assertEquals("ROOT", jsonStreamContext0.getTypeDesc());
      assertEquals(0, jsonStreamContext0.getEntryCount());
      assertFalse(jsonStreamContext0.inObject());
      assertFalse(jsonStreamContext0.inArray());
      assertEquals(0, jsonStreamContext0.getCurrentIndex());
      assertNull(jsonStreamContext0.getCurrentName());
      
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer1.setCodec((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotNull(tokenBuffer2);
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      
      tokenBuffer_Parser0.peekNextToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      tokenBuffer_Parser1.close();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      
      tokenBuffer_Parser1.peekNextToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      
      tokenBuffer2._appendRaw(16, bigDecimal0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canOmitFields());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertNull(tokenBuffer2.firstToken());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertFalse(tokenBuffer2.isClosed());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(16, 16, (Object) tokenBuffer0, (Object) tokenBuffer_Segment0, (Object) bigInteger0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertTrue(tokenBuffer_Segment1.hasIds());
      
      TokenBuffer tokenBuffer3 = new TokenBuffer((ObjectCodec) null, false);
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertNotNull(tokenBuffer3);
      assertFalse(tokenBuffer3.canWriteTypeId());
      assertFalse(tokenBuffer3.isClosed());
      assertTrue(tokenBuffer3.canOmitFields());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertNull(tokenBuffer3.firstToken());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      tokenBuffer0.writeNumberField("z`l", 34.38257F);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      JsonStreamContext jsonStreamContext0 = tokenBuffer_Parser0.getParsingContext();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotNull(jsonStreamContext0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(jsonStreamContext0.getCurrentName());
      assertEquals(0, jsonStreamContext0.getCurrentIndex());
      assertEquals(0, jsonStreamContext0.getEntryCount());
      assertTrue(jsonStreamContext0.inRoot());
      assertEquals("ROOT", jsonStreamContext0.getTypeDesc());
      assertFalse(jsonStreamContext0.inObject());
      assertFalse(jsonStreamContext0.inArray());
      
      TokenBuffer tokenBuffer4 = (TokenBuffer)tokenBuffer0.setCodec((ObjectCodec) null);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer3));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer0, tokenBuffer4);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer3);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer4, tokenBuffer2);
      assertSame(tokenBuffer4, tokenBuffer0);
      assertNotSame(tokenBuffer4, tokenBuffer1);
      assertNotSame(tokenBuffer4, tokenBuffer3);
      assertNotNull(tokenBuffer4);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer4.isClosed());
      assertFalse(tokenBuffer4.canWriteTypeId());
      assertTrue(tokenBuffer4.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer4.getHighestEscapedChar());
      assertEquals(79, tokenBuffer4.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer4.firstToken());
      assertTrue(tokenBuffer4.canOmitFields());
      assertFalse(tokenBuffer4.canWriteObjectId());
      
      tokenBuffer_Parser0.peekNextToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      
      tokenBuffer_Parser0.close();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      
      tokenBuffer_Parser0.peekNextToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      
      tokenBuffer_Parser0.nextToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      String string0 = "\\u";
      tokenBuffer0.writeNumberField(string0, 3967);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      int int0 = tokenBuffer_Parser0.getTextOffset();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      
      tokenBuffer0.writeStartObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer0.asParser();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, true, true);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer_Parser2.peekNextToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      
      boolean boolean0 = tokenBuffer_Parser0.hasTextCharacters();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectCodec objectCodec0 = null;
      boolean boolean0 = false;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer0._appendRaw(16, (Object) null);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      try { 
        tokenBuffer_Parser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000031; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      Double double0 = new Double((-5370.38839));
      assertEquals((-5370.38839), (double)double0, 0.01);
      assertNotNull(double0);
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: ]", string0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("JSON");
      assertSame(jsonFactory0, jsonFactory1);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(readerBasedJsonParser0);
      assertNotNull(tokenBuffer0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.useDefaultPrettyPrinter();
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotNull(tokenBuffer1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer0.writeStartObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      
      tokenBuffer0.writeNumberField("9&hv", 3967);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      
      tokenBuffer0.writeNumberField("9&hv", Float.NaN);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, true);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      
      JsonStreamContext jsonStreamContext0 = tokenBuffer_Parser1.getParsingContext();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotNull(jsonStreamContext0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, jsonStreamContext0.getEntryCount());
      assertTrue(jsonStreamContext0.inRoot());
      assertFalse(jsonStreamContext0.inObject());
      assertEquals("ROOT", jsonStreamContext0.getTypeDesc());
      assertNull(jsonStreamContext0.getCurrentName());
      assertFalse(jsonStreamContext0.inArray());
      assertEquals(0, jsonStreamContext0.getCurrentIndex());
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setCodec((ObjectCodec) null);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      
      JsonToken jsonToken0 = tokenBuffer_Parser1.peekNextToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(JsonToken.START_OBJECT, jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(jsonToken0.isScalarValue());
      assertEquals(1, jsonToken0.id());
      assertEquals("{", jsonToken0.asString());
      assertFalse(jsonToken0.isBoolean());
      assertTrue(jsonToken0.isStructStart());
      assertFalse(jsonToken0.isStructEnd());
      assertFalse(jsonToken0.isNumeric());
      
      tokenBuffer_Parser1.close();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      
      tokenBuffer0.writeTypeId("bF");
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      
      String string0 = tokenBuffer_Parser1.getText();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertTrue(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer0.writeNumberField("9&hv", 3967);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      
      Double double0 = new Double((-5370.38839));
      assertEquals((-5370.38839), (double)double0, 0.01);
      assertNotNull(double0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteObjectId());
      
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canOmitFields());
      
      tokenBuffer2.writeString("9&hv");
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      assertNull(tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      
      tokenBuffer0.writeNumber((-2.147483648E9));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertNull(tokenBuffer2.firstToken());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.isClosed());
      assertFalse(tokenBuffer2.canWriteObjectId());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      tokenBuffer0.writeEndArray();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      tokenBuffer1.firstToken();
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      
      System.setCurrentTimeMillis(16);
      String string0 = tokenBuffer0.toString();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals("[TokenBuffer: END_ARRAY]", string0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotNull(string0);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      tokenBuffer0.writeNumberField("z`l", (float) 16);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      tokenBuffer_Parser0.overrideCurrentName("z`l");
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals("z`l", tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals("z`l", tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.enable(jsonGenerator_Feature0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals("z`l", tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer1.firstToken());
      
      // Undeclared exception!
      tokenBuffer1.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      tokenBuffer0.writeNumberField("p:", 1286.744F);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      
      JsonStreamContext jsonStreamContext0 = tokenBuffer_Parser1.getParsingContext();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotNull(jsonStreamContext0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, jsonStreamContext0.getEntryCount());
      assertEquals("ROOT", jsonStreamContext0.getTypeDesc());
      assertTrue(jsonStreamContext0.inRoot());
      assertEquals(0, jsonStreamContext0.getCurrentIndex());
      assertNull(jsonStreamContext0.getCurrentName());
      assertFalse(jsonStreamContext0.inObject());
      assertFalse(jsonStreamContext0.inArray());
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setCodec((ObjectCodec) null);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canOmitFields());
      
      tokenBuffer_Parser1.peekNextToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      
      Object object0 = tokenBuffer_Parser2.getEmbeddedObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      
      tokenBuffer_Parser0.close();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      boolean boolean0 = tokenBuffer0.isClosed();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      boolean boolean0 = false;
      boolean boolean1 = true;
      int int0 = (-2623);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      tokenBuffer0.close();
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      Long long0 = new Long((-2623));
      assertEquals((-2623L), (long)long0);
      assertNotNull(long0);
      
      // Undeclared exception!
      try { 
        tokenBuffer_Segment0.append((-2623), jsonToken0, (Object) long0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer0._appendRaw((-2197), (Object) null);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      String string0 = tokenBuffer0.toString();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals("[TokenBuffer: VALUE_FALSE, VALUE_EMBEDDED_OBJECT, VALUE_STRING]", string0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer0.asParser();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      
      tokenBuffer_Parser0.overrideCurrentName("[TokenBuffer: VALUE_FALSE, VALUE_EMBEDDED_OBJECT, VALUE_STRING]");
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals("[TokenBuffer: VALUE_FALSE, VALUE_EMBEDDED_OBJECT, VALUE_STRING]", tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      Integer integer0 = new Integer((-2197));
      assertEquals((-2197), (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer0.writeStartObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      String string0 = tokenBuffer0.toString();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals("[TokenBuffer: START_OBJECT]", string0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.enable(jsonGenerator_Feature0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteObjectId());
      
      // Undeclared exception!
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      
      Short short0 = new Short((short)240);
      assertEquals((short)240, (short)short0);
      assertNotNull(short0);
      
      tokenBuffer0._appendRaw(1572, short0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: END_ARRAY, END_OBJECT, VALUE_EMBEDDED_OBJECT]", string0);
      assertNotNull(string0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer0.asParser();
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotNull(tokenBuffer_Parser1);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[TokenBuffer: END_ARRAY, END_OBJECT, VALUE_EMBEDDED_OBJECT]");
      assertFalse(boolean0);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      
      TokenBuffer.Parser tokenBuffer_Parser3 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser3);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser3.isClosed());
      assertTrue(tokenBuffer_Parser3.canReadObjectId());
      assertFalse(tokenBuffer_Parser3.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser3.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser3.canReadTypeId());
      assertNull(tokenBuffer_Parser3.peekNextToken());
      assertNull(tokenBuffer_Parser3.getCurrentName());
      assertEquals(0, tokenBuffer_Parser3.getTextOffset());
      assertNull(tokenBuffer_Parser3.getLastClearedToken());
      assertFalse(tokenBuffer_Parser3.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser3.hasTextCharacters());
      assertNull(tokenBuffer_Parser3.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser3.getFeatureMask());
      
      Boolean boolean1 = new Boolean("[TokenBuffer: END_ARRAY, END_OBJECT, VALUE_EMBEDDED_OBJECT]");
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertNull(tokenBuffer2.firstToken());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      
      tokenBuffer1.writeString(">6uuQCG");
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      
      JsonToken jsonToken0 = tokenBuffer1.firstToken();
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(JsonToken.VALUE_STRING, jsonToken0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(jsonToken0.isScalarValue());
      assertFalse(jsonToken0.isNumeric());
      assertFalse(jsonToken0.isBoolean());
      assertEquals(6, jsonToken0.id());
      assertFalse(jsonToken0.isStructEnd());
      assertFalse(jsonToken0.isStructStart());
      assertNull(jsonToken0.asString());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      String string0 = "9&hv";
      Double double0 = new Double((-5370.38839380885));
      assertEquals((-5370.38839380885), (double)double0, 0.01);
      assertNotNull(double0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw(charArray0, 67, 132);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.enable(jsonGenerator_Feature0);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(111, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(111, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(111, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(111, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer0.writeStartObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      String string0 = tokenBuffer0.toString();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals("[TokenBuffer: START_OBJECT]", string0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      tokenBuffer0.writeStartObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      tokenBuffer_Parser0.overrideCurrentName("[TokenBuffer: START_OBJECT]");
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals("[TokenBuffer: START_OBJECT]", tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      tokenBuffer0.writeEndArray();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[typeId=");
      assertFalse(boolean0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(charArray0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      tokenBuffer0.writeStartArray();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      
      tokenBuffer1.writeString((String) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(JsonToken.END_ARRAY, jsonToken0);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(jsonToken0.isStructEnd());
      assertFalse(jsonToken0.isBoolean());
      assertFalse(jsonToken0.isScalarValue());
      assertEquals(4, jsonToken0.id());
      assertFalse(jsonToken0.isStructStart());
      assertEquals("]", jsonToken0.asString());
      assertFalse(jsonToken0.isNumeric());
      
      tokenBuffer1.serialize(tokenBuffer0);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      assertNotNull(objectNode0);
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isDouble());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertNull(objectNode0.textValue());
      
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      Long long0 = new Long(16);
      assertEquals(16L, (long)long0);
      assertNotNull(long0);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append((-175), jsonToken0, (Object) long0, (Object) jsonNodeFactory0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer_Segment1.hasIds());
      
      Object object0 = tokenBuffer_Parser0.getTypeId();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      Float float0 = new Float((float) 16);
      assertEquals(16.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.isClosed());
      
      tokenBuffer0.serialize(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertNull(tokenBuffer2.firstToken());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.isClosed());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer0.writeStartObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      
      String string0 = tokenBuffer_Parser0.getCurrentName();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      TokenBuffer tokenBuffer2 = (TokenBuffer)tokenBuffer1.disable(jsonGenerator_Feature0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertNull(tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectCodec objectCodec0 = null;
      boolean boolean0 = true;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      int int0 = (-2197);
      tokenBuffer0._appendRaw((-2197), (Object) null);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: VALUE_FALSE, VALUE_EMBEDDED_OBJECT, VALUE_STRING]", string0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("", 115, 16);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      tokenBuffer_Parser0.overrideCurrentName("-");
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals("-", tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1._next;
      assertNull(tokenBuffer_Segment2);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals("-", tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.isClosed());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      
      try { 
        tokenBuffer_Parser0.getBigIntegerValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000031; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      boolean boolean0 = true;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer0.writeStartObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer0._first;
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment2.hasIds());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      
      // Undeclared exception!
      try { 
        tokenBuffer1.append(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer0.writeStartObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer0._first;
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment2.hasIds());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer2.firstToken());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      tokenBuffer0.writeEndArray();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      JsonToken jsonToken0 = tokenBuffer2.firstToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(JsonToken.START_OBJECT, jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer2.firstToken());
      assertEquals("{", jsonToken0.asString());
      assertFalse(jsonToken0.isBoolean());
      assertEquals(1, jsonToken0.id());
      assertFalse(jsonToken0.isScalarValue());
      assertTrue(jsonToken0.isStructStart());
      assertFalse(jsonToken0.isStructEnd());
      assertFalse(jsonToken0.isNumeric());
      
      TokenBuffer tokenBuffer3 = new TokenBuffer(objectMapper0, false);
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertNotNull(tokenBuffer3);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer3.firstToken());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertTrue(tokenBuffer3.canOmitFields());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertFalse(tokenBuffer3.canWriteTypeId());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertFalse(tokenBuffer3.isClosed());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      
      TokenBuffer tokenBuffer4 = tokenBuffer3.append(tokenBuffer1);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer1));
      assertNotSame(tokenBuffer1, tokenBuffer4);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer3);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer3, tokenBuffer0);
      assertNotSame(tokenBuffer3, tokenBuffer1);
      assertSame(tokenBuffer3, tokenBuffer4);
      assertNotSame(tokenBuffer3, tokenBuffer2);
      assertNotSame(tokenBuffer4, tokenBuffer2);
      assertNotSame(tokenBuffer4, tokenBuffer0);
      assertNotSame(tokenBuffer4, tokenBuffer1);
      assertSame(tokenBuffer4, tokenBuffer3);
      assertNotNull(tokenBuffer4);
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(tokenBuffer3.firstToken());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertTrue(tokenBuffer3.canOmitFields());
      assertFalse(tokenBuffer3.canWriteObjectId());
      assertFalse(tokenBuffer3.canWriteTypeId());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertFalse(tokenBuffer3.isClosed());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertEquals(79, tokenBuffer4.getFeatureMask());
      assertFalse(tokenBuffer4.isClosed());
      assertFalse(tokenBuffer4.canWriteTypeId());
      assertEquals(0, tokenBuffer4.getHighestEscapedChar());
      assertTrue(tokenBuffer4.canWriteBinaryNatively());
      assertNull(tokenBuffer4.firstToken());
      assertTrue(tokenBuffer4.canOmitFields());
      assertFalse(tokenBuffer4.canWriteObjectId());
      
      JsonLocation jsonLocation0 = tokenBuffer_Parser0.getCurrentLocation();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotNull(jsonLocation0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S:a");
      assertFalse(boolean0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = (TokenBuffer.Parser)tokenBuffer0.asParser();
      assertNotNull(tokenBuffer_Parser0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      tokenBuffer0.writeEndArray();
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      boolean boolean1 = tokenBuffer0.canWriteBinaryNatively();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = '';
      charArray0[3] = '9';
      charArray0[4] = '';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertArrayEquals(new char[] {',', '', '\u0000', '9', ''}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(readerBasedJsonParser0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(readerBasedJsonParser0);
      assertArrayEquals(new char[] {',', '', '\u0000', '9', ''}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(tokenBuffer0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      
      tokenBuffer0.writeNumber("TnKi[oAtH7=m");
      assertArrayEquals(new char[] {',', '', '\u0000', '9', ''}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      tokenBuffer0.writeEndArray();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[typeId=");
      assertFalse(boolean0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(charArray0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      
      tokenBuffer_Parser0.peekNextToken();
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      tokenBuffer_Parser0.close();
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      Short short0 = new Short((short)240);
      assertEquals((short)240, (short)short0);
      assertNotNull(short0);
      
      tokenBuffer0._appendRaw(1572, short0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: END_ARRAY, END_OBJECT, VALUE_EMBEDDED_OBJECT]", string0);
      assertNotNull(string0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer0.asParser();
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertNotNull(injectableValues_Std0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Class<Module> class0 = Module.class;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) tokenBuffer0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertNotNull(injectableValues_Std1);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      InjectableValues.Std injectableValues_Std2 = injectableValues_Std1.addValue("[TokenBuffer: END_ARRAY, END_OBJECT, VALUE_EMBEDDED_OBJECT]", (Object) null);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std0, injectableValues_Std2);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertSame(injectableValues_Std1, injectableValues_Std2);
      assertSame(injectableValues_Std2, injectableValues_Std0);
      assertSame(injectableValues_Std2, injectableValues_Std1);
      assertNotNull(injectableValues_Std2);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std2);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std0, injectableValues_Std2);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertSame(injectableValues_Std1, injectableValues_Std2);
      assertSame(injectableValues_Std2, injectableValues_Std0);
      assertSame(injectableValues_Std2, injectableValues_Std1);
      assertNotNull(objectReader0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(1, deserializationFeatureArray0.length);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std0, injectableValues_Std2);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertSame(injectableValues_Std1, injectableValues_Std2);
      assertSame(injectableValues_Std2, injectableValues_Std0);
      assertSame(injectableValues_Std2, injectableValues_Std1);
      assertNotNull(objectReader1);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      DeserializationFeature deserializationFeature1 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectReader objectReader2 = objectReader1.with(deserializationFeature1);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertEquals(1, deserializationFeatureArray0.length);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std0, injectableValues_Std2);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertSame(injectableValues_Std1, injectableValues_Std2);
      assertSame(injectableValues_Std2, injectableValues_Std0);
      assertSame(injectableValues_Std2, injectableValues_Std1);
      assertNotSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader1, objectReader0);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotNull(objectReader2);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectReader1, true);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(1, deserializationFeatureArray0.length);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      tokenBuffer0.writeEndObject();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer1, true);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(1, deserializationFeatureArray0.length);
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertTrue(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(1, deserializationFeatureArray0.length);
      assertNotSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader1, objectReader0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertSame(injectableValues_Std0, injectableValues_Std1);
      assertSame(injectableValues_Std0, injectableValues_Std2);
      assertSame(injectableValues_Std1, injectableValues_Std0);
      assertSame(injectableValues_Std1, injectableValues_Std2);
      assertSame(injectableValues_Std2, injectableValues_Std0);
      assertSame(injectableValues_Std2, injectableValues_Std1);
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      
      tokenBuffer0.writeStartArray(16);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer0.writeStartObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer0._first;
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment2.hasIds());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      String string0 = tokenBuffer0.toString();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertEquals("[TokenBuffer: START_ARRAY, START_OBJECT]", string0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer0.asParser();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      
      tokenBuffer1.firstToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      tokenBuffer1.writeNumber(bigInteger0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer0.writeStartObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer0._first;
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment2.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Segment3, tokenBuffer_Segment1);
      assertSame(tokenBuffer_Segment3, tokenBuffer_Segment2);
      assertNotNull(tokenBuffer_Segment3);
      assertFalse(tokenBuffer_Segment3.hasIds());
      
      tokenBuffer0._appendRaw(1428, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment3);
      assertSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertSame(tokenBuffer_Segment1, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      assertNotNull(beanSerializerFactory0);
      
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, true);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertNotNull(objectMapper2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      
      PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertNotNull(objectMapper3);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper3, true, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      
      tokenBuffer_Parser0.nextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      
      boolean boolean0 = tokenBuffer_Parser0.isClosed();
      assertFalse(boolean0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      
      System.setCurrentTimeMillis(16);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      assertNotNull(tokenBuffer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canOmitFields());
      
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("|t!B?8L<)nJ4", long0);
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      
      tokenBuffer0._append(jsonToken0, long1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3967, jsonToken0);
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = objectMapper0.addHandler((DeserializationProblemHandler) null);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertNotNull(objectMapper2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping();
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertNotNull(objectMapper3);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      ObjectMapper objectMapper4 = objectMapper3.setSubtypeResolver(stdSubtypeResolver0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper2);
      assertNotNull(objectMapper4);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(0, objectMapper4.mixInCount());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper4);
      assertNotNull(tokenBuffer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(0, objectMapper4.mixInCount());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper3, false, false);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      tokenBuffer_Parser0.overrideCurrentName("");
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper4);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals("", tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      JsonToken jsonToken1 = tokenBuffer_Parser0.nextToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(JsonToken.END_OBJECT, jsonToken1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper4);
      assertSame(jsonToken1, jsonToken0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(JsonToken.END_OBJECT, tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(2, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(jsonToken1.isStructStart());
      assertEquals("}", jsonToken1.asString());
      assertFalse(jsonToken1.isBoolean());
      assertFalse(jsonToken1.isNumeric());
      assertEquals(2, jsonToken1.id());
      assertTrue(jsonToken1.isStructEnd());
      assertFalse(jsonToken1.isScalarValue());
      
      try { 
        tokenBuffer_Parser0.getNumberValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (END_OBJECT) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000031; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      Short short0 = new Short((short)240);
      assertEquals((short)240, (short)short0);
      assertNotNull(short0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      assertNotNull(objectNode0);
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      
      Object object0 = tokenBuffer_Parser1.getTypeId();
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      
      ArrayNode arrayNode0 = objectNode0.withArray("NUMBER_FLOAT");
      assertNotNull(arrayNode0);
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals("", objectNode0.asText());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      
      char[] charArray0 = tokenBuffer_Parser1.getTextCharacters();
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNull(charArray0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      
      tokenBuffer0.writeStartArray();
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      
      tokenBuffer0.writeString((SerializableString) serializedString0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectCodec objectCodec0 = null;
      boolean boolean0 = false;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      assertEquals(JsonToken.VALUE_TRUE, jsonToken0);
      assertEquals("true", jsonToken0.asString());
      assertTrue(jsonToken0.isBoolean());
      assertFalse(jsonToken0.isStructStart());
      assertTrue(jsonToken0.isScalarValue());
      assertEquals(9, jsonToken0.id());
      assertFalse(jsonToken0.isNumeric());
      assertFalse(jsonToken0.isStructEnd());
      
      try { 
        tokenBuffer_Parser0.getBinaryValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary
         //  at [Source: java.lang.String@0000000031; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer0.writeStartObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer0._first;
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment2.hasIds());
      
      tokenBuffer0._appendRaw((-1309), "dI[a5G(QkQ88&HL");
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      String string0 = tokenBuffer0.toString();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals("[TokenBuffer: START_OBJECT, START_ARRAY]", string0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer0.asParser();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[TokenBuffer: START_OBJECT, START_ARRAY]");
      assertFalse(boolean0);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, true, false);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser2.peekNextToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.canReadObjectId());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      
      boolean boolean1 = tokenBuffer_Parser2.hasTextCharacters();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer_Parser2.peekNextToken());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.canReadObjectId());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      FloatNode floatNode0 = FloatNode.valueOf((-1309));
      assertNotNull(floatNode0);
      assertFalse(floatNode0.isBigDecimal());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isInt());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertEquals((-1309.0), floatNode0.doubleValue(), 0.01);
      assertTrue(floatNode0.canConvertToLong());
      assertFalse(floatNode0.booleanValue());
      assertEquals((-1309), floatNode0.intValue());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isLong());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertFalse(floatNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isShort());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isBigInteger());
      assertNull(floatNode0.textValue());
      assertEquals((-1309L), floatNode0.longValue());
      assertEquals((short) (-1309), floatNode0.shortValue());
      assertEquals((-1309.0F), floatNode0.floatValue(), 0.01F);
      
      tokenBuffer0._append(jsonToken0, tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Segment2.hasIds());
      
      tokenBuffer0.writeNumber(bigInteger0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, true);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canWriteTypeId());
      
      CharacterEscapes characterEscapes0 = jsonGeneratorDelegate0.getCharacterEscapes();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNull(characterEscapes0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(jsonGeneratorDelegate0.canWriteObjectId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertTrue(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canWriteTypeId());
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setCharacterEscapes((CharacterEscapes) null);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer0._appendRaw((-2197), (Object) null);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      String string0 = tokenBuffer0.toString();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals("[TokenBuffer: VALUE_FALSE, VALUE_EMBEDDED_OBJECT, VALUE_STRING]", string0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotNull(string0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer0.asParser();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer_Parser1.peekNextToken());
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setCodec((ObjectCodec) null);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      
      tokenBuffer_Parser0.nextToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      
      tokenBuffer_Parser2.nextToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      
      tokenBuffer_Parser2.peekNextToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      
      Object object0 = tokenBuffer_Parser2.getEmbeddedObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertTrue(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertFalse(tokenBuffer_Parser2.canReadTypeId());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      
      tokenBuffer_Parser1.close();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertTrue(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      
      tokenBuffer0.serialize(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertNotNull(objectNode0);
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      
      ObjectNode objectNode1 = objectNode0.deepCopy();
      assertTrue(objectNode1.equals((Object)objectNode0));
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode1, objectNode0);
      assertNotNull(objectNode1);
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isBigInteger());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertEquals(0, objectNode1.size());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      
      ObjectNode objectNode2 = objectNode1.put("[TokenBuffer: VALUE_FALSE, VALUE_EMBEDDED_OBJECT, VALUE_STRING]", 16);
      assertFalse(objectNode0.equals((Object)objectNode1));
      assertFalse(objectNode1.equals((Object)objectNode0));
      assertFalse(objectNode2.equals((Object)objectNode0));
      assertNotSame(objectNode0, objectNode1);
      assertNotSame(objectNode0, objectNode2);
      assertNotSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode1);
      assertNotSame(objectNode2, objectNode0);
      assertNotNull(objectNode2);
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isBigInteger());
      assertEquals("", objectNode0.asText());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.isInt());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isBigInteger());
      assertEquals("", objectNode1.asText());
      assertNull(objectNode1.textValue());
      assertEquals(1, objectNode1.size());
      assertFalse(objectNode1.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.booleanValue());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertFalse(objectNode2.isDouble());
      assertFalse(objectNode2.isShort());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertFalse(objectNode2.isLong());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertFalse(objectNode2.isInt());
      assertEquals(1, objectNode2.size());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isFloat());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isIntegralNumber());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertEquals("", objectNode2.asText());
      
      tokenBuffer_Parser0.overrideCurrentName("[TokenBuffer: VALUE_FALSE, VALUE_EMBEDDED_OBJECT, VALUE_STRING]");
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals("[TokenBuffer: VALUE_FALSE, VALUE_EMBEDDED_OBJECT, VALUE_STRING]", tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      // Undeclared exception!
      try { 
        tokenBuffer1.copyCurrentEvent(tokenBuffer_Parser1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[typeId=");
      assertFalse(boolean0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Long long0 = new Long(16);
      assertEquals(16L, (long)long0);
      assertNotNull(long0);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment0.append(6, jsonToken0, (Object) class0, (Object) jsonToken0, (Object) long0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNull(tokenBuffer_Segment2);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = objectMapper0.copy();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "td5L',`CY3n");
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertNotNull(objectMapper2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectMapper objectMapper3 = objectMapper2.disable(deserializationFeature0, deserializationFeatureArray0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertEquals(0, deserializationFeatureArray0.length);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(objectMapper3, objectMapper0);
      assertNotNull(objectMapper3);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ShortNode shortNode0 = new ShortNode((short) (-1454));
      assertNotNull(shortNode0);
      assertEquals((short) (-1454), shortNode0.shortValue());
      assertEquals((-1454.0F), shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.canConvertToLong());
      assertEquals((-1454.0), shortNode0.doubleValue(), 0.01);
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isShort());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isFloat());
      assertEquals((-1454L), shortNode0.longValue());
      assertEquals((-1454), shortNode0.intValue());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isIntegralNumber());
      
      BigInteger bigInteger0 = shortNode0.bigIntegerValue();
      assertNotNull(bigInteger0);
      assertEquals((short) (-1454), shortNode0.shortValue());
      assertEquals((-1454.0F), shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.canConvertToLong());
      assertEquals((-1454.0), shortNode0.doubleValue(), 0.01);
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isShort());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isFloat());
      assertEquals((-1454L), shortNode0.longValue());
      assertEquals((-1454), shortNode0.intValue());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals((short) (-1454), bigInteger0.shortValue());
      assertEquals((byte)82, bigInteger0.byteValue());
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(bigInteger0);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotNull(contextAttributes1);
      assertEquals((short) (-1454), shortNode0.shortValue());
      assertEquals((-1454.0F), shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.canConvertToLong());
      assertEquals((-1454.0), shortNode0.doubleValue(), 0.01);
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isShort());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isFloat());
      assertEquals((-1454L), shortNode0.longValue());
      assertEquals((-1454), shortNode0.intValue());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals((short) (-1454), bigInteger0.shortValue());
      assertEquals((byte)82, bigInteger0.byteValue());
      
      ObjectReader objectReader0 = objectMapper3.reader(contextAttributes1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertEquals(0, deserializationFeatureArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(objectMapper3, objectMapper0);
      assertNotNull(objectReader0);
      assertEquals((short) (-1454), shortNode0.shortValue());
      assertEquals((-1454.0F), shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.canConvertToLong());
      assertEquals((-1454.0), shortNode0.doubleValue(), 0.01);
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isShort());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isFloat());
      assertEquals((-1454L), shortNode0.longValue());
      assertEquals((-1454), shortNode0.intValue());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals((short) (-1454), bigInteger0.shortValue());
      assertEquals((byte)82, bigInteger0.byteValue());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectReader0, false, false);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, deserializationFeatureArray0.length);
      assertNotNull(tokenBuffer_Parser1);
      assertEquals((short) (-1454), shortNode0.shortValue());
      assertEquals((-1454.0F), shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.canConvertToLong());
      assertEquals((-1454.0), shortNode0.doubleValue(), 0.01);
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isShort());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isFloat());
      assertEquals((-1454L), shortNode0.longValue());
      assertEquals((-1454), shortNode0.intValue());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals((short) (-1454), bigInteger0.shortValue());
      assertEquals((byte)82, bigInteger0.byteValue());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNull(charArray0);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      
      tokenBuffer0.writeStartArray();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.START_ARRAY, tokenBuffer0.firstToken());
      
      Object object0 = tokenBuffer_Parser1.getEmbeddedObject();
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(0, deserializationFeatureArray0.length);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(objectMapper3, objectMapper0);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNull(object0);
      assertEquals((short) (-1454), shortNode0.shortValue());
      assertEquals((-1454.0F), shortNode0.floatValue(), 0.01F);
      assertTrue(shortNode0.canConvertToLong());
      assertEquals((-1454.0), shortNode0.doubleValue(), 0.01);
      assertTrue(shortNode0.canConvertToInt());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isDouble());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.isShort());
      assertEquals(0, shortNode0.size());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertNull(shortNode0.textValue());
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isFloat());
      assertEquals((-1454L), shortNode0.longValue());
      assertEquals((-1454), shortNode0.intValue());
      assertFalse(shortNode0.isBigDecimal());
      assertFalse(shortNode0.booleanValue());
      assertTrue(shortNode0.isIntegralNumber());
      assertEquals((short) (-1454), bigInteger0.shortValue());
      assertEquals((byte)82, bigInteger0.byteValue());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      
      tokenBuffer_Parser0.peekNextToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(6, (-598), (Object) bigInteger0, (Object) null, (Object) "Ignored field \"");
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(tokenBuffer_Segment1);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment2.hasIds());
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment2.appendRaw(16, 16, (Object) tokenBuffer0, (Object) tokenBuffer_Segment0, (Object) bigInteger1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment3);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertTrue(tokenBuffer_Segment3.hasIds());
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      TokenBuffer.Segment tokenBuffer_Segment4 = new TokenBuffer.Segment();
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment4);
      assertFalse(tokenBuffer_Segment4.hasIds());
      
      JsonToken jsonToken1 = JsonToken.VALUE_FALSE;
      TokenBuffer.Segment tokenBuffer_Segment5 = tokenBuffer_Segment4.append(16, jsonToken1);
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment0));
      assertFalse(jsonToken1.equals((Object)jsonToken0));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment4));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment5);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment0);
      assertNotSame(jsonToken1, jsonToken0);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment4);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment5);
      assertFalse(tokenBuffer_Segment4.hasIds());
      assertFalse(tokenBuffer_Segment5.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment6 = tokenBuffer_Segment5.append((int) (short) (-1), jsonToken1);
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment5));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment0));
      assertFalse(jsonToken1.equals((Object)jsonToken0));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment4));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment5);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment0);
      assertNotSame(jsonToken1, jsonToken0);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment4);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment0);
      assertNull(tokenBuffer_Segment6);
      assertFalse(tokenBuffer_Segment4.hasIds());
      assertFalse(tokenBuffer_Segment5.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment7 = tokenBuffer_Segment5.append(16, jsonToken0, (Object) short0);
      assertFalse(jsonToken0.equals((Object)jsonToken1));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment5));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment0));
      assertFalse(jsonToken1.equals((Object)jsonToken0));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment4));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment7.equals((Object)tokenBuffer_Segment4));
      assertFalse(tokenBuffer_Segment7.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment7.equals((Object)tokenBuffer_Segment5));
      assertFalse(tokenBuffer_Segment7.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment7.equals((Object)tokenBuffer_Segment2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment5);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment7);
      assertNotSame(jsonToken1, jsonToken0);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment4);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment7);
      assertNotSame(tokenBuffer_Segment7, tokenBuffer_Segment4);
      assertNotSame(tokenBuffer_Segment7, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment7, tokenBuffer_Segment5);
      assertNotSame(tokenBuffer_Segment7, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment7, tokenBuffer_Segment2);
      assertNotNull(tokenBuffer_Segment7);
      assertFalse(tokenBuffer_Segment4.hasIds());
      assertFalse(tokenBuffer_Segment5.hasIds());
      assertFalse(tokenBuffer_Segment7.hasIds());
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment5));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment7));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment4));
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment5);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment7);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment4);
      assertTrue(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      tokenBuffer0.writeNumberField("z`l", (float) 16);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      tokenBuffer_Parser0.overrideCurrentName((String) null);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      
      tokenBuffer_Parser0.nextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      
      Boolean boolean0 = tokenBuffer_Parser0.nextBooleanValue();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(boolean0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      
      tokenBuffer_Parser1.peekNextToken();
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      
      Object object1 = tokenBuffer_Parser1.getEmbeddedObject();
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNull(object1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: FIELD_NAME(z`l), VALUE_NUMBER_FLOAT, VALUE_NUMBER_FLOAT]", string0);
      assertNotNull(string0);
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      int int1 = tokenBuffer_Segment0.rawType(0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      tokenBuffer_Parser0.overrideCurrentName("[typeId=");
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals("[typeId=", tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertEquals(0, int0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals("[typeId=", tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      
      int int1 = tokenBuffer_Segment0.rawType(65536);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      assertNotNull(tokenBuffer0);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      
      JsonStreamContext jsonStreamContext0 = tokenBuffer_Parser1.getParsingContext();
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotNull(jsonStreamContext0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(0, jsonStreamContext0.getEntryCount());
      assertEquals("ROOT", jsonStreamContext0.getTypeDesc());
      assertTrue(jsonStreamContext0.inRoot());
      assertEquals(0, jsonStreamContext0.getCurrentIndex());
      assertNull(jsonStreamContext0.getCurrentName());
      assertFalse(jsonStreamContext0.inObject());
      assertFalse(jsonStreamContext0.inArray());
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setCodec((ObjectCodec) null);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotNull(tokenBuffer1);
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      
      tokenBuffer_Parser0.peekNextToken();
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      
      tokenBuffer_Parser1.close();
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertTrue(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)124, (byte)6, (byte) (-112), (byte)3}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)124, (byte)6, (byte) (-112), (byte)3}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        tokenBuffer1.writeBinary((Base64Variant) null, (InputStream) byteArrayInputStream0, (int) (byte)0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      tokenBuffer0.writeNumberField("z`l", (float) 16);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      
      tokenBuffer_Parser0.overrideCurrentName("z`l");
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals("z`l", tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      Object object0 = tokenBuffer_Parser0.getEmbeddedObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals("z`l", tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.enable(jsonGenerator_Feature0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer0, tokenBuffer1);
      assertSame(tokenBuffer1, tokenBuffer0);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals("z`l", tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      
      // Undeclared exception!
      tokenBuffer0.serialize(tokenBuffer1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      tokenBuffer_Parser0.overrideCurrentName("-");
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals("-", tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals("-", tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(8, jsonToken0.id());
      assertTrue(jsonToken0.isNumeric());
      assertFalse(jsonToken0.isStructStart());
      assertNull(jsonToken0.asString());
      assertTrue(jsonToken0.isScalarValue());
      assertFalse(jsonToken0.isBoolean());
      assertFalse(jsonToken0.isStructEnd());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals("-", tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      
      tokenBuffer2.serialize(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals("-", tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      
      JsonToken jsonToken1 = tokenBuffer2.firstToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jsonToken1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertSame(jsonToken1, jsonToken0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertEquals("-", tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer1.firstToken());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertTrue(jsonToken1.isScalarValue());
      assertEquals(8, jsonToken1.id());
      assertFalse(jsonToken1.isStructEnd());
      assertFalse(jsonToken1.isBoolean());
      assertFalse(jsonToken1.isStructStart());
      assertNull(jsonToken1.asString());
      assertTrue(jsonToken1.isNumeric());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectCodec objectCodec0 = null;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._first;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer0.writeNumber((BigDecimal) null);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      tokenBuffer_Parser0.overrideCurrentName("");
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals("", tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      tokenBuffer_Parser0.nextToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals("", tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      Object object0 = tokenBuffer0._objectId;
      assertNull(object0);
      
      tokenBuffer_Parser0.close();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals("", tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 16, (ObjectCodec) null, (OutputStream) null);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(uTF8JsonGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(16, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      
      tokenBuffer0.serialize(uTF8JsonGenerator0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals("", tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(16, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      assertNotNull(tokenBuffer0);
      assertNull(tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      tokenBuffer0.writeEndArray();
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(JsonToken.END_ARRAY, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[typeId=");
      assertFalse(boolean0);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      char[] charArray0 = tokenBuffer_Parser0.getTextCharacters();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(charArray0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      tokenBuffer_Parser0.overrideCurrentName("[typeId=");
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals("[typeId=", tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      tokenBuffer_Parser0.nextToken();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals("[typeId=", tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      tokenBuffer1.writeNumber((BigInteger) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertTrue(tokenBuffer1.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer0.firstToken());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer0.writeStartObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer0._first;
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment2.hasIds());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      assertNotNull(objectNode0);
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isLong());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isDouble());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.booleanValue());
      assertEquals(0, objectNode0.size());
      assertNull(objectNode0.numberType());
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      JsonToken jsonToken1 = JsonToken.VALUE_NUMBER_FLOAT;
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment1.append((-712), jsonToken1);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(jsonToken1.equals((Object)jsonToken0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(jsonToken1, jsonToken0);
      assertNull(tokenBuffer_Segment3);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      Double double0 = new Double(1821.965011);
      assertEquals(1821.965011, (double)double0, 0.01);
      assertNotNull(double0);
      
      TokenBuffer.Segment tokenBuffer_Segment4 = tokenBuffer_Segment2.append(16, jsonToken0, (Object) bigInteger0, (Object) double0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(jsonToken0.equals((Object)jsonToken1));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment4);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment4);
      assertSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment1);
      assertNotNull(tokenBuffer_Segment4);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertTrue(tokenBuffer_Segment4.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment5 = tokenBuffer_Segment4.append(16, jsonToken0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment4));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment4));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(jsonToken0.equals((Object)jsonToken1));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment4));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment5.equals((Object)tokenBuffer_Segment2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment5);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment4);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment4);
      assertSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment5);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(jsonToken0, jsonToken1);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment5);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment4);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment5, tokenBuffer_Segment2);
      assertNotNull(tokenBuffer_Segment5);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment2.hasIds());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertTrue(tokenBuffer_Segment4.hasIds());
      assertFalse(tokenBuffer_Segment5.hasIds());
      
      Double double1 = new Double(16);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(16.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertNull(tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canOmitFields());
      
      // Undeclared exception!
      try { 
        tokenBuffer1.append(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      assertNotNull(tokenBuffer0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append((-1242), jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNull(tokenBuffer_Segment1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertNull(tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      tokenBuffer_Parser0.peekNextToken();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      
      tokenBuffer_Parser0.nextToken();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer0.writeStartObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
      assertNotNull(objectNode0);
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isFloat());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isLong());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.booleanValue());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isInt());
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Double double0 = new Double(1821.965011);
      assertEquals(1821.965011, (double)double0, 0.01);
      assertNotNull(double0);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(16, jsonToken0, (Object) bigInteger0, (Object) double0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(tokenBuffer_Segment2.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment2.append(16, jsonToken0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment3.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment3, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment3);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment1.hasIds());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(tokenBuffer_Segment2.hasIds());
      assertFalse(tokenBuffer_Segment3.hasIds());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)8;
      tokenBuffer0.writeBinaryField("", byteArray0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertArrayEquals(new byte[] {(byte)18, (byte)8}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      
      Double double1 = new Double(16);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(16.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      TokenBuffer.Segment tokenBuffer_Segment4 = tokenBuffer_Segment1.append(822, jsonToken0, (Object) null);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment3));
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment3));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment4);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment3);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment4);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment3);
      assertNotNull(tokenBuffer_Segment4);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer_Segment4.hasIds());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.canWriteTypeId());
      
      // Undeclared exception!
      try { 
        tokenBuffer1.append(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer0.writeStartObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer0._first;
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment2.hasIds());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      Long long0 = new Long(16);
      assertEquals(16L, (long)long0);
      assertNotNull(long0);
      
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment2.append((-175), jsonToken0, (Object) long0, (Object) jsonNodeFactory0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNull(tokenBuffer_Segment3);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer_Segment2.hasIds());
      
      TokenBuffer.Segment tokenBuffer_Segment4 = tokenBuffer0._first;
      assertFalse(tokenBuffer_Segment4.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Segment4, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment4, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Segment4, tokenBuffer_Segment2);
      assertNotNull(tokenBuffer_Segment4);
      assertTrue(tokenBuffer_Segment4.hasIds());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      
      TokenBuffer tokenBuffer2 = tokenBuffer1.append(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment4));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment4);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer2, tokenBuffer0);
      assertSame(tokenBuffer2, tokenBuffer1);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertFalse(tokenBuffer1.isClosed());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canWriteTypeId());
      assertTrue(tokenBuffer2.canOmitFields());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertFalse(tokenBuffer2.isClosed());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      tokenBuffer0.writeEndArray();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment4));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment4);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      JsonToken jsonToken1 = tokenBuffer0.firstToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment4));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer2));
      assertEquals(JsonToken.VALUE_STRING, jsonToken1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment4);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer0, tokenBuffer2);
      assertSame(jsonToken1, jsonToken0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertFalse(jsonToken1.isStructStart());
      assertFalse(jsonToken1.isBoolean());
      assertFalse(jsonToken1.isStructEnd());
      assertFalse(jsonToken1.isNumeric());
      assertTrue(jsonToken1.isScalarValue());
      assertEquals(6, jsonToken1.id());
      assertNull(jsonToken1.asString());
      
      TokenBuffer tokenBuffer3 = new TokenBuffer(objectMapper0, true);
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer3.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer3);
      assertTrue(tokenBuffer3.canWriteObjectId());
      assertTrue(tokenBuffer3.canWriteTypeId());
      assertNull(tokenBuffer3.firstToken());
      assertEquals(0, tokenBuffer3.getHighestEscapedChar());
      assertTrue(tokenBuffer3.canWriteBinaryNatively());
      assertFalse(tokenBuffer3.isClosed());
      assertTrue(tokenBuffer3.canOmitFields());
      assertEquals(79, tokenBuffer3.getFeatureMask());
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenBuffer tokenBuffer4 = new TokenBuffer((ObjectCodec) null);
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer3));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer4.equals((Object)tokenBuffer0));
      assertNotNull(tokenBuffer4);
      assertEquals(79, tokenBuffer4.getFeatureMask());
      assertFalse(tokenBuffer4.canWriteTypeId());
      assertTrue(tokenBuffer4.canWriteBinaryNatively());
      assertFalse(tokenBuffer4.canWriteObjectId());
      assertTrue(tokenBuffer4.canOmitFields());
      assertNull(tokenBuffer4.firstToken());
      assertEquals(0, tokenBuffer4.getHighestEscapedChar());
      assertFalse(tokenBuffer4.isClosed());
      
      try { 
        tokenBuffer_Parser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000000031; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      ObjectCodec objectCodec0 = null;
      boolean boolean0 = true;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      assertFalse(tokenBuffer_Segment1.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment1, tokenBuffer_Segment0);
      assertNotNull(tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment1.hasIds());
      
      tokenBuffer0.writeStartObject();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.START_OBJECT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer0._first;
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNotNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer_Segment2.hasIds());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectCodec objectCodec1 = null;
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      Long long0 = new Long(16);
      assertEquals(16L, (long)long0);
      assertNotNull(long0);
      
      TokenBuffer.Segment tokenBuffer_Segment3 = tokenBuffer_Segment2.append((-175), jsonToken0, (Object) long0, (Object) jsonNodeFactory0);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertNull(tokenBuffer_Segment3);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer_Segment2.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser1.equals((Object)tokenBuffer_Parser0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      
      Object object0 = tokenBuffer_Parser0.getTypeId();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNull(object0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      
      String string0 = " ... (truncated ";
      Float float0 = new Float((float) 16);
      assertEquals(16.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertFalse(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.isClosed());
      
      JsonStreamContext jsonStreamContext0 = tokenBuffer_Parser2.getParsingContext();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser2.equals((Object)tokenBuffer_Parser1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser2, tokenBuffer_Parser1);
      assertNotNull(jsonStreamContext0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser2.peekNextToken());
      assertNull(tokenBuffer_Parser2.getCurrentToken());
      assertFalse(tokenBuffer_Parser2.canReadObjectId());
      assertEquals(0, tokenBuffer_Parser2.getCurrentTokenId());
      assertTrue(tokenBuffer_Parser2.canReadTypeId());
      assertFalse(tokenBuffer_Parser2.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser2.getTextOffset());
      assertNull(tokenBuffer_Parser2.getCurrentName());
      assertFalse(tokenBuffer_Parser2.requiresCustomCodec());
      assertNull(tokenBuffer_Parser2.getLastClearedToken());
      assertFalse(tokenBuffer_Parser2.hasTextCharacters());
      assertEquals(0, tokenBuffer_Parser2.getFeatureMask());
      assertFalse(tokenBuffer_Parser2.isClosed());
      assertNull(jsonStreamContext0.getCurrentName());
      assertFalse(jsonStreamContext0.inArray());
      assertTrue(jsonStreamContext0.inRoot());
      assertFalse(jsonStreamContext0.inObject());
      assertEquals("ROOT", jsonStreamContext0.getTypeDesc());
      assertEquals(0, jsonStreamContext0.getEntryCount());
      assertEquals(0, jsonStreamContext0.getCurrentIndex());
      
      boolean boolean1 = false;
      TokenBuffer.Parser tokenBuffer_Parser3 = new TokenBuffer.Parser(tokenBuffer_Segment2, (ObjectCodec) null, true, false);
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser3);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser3.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser3.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser3.hasCurrentToken());
      assertFalse(tokenBuffer_Parser3.canReadObjectId());
      assertNull(tokenBuffer_Parser3.getCurrentName());
      assertEquals(0, tokenBuffer_Parser3.getTextOffset());
      assertFalse(tokenBuffer_Parser3.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser3.getFeatureMask());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer_Parser3.peekNextToken());
      assertFalse(tokenBuffer_Parser3.isClosed());
      assertFalse(tokenBuffer_Parser3.hasTextCharacters());
      assertNull(tokenBuffer_Parser3.getCurrentToken());
      assertNull(tokenBuffer_Parser3.getLastClearedToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer_Segment2.hasIds());
      
      JsonToken jsonToken1 = tokenBuffer_Parser3.peekNextToken();
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment2));
      assertFalse(tokenBuffer_Segment0.equals((Object)tokenBuffer_Segment1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser3));
      assertFalse(tokenBuffer_Parser0.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser0));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser2));
      assertFalse(tokenBuffer_Parser3.equals((Object)tokenBuffer_Parser1));
      assertFalse(tokenBuffer_Segment2.equals((Object)tokenBuffer_Segment0));
      assertEquals(JsonToken.VALUE_STRING, jsonToken1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment2);
      assertNotSame(tokenBuffer_Segment0, tokenBuffer_Segment1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser3);
      assertNotSame(tokenBuffer_Parser0, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser0);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser2);
      assertNotSame(tokenBuffer_Parser3, tokenBuffer_Parser1);
      assertSame(jsonToken1, jsonToken0);
      assertNotSame(tokenBuffer_Segment2, tokenBuffer_Segment0);
      assertSame(tokenBuffer_Segment2, tokenBuffer_Segment1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertTrue(tokenBuffer_Parser3.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser3.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser3.hasCurrentToken());
      assertFalse(tokenBuffer_Parser3.canReadObjectId());
      assertNull(tokenBuffer_Parser3.getCurrentName());
      assertEquals(0, tokenBuffer_Parser3.getTextOffset());
      assertFalse(tokenBuffer_Parser3.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser3.getFeatureMask());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer_Parser3.peekNextToken());
      assertFalse(tokenBuffer_Parser3.isClosed());
      assertFalse(tokenBuffer_Parser3.hasTextCharacters());
      assertNull(tokenBuffer_Parser3.getCurrentToken());
      assertNull(tokenBuffer_Parser3.getLastClearedToken());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(jsonToken1.isNumeric());
      assertNull(jsonToken1.asString());
      assertTrue(jsonToken1.isScalarValue());
      assertFalse(jsonToken1.isStructStart());
      assertFalse(jsonToken1.isStructEnd());
      assertFalse(jsonToken1.isBoolean());
      assertEquals(6, jsonToken1.id());
      assertTrue(tokenBuffer_Segment2.hasIds());
      
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Segment0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      TokenBuffer.Parser tokenBuffer_Parser1 = (TokenBuffer.Parser)tokenBuffer_Parser0.configure(jsonParser_Feature0, false);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertNotNull(tokenBuffer_Parser1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser1);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertNull(tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      tokenBuffer0.writeNumber(664);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      tokenBuffer0.writeEndArray();
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(jsonToken0.isStructEnd());
      assertTrue(jsonToken0.isScalarValue());
      assertNull(jsonToken0.asString());
      assertFalse(jsonToken0.isStructStart());
      assertTrue(jsonToken0.isNumeric());
      assertEquals(7, jsonToken0.id());
      assertFalse(jsonToken0.isBoolean());
      
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertNotNull(tokenBuffer1);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      
      TokenBuffer tokenBuffer2 = tokenBuffer0.append(tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertNotNull(tokenBuffer2);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertNull(tokenBuffer1.firstToken());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.isClosed());
      
      tokenBuffer2.serialize(tokenBuffer1);
      assertFalse(tokenBuffer0.equals((Object)tokenBuffer1));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer0));
      assertFalse(tokenBuffer1.equals((Object)tokenBuffer2));
      assertFalse(tokenBuffer2.equals((Object)tokenBuffer1));
      assertEquals(16, TokenBuffer.Segment.TOKENS_PER_SEGMENT);
      assertSame(tokenBuffer_Parser0, tokenBuffer_Parser1);
      assertSame(tokenBuffer_Parser1, tokenBuffer_Parser0);
      assertSame(tokenBuffer0, tokenBuffer2);
      assertNotSame(tokenBuffer0, tokenBuffer1);
      assertNotSame(tokenBuffer1, tokenBuffer0);
      assertNotSame(tokenBuffer1, tokenBuffer2);
      assertNotSame(tokenBuffer2, tokenBuffer1);
      assertSame(tokenBuffer2, tokenBuffer0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertNull(tokenBuffer_Parser0.getLastClearedToken());
      assertFalse(tokenBuffer_Parser0.requiresCustomCodec());
      assertEquals(0, tokenBuffer_Parser0.getTextOffset());
      assertNull(tokenBuffer_Parser0.getCurrentName());
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.hasCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getCurrentTokenId());
      assertNull(tokenBuffer_Parser0.peekNextToken());
      assertFalse(tokenBuffer_Parser0.hasTextCharacters());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertNull(tokenBuffer_Parser0.getCurrentToken());
      assertEquals(0, tokenBuffer_Parser0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.isClosed());
      assertFalse(tokenBuffer_Parser1.hasCurrentToken());
      assertFalse(tokenBuffer_Parser1.isClosed());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
      assertNull(tokenBuffer_Parser1.peekNextToken());
      assertNull(tokenBuffer_Parser1.getCurrentToken());
      assertFalse(tokenBuffer_Parser1.hasTextCharacters());
      assertNull(tokenBuffer_Parser1.getLastClearedToken());
      assertEquals(0, tokenBuffer_Parser1.getCurrentTokenId());
      assertFalse(tokenBuffer_Parser1.requiresCustomCodec());
      assertFalse(tokenBuffer_Parser1.canReadTypeId());
      assertEquals(0, tokenBuffer_Parser1.getFeatureMask());
      assertNull(tokenBuffer_Parser1.getCurrentName());
      assertEquals(0, tokenBuffer_Parser1.getTextOffset());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.isClosed());
      assertTrue(tokenBuffer0.canOmitFields());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer1.getHighestEscapedChar());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer1.firstToken());
      assertTrue(tokenBuffer1.canWriteBinaryNatively());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertFalse(tokenBuffer1.isClosed());
      assertTrue(tokenBuffer1.canOmitFields());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(0, tokenBuffer2.getHighestEscapedChar());
      assertEquals(79, tokenBuffer2.getFeatureMask());
      assertTrue(tokenBuffer2.canWriteObjectId());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer2.firstToken());
      assertTrue(tokenBuffer2.canOmitFields());
      assertTrue(tokenBuffer2.canWriteBinaryNatively());
      assertFalse(tokenBuffer2.canWriteTypeId());
      assertFalse(tokenBuffer2.isClosed());
  }
}
