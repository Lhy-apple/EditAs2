/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:04:58 GMT 2023
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
import com.fasterxml.jackson.databind.deser.std.CollectionDeserializer;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedInputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CollectionDeserializer_ESTest extends CollectionDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(mapType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
      CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved((JsonDeserializer<?>) null, (JsonDeserializer<?>) null, (TypeDeserializer) null);
      assertSame(collectionDeserializer1, collectionDeserializer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(mapType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        collectionDeserializer0.deserializeWithType((JsonParser) null, defaultDeserializationContext_Impl0, (TypeDeserializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.CollectionDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, (-649));
      Boolean boolean0 = Boolean.valueOf("T{-G<;=:)86+*no");
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, fromStringDeserializer_Std0, (TypeDeserializer) null, (ValueInstantiator) null, fromStringDeserializer_Std0, boolean0);
      CollectionDeserializer collectionDeserializer1 = new CollectionDeserializer(collectionDeserializer0);
      assertFalse(collectionDeserializer1.isCachable());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<POJONode> class0 = POJONode.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, classNameIdResolver0, "mVXy~UeCVCm*j3'y", true, class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(referenceType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0, jsonLocationInstantiator0);
      collectionDeserializer0.getContentType();
      assertFalse(collectionDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
      JsonDeserializer<Object> jsonDeserializer0 = collectionDeserializer0.getContentDeserializer();
      assertNull(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "q_Ecm0t|_4P3y6=;Bi!", true, class0);
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(mapType0, (JsonDeserializer<Object>) null, asExternalTypeDeserializer0, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, (Boolean) null);
      Boolean boolean0 = Boolean.valueOf(true);
      collectionDeserializer0.withResolved(collectionDeserializer0, collectionDeserializer0, asExternalTypeDeserializer0, boolean0);
      assertFalse(collectionDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<POJONode> class0 = POJONode.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, typeFactory0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(mapType0, classNameIdResolver0, "mVXy~UeCVCm*j3'y", true, class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(referenceType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0, jsonLocationInstantiator0);
      CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved((JsonDeserializer<?>) null, collectionDeserializer0, asWrapperTypeDeserializer0, (Boolean) null);
      boolean boolean0 = collectionDeserializer1.isCachable();
      assertNotSame(collectionDeserializer1, collectionDeserializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "", true, class0);
      Class<PipedInputStream> class1 = PipedInputStream.class;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, classNameIdResolver0, "5nIp1\r2YCM", true, class1, jsonTypeInfo_As0);
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(mapType0, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, (Boolean) null);
      Boolean boolean0 = new Boolean(true);
      CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved((JsonDeserializer<?>) null, (JsonDeserializer<?>) null, asExternalTypeDeserializer0, boolean0);
      assertFalse(collectionDeserializer1.isCachable());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "q_Ecm0t|_4P3y6=;Bi!", true, class0);
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(mapType0, (JsonDeserializer<Object>) null, asExternalTypeDeserializer0, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, (Boolean) null);
      Boolean boolean0 = new Boolean(true);
      CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved((JsonDeserializer<?>) null, (JsonDeserializer<?>) null, asExternalTypeDeserializer0, boolean0);
      assertNotSame(collectionDeserializer1, collectionDeserializer0);
      assertFalse(collectionDeserializer1.isCachable());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(mapType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
      boolean boolean0 = collectionDeserializer0.isCachable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "");
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) mapType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Boolean boolean0 = Boolean.TRUE;
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(mapType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, (ValueInstantiator) null, (JsonDeserializer<Object>) null, boolean0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        collectionDeserializer0.createContextual(defaultDeserializationContext_Impl0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(mapType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, (Boolean) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        collectionDeserializer0.createContextual(defaultDeserializationContext_Impl0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, (-649));
      Boolean boolean0 = Boolean.valueOf("T{-G<;=:)86+*no");
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, fromStringDeserializer_Std0, (TypeDeserializer) null, (ValueInstantiator) null, fromStringDeserializer_Std0, boolean0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-3), 12);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(mapType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      try { 
        collectionDeserializer0.deserialize((JsonParser) filteringParserDelegate0, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not instantiate value of type com.fasterxml.jackson.core.JsonLocation; no default creator found
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(mapType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        collectionDeserializer0.deserialize((JsonParser) filteringParserDelegate0, (DeserializationContext) defaultDeserializationContext_Impl0, (Collection<Object>) stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Boolean boolean0 = Boolean.TRUE;
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(mapType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, boolean0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      try { 
        collectionDeserializer0.deserialize((JsonParser) filteringParserDelegate0, (DeserializationContext) defaultDeserializationContext_Impl0, (Collection<Object>) linkedHashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.lang.NullPointerException) (through reference chain: java.lang.Object[0])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator", false, class0);
      Boolean boolean0 = new Boolean(false);
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(mapType0, (JsonDeserializer<Object>) null, asExternalTypeDeserializer0, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, boolean0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      // Undeclared exception!
      try { 
        collectionDeserializer0.handleNonArray((JsonParser) null, defaultDeserializationContext_Impl0, priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator", false, class0);
      Boolean boolean0 = Boolean.TRUE;
      CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(mapType0, (JsonDeserializer<Object>) null, asExternalTypeDeserializer0, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, boolean0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      try { 
        collectionDeserializer0.deserialize((JsonParser) filteringParserDelegate0, (DeserializationContext) defaultDeserializationContext_Impl0, (Collection<Object>) linkedHashSet0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.lang.NullPointerException) (through reference chain: java.lang.Object[0])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<ObjectIdReferenceProperty> class0 = ObjectIdReferenceProperty.class;
      CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, (Collection<Object>) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, true);
      JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, "", jsonLocation0, (ReadableObjectId) null);
      collectionDeserializer_CollectionReferringAccumulator0.handleUnresolvedReference(unresolvedForwardReference0);
      collectionDeserializer_CollectionReferringAccumulator0.add(class0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, arrayList0);
      collectionDeserializer_CollectionReferringAccumulator0.add("L`l}taX4K3H");
      assertTrue(arrayList0.contains("L`l}taX4K3H"));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      CollectionDeserializer.CollectionReferringAccumulator collectionDeserializer_CollectionReferringAccumulator0 = new CollectionDeserializer.CollectionReferringAccumulator(class0, arrayList0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleObjectIdResolver0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      byte[] byteArray0 = new byte[6];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, dataInputStream0, objectMapper0, (ByteQuadsCanonicalizer) null, byteArray0, 1, (-1), false);
      JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getTokenLocation();
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, objectMapper0);
      ReadableObjectId readableObjectId0 = new ReadableObjectId(objectIdGenerator_IdKey0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(uTF8StreamJsonParser0, "B:,jYfyO[sm/p", jsonLocation0, readableObjectId0);
      collectionDeserializer_CollectionReferringAccumulator0.handleUnresolvedReference(unresolvedForwardReference0);
      Class<Object> class1 = Object.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class1, 0);
      // Undeclared exception!
      try { 
        collectionDeserializer_CollectionReferringAccumulator0.resolveForwardReference(objectIdGenerators_IntSequenceGenerator0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to resolve a forward reference with id [com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator@1f] that wasn't previously seen as unresolved.
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator", e);
      }
  }
}
