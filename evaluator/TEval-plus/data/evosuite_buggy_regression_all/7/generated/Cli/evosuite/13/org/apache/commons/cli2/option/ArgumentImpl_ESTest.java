/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 17:45:15 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import org.apache.commons.cli2.DisplaySetting;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.FileValidator;
import org.apache.commons.cli2.validation.NumberValidator;
import org.apache.commons.cli2.validation.UrlValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArgumentImpl_ESTest extends ArgumentImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
      LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("`bx*B", "`bx*B", (-2606), 9935, 'w', 'w', dateValidator0, "`bx*B", linkedList0, (-2606));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      argumentImpl0.defaults(writeableCommandLineImpl0);
      assertEquals('w', argumentImpl0.getSubsequentSeparator());
      assertEquals("`bx*B", argumentImpl0.getDescription());
      assertEquals("`bx*B", argumentImpl0.getConsumeRemaining());
      assertEquals((-2606), argumentImpl0.getMinimum());
      assertEquals('w', argumentImpl0.getInitialSeparator());
      assertEquals("`bx*B", argumentImpl0.getPreferredName());
      assertEquals(9935, argumentImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("/k]Rh|", "", 32, 32, '2', 'f', numberValidator0, " ...", linkedList0, 32);
      char char0 = argumentImpl0.getInitialSeparator();
      assertEquals('2', char0);
      assertEquals("/k]Rh|", argumentImpl0.getPreferredName());
      assertEquals(32, argumentImpl0.getMaximum());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals(" ...", argumentImpl0.getConsumeRemaining());
      assertEquals('f', argumentImpl0.getSubsequentSeparator());
      assertEquals(32, argumentImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileValidator fileValidator0 = new FileValidator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("M0e=vd=oDm<'", "M0e=vd=oDm<'", 3731, 3731, 'm', 'm', fileValidator0, "M0e=vd=oDm<'", linkedList0, 2271);
      argumentImpl0.getDefaultValues();
      assertEquals("M0e=vd=oDm<'", argumentImpl0.getConsumeRemaining());
      assertEquals("M0e=vd=oDm<'", argumentImpl0.getDescription());
      assertEquals('m', argumentImpl0.getInitialSeparator());
      assertEquals('m', argumentImpl0.getSubsequentSeparator());
      assertEquals(3731, argumentImpl0.getMinimum());
      assertEquals("M0e=vd=oDm<'", argumentImpl0.getPreferredName());
      assertEquals(3731, argumentImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl((String) null, (String) null, (-934), (-934), 'p', 'p', fileValidator0, "CNE7rZy6=&*CFw", linkedList0, (-934));
      boolean boolean0 = argumentImpl0.canProcess((WriteableCommandLine) null, (String) null);
      assertEquals('p', argumentImpl0.getSubsequentSeparator());
      assertEquals((-934), argumentImpl0.getMaximum());
      assertEquals((-934), argumentImpl0.getMinimum());
      assertTrue(boolean0);
      assertEquals('p', argumentImpl0.getInitialSeparator());
      assertEquals("CNE7rZy6=&*CFw", argumentImpl0.getConsumeRemaining());
      assertEquals("arg", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("/k]Rh|", "", 32, 32, '2', 'f', numberValidator0, " ...", linkedList0, 32);
      assertEquals(32, argumentImpl0.getMaximum());
      assertEquals(32, argumentImpl0.getMinimum());
      
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      char char0 = sourceDestArgument0.getSubsequentSeparator();
      assertEquals("/k]Rh|", argumentImpl0.getPreferredName());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals('2', argumentImpl0.getInitialSeparator());
      assertEquals(64, sourceDestArgument0.getMaximum());
      assertEquals(" ...", argumentImpl0.getConsumeRemaining());
      assertEquals(64, sourceDestArgument0.getMinimum());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("\"jlLn-SboI6/", "|bx&B", (-2571), 9962, 'A', 'A', dateValidator0, "\"jlLn-SboI6/", linkedList0, (-2571));
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      argumentImpl0.helpLines(9962, linkedHashSet0, (Comparator) null);
      assertEquals(9962, argumentImpl0.getMaximum());
      assertEquals('A', argumentImpl0.getInitialSeparator());
      assertEquals("\"jlLn-SboI6/", argumentImpl0.getPreferredName());
      assertEquals((-2571), argumentImpl0.getMinimum());
      assertEquals("\"jlLn-SboI6/", argumentImpl0.getConsumeRemaining());
      assertEquals('A', argumentImpl0.getSubsequentSeparator());
      assertEquals("|bx&B", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileValidator fileValidator0 = new FileValidator();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("M0e=vd=oDm<'", "M0e=vd=oDm<'", 3731, 3731, 'm', 'm', fileValidator0, "M0e=vd=oDm<'", linkedList0, 2271);
      String string0 = argumentImpl0.getConsumeRemaining();
      assertEquals('m', argumentImpl0.getSubsequentSeparator());
      assertEquals("M0e=vd=oDm<'", string0);
      assertEquals(3731, argumentImpl0.getMaximum());
      assertEquals(3731, argumentImpl0.getMinimum());
      assertEquals("M0e=vd=oDm<'", argumentImpl0.getPreferredName());
      assertEquals("M0e=vd=oDm<'", argumentImpl0.getDescription());
      assertEquals('m', argumentImpl0.getInitialSeparator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("\"jlLn-SboI6/", "|bx&B", (-2571), 9962, 'A', 'A', dateValidator0, "\"jlLn-SboI6/", linkedList0, (-2571));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      argumentImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals("\"jlLn-SboI6/", argumentImpl0.getConsumeRemaining());
      assertEquals(9962, argumentImpl0.getMaximum());
      assertEquals('A', argumentImpl0.getSubsequentSeparator());
      assertEquals('A', argumentImpl0.getInitialSeparator());
      assertEquals("\"jlLn-SboI6/", argumentImpl0.getPreferredName());
      assertFalse(argumentImpl0.isRequired());
      assertEquals("|bx&B", argumentImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Oq|>^AX%g*qk>w:", (String) null, 0, 0, 'y', 'y', fileValidator0, (String) null, (List) null, 0);
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      sourceDestArgument0.getValidator();
      assertEquals('y', argumentImpl0.getSubsequentSeparator());
      assertEquals("--", sourceDestArgument0.getConsumeRemaining());
      assertEquals('y', argumentImpl0.getInitialSeparator());
      assertEquals("Oq|>^AX%g*qk>w:", argumentImpl0.getPreferredName());
      assertEquals("SourceDestArgument", sourceDestArgument0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("", "", 1732, 62, '\"', '\"', numberValidator0, (String) null, linkedList0, 1732);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum number of values must not exceed maximum number
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("Nk`3vuW{Z", "Nk`3vuW{Z", 60, 60, 'n', 'n', numberValidator0, "QGS", linkedList0, (-4251));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not enough default values.
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      ArgumentImpl argumentImpl0 = null;
      try {
        argumentImpl0 = new ArgumentImpl("--", "--", (-3399), (-3399), '\u0000', 'i', dateValidator0, "Nk`3vuW{Z", linkedList0, 3051);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Too many default values.
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.option.ArgumentImpl", "\"[n\u0006I^[r_mq", 1, 3656, 'o', 'o', dateValidator0, "\"org.apache.commons.cli2.option.ArgumentImpl", linkedList0, 'o');
      assertEquals('o', argumentImpl0.getSubsequentSeparator());
      assertEquals("\"org.apache.commons.cli2.option.ArgumentImpl", argumentImpl0.getConsumeRemaining());
      assertEquals(3656, argumentImpl0.getMaximum());
      assertEquals("org.apache.commons.cli2.option.ArgumentImpl", argumentImpl0.getPreferredName());
      assertEquals("\"[n\u0006I^[r_mq", argumentImpl0.getDescription());
      assertEquals('o', argumentImpl0.getInitialSeparator());
      assertEquals(1, argumentImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.Aption.ArgumentImpl", "org.apache.commons.cli2.Aption.ArgumentImpl", (-1620), 3, '@', 'P', dateValidator0, "org.apache.commons.cli2.Aption.ArgumentImpl", linkedList0, (-2555));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.addLast("'");
      linkedList1.add("--");
      linkedList1.addLast("QW+~@V2))3,");
      linkedList1.add("[\u0004x`~=`YrP#W%A-");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      argumentImpl0.processValues(writeableCommandLineImpl0, listIterator0, (Option) null);
      argumentImpl0.processValues(writeableCommandLineImpl0, listIterator0, (Option) null);
      // Undeclared exception!
      try { 
        argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0, (Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.OptionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.Aption.ArgumentImpl", "org.apache.commons.cli2.Aption.ArgumentImpl", (-1620), 3, '@', 'P', dateValidator0, "org.apache.commons.cli2.Aption.ArgumentImpl", linkedList0, (-2555));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("org.apache.commons.cli2.Aption.ArgumentImpl");
      linkedList1.add("--");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      argumentImpl0.processValues(writeableCommandLineImpl0, listIterator0, (Option) null);
      assertFalse(listIterator0.hasNext());
      assertEquals('@', argumentImpl0.getInitialSeparator());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.Aption.ArgumentImpl", "org.apache.commons.cli2.Aption.ArgumentImpl", (-1620), 3, '@', 'P', dateValidator0, "org.apache.commons.cli2.Aption.ArgumentImpl", linkedList0, (-2555));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.addLast("'");
      linkedList1.add("org.apache.commons.cli2.Aption.ArgumentImpl");
      linkedList1.add("--");
      linkedList1.addLast("QW+~@V2))3,");
      linkedList1.add("[\u0004x`~=`YrP#W%A-");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      argumentImpl0.processValues(writeableCommandLineImpl0, listIterator0, (Option) null);
      assertTrue(listIterator0.hasPrevious());
      assertEquals("org.apache.commons.cli2.Aption.ArgumentImpl", argumentImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Nk`3vuW{Z", "QGS", 60, 60, 'n', 'n', numberValidator0, "Nk`3vuW{Z", linkedList0, 60);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.addLast(",_Z.F1UA,-!F}{7N");
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList1);
      sourceDestArgument0.processValues(writeableCommandLineImpl0, listIterator0, argumentImpl0);
      assertTrue(listIterator0.hasPrevious());
      assertEquals('n', argumentImpl0.getInitialSeparator());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.Aption.ArgumentImpl", "org.apache.commons.cli2.Aption.ArgumentImpl", (-1620), 3, '@', 'P', dateValidator0, "org.apache.commons.cli2.Aption.ArgumentImpl", linkedList0, (-2555));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      assertEquals(3, argumentImpl0.getMaximum());
      
      argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0, (Option) argumentImpl0);
      assertEquals((-1620), argumentImpl0.getMinimum());
      assertEquals('@', argumentImpl0.getInitialSeparator());
      assertEquals('P', argumentImpl0.getSubsequentSeparator());
      assertEquals("org.apache.commons.cli2.Aption.ArgumentImpl", argumentImpl0.getPreferredName());
      assertEquals("org.apache.commons.cli2.Aption.ArgumentImpl", argumentImpl0.getDescription());
      assertEquals("org.apache.commons.cli2.Aption.ArgumentImpl", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("\"jlLn-SboI6/", "|bx&B", (-2571), 9962, 'A', 'A', dateValidator0, "\"jlLn-SboI6/", linkedList0, (-2571));
      argumentImpl0.toString();
      assertEquals('A', argumentImpl0.getSubsequentSeparator());
      assertEquals('A', argumentImpl0.getInitialSeparator());
      assertEquals("\"jlLn-SboI6/", argumentImpl0.getPreferredName());
      assertEquals("|bx&B", argumentImpl0.getDescription());
      assertEquals("\"jlLn-SboI6/", argumentImpl0.getConsumeRemaining());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UrlValidator urlValidator0 = new UrlValidator();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Argument.missing.values", "org.apache.commons.cli2.option.GroupImpl", 1, 1, 'P', '2', urlValidator0, "", linkedList0, (-562));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      try { 
        argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value(s) Argument.missing.values
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "|RzK&JsSLA~", 254, Integer.MAX_VALUE, '-', '=', numberValidator0, "", linkedList0, 9963);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
      try { 
        argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value(s)   ...
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.option.ArgumentImpl", "org.apache.commons.cli2.option.ArgumentImpl", (-1620), 3, '@', 'P', dateValidator0, "org.apache.commons.cli2.option.ArgumentImpl", linkedList0, (-2555));
      LinkedList<DisplaySetting> linkedList1 = new LinkedList<DisplaySetting>();
      ArgumentImpl argumentImpl1 = new ArgumentImpl("J6d", "\"Unexpected.token", (-2097618347), 3, '\u0000', 'P', dateValidator0, "{F`Ocq!nY%AZ", linkedList1, (-2555));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl1, linkedList0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.addLast("org.apache.commons.cli2.option.ArgumentImpl");
      linkedList2.add("org.apache.commons.cli2.option.ArgumentImpl");
      linkedList2.addLast("a#':j7Snh|]}S)P3N;");
      ListIterator<String> listIterator0 = linkedList2.listIterator();
      try { 
        argumentImpl1.processValues(writeableCommandLineImpl0, listIterator0, argumentImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected value \"3N;\" found while processing  org.apache.commons.cli2.option.ArgumentImpl [org.apache.commons.cli2.option.ArgumentImpl [org.apache.commons.cli2.option.ArgumentImpl]]
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("", "", 60, 62, 'n', '6', dateValidator0, "/", linkedList0, 80);
      String string0 = argumentImpl0.stripBoundaryQuotes("\"Argument.too.many.defaults");
      assertEquals("", argumentImpl0.getPreferredName());
      assertEquals("/", argumentImpl0.getConsumeRemaining());
      assertEquals("", argumentImpl0.getDescription());
      assertEquals('6', argumentImpl0.getSubsequentSeparator());
      assertEquals("\"Argument.too.many.defaults", string0);
      assertEquals('n', argumentImpl0.getInitialSeparator());
      assertEquals(60, argumentImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.option.Switch", "DISPLAY_PARENT_ARGUMENT", 3906, 3906, 'o', 'o', dateValidator0, "\"", linkedList0, 3906);
      // Undeclared exception!
      try { 
        argumentImpl0.stripBoundaryQuotes("\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateValidator dateValidator0 = DateValidator.getTimeInstance();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("org.apache.commons.cli2.option.ArgumentImpl", "org.apache.commons.cli2.option.ArgumentImpl", (-1620), 3, '@', 'P', dateValidator0, "org.apache.commons.cli2.option.ArgumentImpl", linkedList0, (-2555));
      boolean boolean0 = argumentImpl0.isRequired();
      assertEquals("org.apache.commons.cli2.option.ArgumentImpl", argumentImpl0.getConsumeRemaining());
      assertEquals("org.apache.commons.cli2.option.ArgumentImpl", argumentImpl0.getDescription());
      assertEquals('P', argumentImpl0.getSubsequentSeparator());
      assertFalse(boolean0);
      assertEquals('@', argumentImpl0.getInitialSeparator());
      assertEquals("org.apache.commons.cli2.option.ArgumentImpl", argumentImpl0.getPreferredName());
      assertEquals((-1620), argumentImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NumberValidator numberValidator0 = NumberValidator.getCurrencyInstance();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("Ok(3vu;HW{Z", "QGS", 60, 60, 'u', 'u', numberValidator0, "Ok(3vu;HW{Z", linkedList0, 60);
      boolean boolean0 = argumentImpl0.isRequired();
      assertEquals("Ok(3vu;HW{Z", argumentImpl0.getConsumeRemaining());
      assertEquals('u', argumentImpl0.getInitialSeparator());
      assertTrue(boolean0);
      assertEquals('u', argumentImpl0.getSubsequentSeparator());
      assertEquals("QGS", argumentImpl0.getDescription());
      assertEquals("Ok(3vu;HW{Z", argumentImpl0.getPreferredName());
  }
}
