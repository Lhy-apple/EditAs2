/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 17:45:17 GMT 2023
 */

package org.apache.commons.cli2.option;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;
import org.apache.commons.cli2.DisplaySetting;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.WriteableCommandLine;
import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
import org.apache.commons.cli2.option.ArgumentImpl;
import org.apache.commons.cli2.option.Command;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.option.GroupImpl;
import org.apache.commons.cli2.option.PropertyOption;
import org.apache.commons.cli2.option.SourceDestArgument;
import org.apache.commons.cli2.validation.DateValidator;
import org.apache.commons.cli2.validation.FileValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GroupImpl_ESTest extends GroupImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "gJ.g2TLM{<h9]~r'{v", "gJ.g2TLM{<h9]~r'{v", 0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      writeableCommandLineImpl0.getProperties((Option) groupImpl0);
      assertEquals(0, groupImpl0.getMinimum());
      assertEquals(0, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "s", "s", 916, 916);
      groupImpl0.getAnonymous();
      assertEquals(916, groupImpl0.getMinimum());
      assertEquals(916, groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "\"Ixb", "\"Ixb", 92, 1);
      linkedList0.add(groupImpl0);
      // Undeclared exception!
      try { 
        groupImpl0.validate((WriteableCommandLine) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "A ::szWcS", "Missing.option", 2237, 0);
      int int0 = groupImpl0.getMaximum();
      assertEquals(0, int0);
      assertEquals("A ::szWcS", groupImpl0.getPreferredName());
      assertEquals(2237, groupImpl0.getMinimum());
      assertEquals("Missing.option", groupImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", 49, 49);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D (-D<property>=<value>)");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("oblAnE>^3!7@q", "BpH+}<&f|Z=x{{DS8lk", 61, 944, '1', '.', dateValidator0, "BpH+}<&f|Z=x{{DS8lk", linkedList0, Integer.MAX_VALUE);
      linkedList0.add(argumentImpl0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "&w?|EYa{}!iB", "&w?|EYa{}!iB", 0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "");
      assertFalse(linkedList0.contains(argumentImpl0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 34, (-2543));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
      assertFalse(boolean0);
      assertEquals(34, groupImpl0.getMinimum());
      assertEquals((-2543), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "-D", (-2480), (-2480));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add(propertyOption0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", (-1183), (-1183));
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "Passes properties and values to the application");
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", 21, 21);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, "-D");
      assertEquals(21, groupImpl0.getMinimum());
      assertEquals(21, groupImpl0.getMaximum());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", (-2412), (-2412));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      LinkedList<Command> linkedList1 = new LinkedList<Command>();
      ListIterator<Command> listIterator0 = linkedList1.listIterator();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals((-2412), groupImpl0.getMinimum());
      assertEquals((-2412), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", 49, 49);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn("-D (-D<property>=<value>)").when(listIterator0).next();
      doReturn(linkedList0).when(listIterator0).previous();
      groupImpl0.process(writeableCommandLineImpl0, listIterator0);
      assertEquals("Passes properties and values to the application", groupImpl0.getDescription());
      assertEquals(49, groupImpl0.getMaximum());
      assertEquals(49, groupImpl0.getMinimum());
      assertEquals("-D", groupImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", 49, 49);
      groupImpl0.toString();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn("-D (-D<property>=<value>)", (Object) null).when(listIterator0).next();
      doReturn(linkedList0).when(listIterator0).previous();
      try { 
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected {0} while processing 
         //
         verifyException("org.apache.commons.cli2.option.PropertyOption", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", 47, 47);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn("-D", (Object) null).when(listIterator0).next();
      doReturn(linkedList0).when(listIterator0).previous();
      try { 
        groupImpl0.process(writeableCommandLineImpl0, listIterator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected {0} while processing 
         //
         verifyException("org.apache.commons.cli2.option.PropertyOption", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", 49, 49);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      doReturn("-D (-D<property>=<value>)").when(listIterator0).next();
      doReturn(linkedList0).when(listIterator0).previous();
      GroupImpl groupImpl1 = new GroupImpl(linkedList1, ":y", "1]H=CUH]F';", 49, 93);
      groupImpl1.process(writeableCommandLineImpl0, listIterator0);
      assertEquals(1, linkedList0.size());
      assertEquals(49, groupImpl1.getMinimum());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", 49, 49);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList1);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing option -D
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", 124, 124);
      writeableCommandLineImpl0.addSwitch(propertyOption0, true);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing option Passes properties and values to the application
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", (-1311), (-1311));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      writeableCommandLineImpl0.addSwitch(propertyOption0, true);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected -D while processing Passes properties and values to the application
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "-D", (-2480), (-2480));
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      groupImpl0.validate(writeableCommandLineImpl0);
      assertEquals("-D", groupImpl0.getDescription());
      assertEquals((-2480), groupImpl0.getMinimum());
      assertEquals("Passes properties and values to the application", groupImpl0.getPreferredName());
      assertEquals((-2480), groupImpl0.getMaximum());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("-C'D", "-C'D", 93, 93, 'I', 'I', fileValidator0, "-C'D", linkedList0, 93);
      linkedList0.add(argumentImpl0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "&w?|EYa{}!iB", "&w?|EYa{}!iB", 0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing value(s) -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D -C'D
         //
         verifyException("org.apache.commons.cli2.option.ArgumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "LD", "LD", 0, 0);
      LinkedHashSet<DefaultOption> linkedHashSet0 = new LinkedHashSet<DefaultOption>();
      // Undeclared exception!
      try { 
        groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) null, "[LD ()]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, "&w?|EYa{}!iB", 893, 893);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      try { 
        groupImpl0.validate(writeableCommandLineImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing option 
         //
         verifyException("org.apache.commons.cli2.option.GroupImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 0, (-2650));
      LinkedHashSet<ArgumentImpl> linkedHashSet0 = new LinkedHashSet<ArgumentImpl>();
      Comparator<SourceDestArgument> comparator0 = (Comparator<SourceDestArgument>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
      assertEquals((-2650), groupImpl0.getMaximum());
      assertEquals(0, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add(propertyOption0);
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "-D", 85, 85);
      String string0 = groupImpl0.toString();
      assertEquals(2, linkedList0.size());
      assertEquals("-D (-D<property>=<value>|-D<property>=<value>)", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("-C'D", "-C'D", 93, 93, 'I', 'I', fileValidator0, "-C'D", linkedList0, 93);
      linkedList0.add(argumentImpl0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "&w?|EYa{}!iB", "&w?|EYa{}!iB", 0, 0);
      String string0 = groupImpl0.toString();
      assertFalse(linkedList0.contains(argumentImpl0));
      assertEquals("[&w?|EYa{}!iB ()] <-C'D1> <-C'D2> <-C'D3> <-C'D4> <-C'D5> <-C'D6> <-C'D7> <-C'D8> <-C'D9> <-C'D10> <-C'D11> <-C'D12> <-C'D13> <-C'D14> <-C'D15> <-C'D16> <-C'D17> <-C'D18> <-C'D19> <-C'D20> <-C'D21> <-C'D22> <-C'D23> <-C'D24> <-C'D25> <-C'D26> <-C'D27> <-C'D28> <-C'D29> <-C'D30> <-C'D31> <-C'D32> <-C'D33> <-C'D34> <-C'D35> <-C'D36> <-C'D37> <-C'D38> <-C'D39> <-C'D40> <-C'D41> <-C'D42> <-C'D43> <-C'D44> <-C'D45> <-C'D46> <-C'D47> <-C'D48> <-C'D49> <-C'D50> <-C'D51> <-C'D52> <-C'D53> <-C'D54> <-C'D55> <-C'D56> <-C'D57> <-C'D58> <-C'D59> <-C'D60> <-C'D61> <-C'D62> <-C'D63> <-C'D64> <-C'D65> <-C'D66> <-C'D67> <-C'D68> <-C'D69> <-C'D70> <-C'D71> <-C'D72> <-C'D73> <-C'D74> <-C'D75> <-C'D76> <-C'D77> <-C'D78> <-C'D79> <-C'D80> <-C'D81> <-C'D82> <-C'D83> <-C'D84> <-C'D85> <-C'D86> <-C'D87> <-C'D88> <-C'D89> <-C'D90> <-C'D91> <-C'D92> <-C'D93>", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "-D", "Passes properties and values to the application", 49, 49);
      LinkedHashSet<ArgumentImpl> linkedHashSet0 = new LinkedHashSet<ArgumentImpl>();
      Comparator<ArgumentImpl> comparator0 = (Comparator<ArgumentImpl>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List list0 = groupImpl0.helpLines(0, linkedHashSet0, comparator0);
      assertEquals(49, groupImpl0.getMinimum());
      assertEquals("-D", groupImpl0.getPreferredName());
      assertEquals(49, groupImpl0.getMaximum());
      assertEquals(0, list0.size());
      assertEquals("Passes properties and values to the application", groupImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "wD<k'~.\"", "wD<k'~.\"", (-425), (-425));
      List list0 = groupImpl0.helpLines((-918), displaySetting0.ALL, (Comparator) null);
      assertEquals((-425), groupImpl0.getMaximum());
      assertEquals((-425), groupImpl0.getMinimum());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "", "", 16, 16);
      Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List list0 = groupImpl0.helpLines(16, displaySetting0.ALL, comparator0);
      assertEquals(1, linkedList0.size());
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", 21, 21);
      linkedList0.addLast(propertyOption0);
      Option option0 = groupImpl0.findOption("-D");
      assertEquals(21, groupImpl0.getMaximum());
      assertEquals(21, groupImpl0.getMinimum());
      assertNotNull(option0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = new PropertyOption();
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "w;?|E~iS!iB", "X4c9", 41, 41);
      groupImpl0.findOption("w;?|E~iS!iB");
      assertEquals(1, linkedList0.size());
      assertEquals(41, groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "Passes properties and values to the application", (-1183), (-1183));
      boolean boolean0 = groupImpl0.isRequired();
      assertEquals((-1183), groupImpl0.getMaximum());
      assertFalse(boolean0);
      assertEquals((-1183), groupImpl0.getMinimum());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      linkedList0.add(propertyOption0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "Passes properties and values to the application", "-D", (-295), 2112);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      groupImpl0.defaults(writeableCommandLineImpl0);
      assertEquals(1, linkedList0.size());
      assertEquals("Passes properties and values to the application", groupImpl0.getPreferredName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<ArgumentImpl> linkedList0 = new LinkedList<ArgumentImpl>();
      DateValidator dateValidator0 = DateValidator.getDateInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl("oblAnE>^3!7@q", "BpH+}<&f|Z=x{{DS8lk", 61, 944, '1', '.', dateValidator0, "BpH+}<&f|Z=x{{DS8lk", linkedList0, Integer.MAX_VALUE);
      linkedList0.add(argumentImpl0);
      GroupImpl groupImpl0 = new GroupImpl(linkedList0, "&w?|EYa{}!iB", "&w?|EYa{}!iB", 0, 0);
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
      groupImpl0.defaults(writeableCommandLineImpl0);
      assertFalse(linkedList0.contains(argumentImpl0));
      assertEquals(0, groupImpl0.getMinimum());
  }
}
