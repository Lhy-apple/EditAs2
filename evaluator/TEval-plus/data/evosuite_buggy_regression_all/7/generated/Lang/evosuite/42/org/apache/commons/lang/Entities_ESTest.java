/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:42:58 GMT 2023
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Entities_ESTest extends Entities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Entities entities0 = new Entities();
      String string0 = entities0.HTML40.entityName(794);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      String string0 = entities0.unescape("V&gt;6z aBxP&quot;p[*");
      assertEquals("V>6z aBxP\"p[*", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      String string0 = entities0.escape("V>6z aBxP\"p[*");
      assertEquals("V&gt;6z aBxP&quot;p[*", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      Entities.fillWithHtml40Entities(entities0);
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities0.HTML40.map = (Entities.EntityMap) entities_BinaryEntityMap0;
      Entities.fillWithHtml40Entities(entities0);
      String string0 = entities0.unescape("8\"B&!{+YD:p;<[");
      assertEquals("8\"B&!{+YD:p;<[", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities_BinaryEntityMap0.add(" L-(p&k!w+Na^R#", (-814));
      entities_BinaryEntityMap0.add(" L-(p&k!w+Na^R#", (-835));
      entities_BinaryEntityMap0.add((String) null, (-814));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      entities_TreeEntityMap0.add("permil", 72);
      int int0 = entities_TreeEntityMap0.value("permil");
      assertEquals(72, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      String string0 = entities_TreeEntityMap0.name(241);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      int int0 = entities_TreeEntityMap0.value("w6[ry86bG=VkC=");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      entities0.HTML40.map = (Entities.EntityMap) entities_ArrayEntityMap0;
      Entities.fillWithHtml40Entities(entities0);
      StringWriter stringWriter0 = new StringWriter();
      entities0.escape((Writer) stringWriter0, "wvq<@+?b^!=5I4,H");
      assertEquals("wvq&lt;@+?b^!=5I4,H", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(1599);
      entities_BinaryEntityMap0.add("", 3933);
      int int0 = entities_BinaryEntityMap0.value("");
      assertEquals(3933, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      entities0.HTML40.map = (Entities.EntityMap) entities_BinaryEntityMap0;
      Entities.fillWithHtml40Entities(entities0);
      String string0 = entities0.escape("8\"B&!{+YD:p;<[");
      assertEquals("8&quot;B&amp;!{+YD:p;&lt;[", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      String string0 = entities0.unescape("wvq<@+?b^!=5I4,H");
      assertEquals("wvq<@+?b^!=5I4,H", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      StringWriter stringWriter0 = new StringWriter();
      entities0.unescape((Writer) stringWriter0, "zjEgttQJf&<BW'o$");
      assertEquals("zjEgttQJf&<BW'o$", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      // Undeclared exception!
      try { 
        entities0.unescape((Writer) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      String string0 = entities0.unescape("QP2~[y&z&;,M`5}P");
      assertEquals("QP2~[y&z&;,M`5}P", string0);
  }
}
