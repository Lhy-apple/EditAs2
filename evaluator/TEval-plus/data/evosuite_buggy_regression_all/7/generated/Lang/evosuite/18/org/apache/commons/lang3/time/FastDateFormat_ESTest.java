/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:39:23 GMT 2023
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.FieldPosition;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateFormat_ESTest extends FastDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "qk", 2, 2, 2, 2, 2, 2, 2, 2, 2);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 0, (TimeZone) simpleTimeZone0);
      Calendar calendar0 = MockCalendar.getInstance();
      fastDateFormat0.applyRules(calendar0, stringBuffer0);
      assertEquals(33, stringBuffer0.length());
      assertEquals("Feb 14, 2014 8:21:21 PM GMT+00:00", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "q`", 2, 2, 2, 2, 2, 2, 2, 2, 2);
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat0 = new FastDateFormat("w)EZM(k", simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.format((long) 2);
      assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("1)Do+00001(24", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.getPattern();
      assertEquals("M/d/yy h:mm a", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance((-2019), (TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2019
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      try { 
        fastDateFormat0.parseObject("org.apache.commons.lang3.time.FastDateFormat$TwentyFourHourField");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
         verifyException("java.text.Format", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.getLocale();
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(7, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 7
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.toString();
      assertEquals("FastDateFormat[M/d/yy h:mm a]", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Long long0 = Long.valueOf((long) 2);
      String string0 = fastDateFormat0.format((Object) long0);
      assertEquals("1/1/70 12:00 AM", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 0, 0, 3, 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition(1);
      fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
      assertEquals(26, stringBuffer0.length());
      assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateTimeInstance(106, 106, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 106
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.getTimeZone();
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.hashCode();
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "q`", 2, 2, 2, 2, 2, 2, 2, 2, 2);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, (TimeZone) simpleTimeZone0);
      assertEquals("MMM d, yyyy", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(7, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 7
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        FastDateFormat.getDateInstance(7, (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 7
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("hZEG]'SZ");
      Calendar calendar0 = MockCalendar.getInstance();
      String string0 = fastDateFormat0.format(calendar0);
      assertEquals("8+0000FriAD]SZ", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FastDateFormat.getInstance("Fq(UXm\"k-9|z-", (TimeZone) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(2, (TimeZone) null, locale0);
      assertEquals("H:mm:ss", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FastDateFormat.getInstance("2AM]@##jjo2}");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FastDateFormat.getInstance("\"5MBZK)+bwI?)xP");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FastDateFormat.getInstance("CwXYIU@C!UN3GW?");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FastDateFormat.getInstance("1)Do+00001(\u0014");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FastDateFormat.getInstance("s,hGL}Hp~K0|78%;'i5");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FastDateFormat.getInstance("IcBoT");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FastDateFormat.getInstance("H#>28SJI");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("K0&\"2w\"-z\"");
      assertEquals(0, FastDateFormat.FULL);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FastDateFormat.getInstance("No date time pattern for locale: ");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FastDateFormat.getInstance("GM8<O&P]");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FastDateFormat.getInstance("PpOv");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FastDateFormat.getInstance("}&QhIQzRwihbu[.m");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FastDateFormat.getInstance("DRk]:&1uj39OaJm");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FastDateFormat.getInstance("'vFwSVr(`~'T3Z!d{");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FastDateFormat.getInstance("d((_-wU");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FastDateFormat.getInstance("^]V@&58<4/(;iza2k=");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FastDateFormat.getInstance("W}rJS(oN;lP_/!r3Y?");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FastDateFormat.getInstance("X{");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FastDateFormat.getInstance("Y X\"p>C8iUCQ6");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FastDateFormat.getInstance("EEEE bMMM , yyyyh:vms a z");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FastDateFormat.getInstance("cv\";X8CccdZx");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FastDateFormat.getInstance("^e_O-HEfWZU1<~P*7yi");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FastDateFormat.getInstance("EEEE, MMMM d, yyyy hfmm:ss a z");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FastDateFormat.getInstance("g@_.j)8");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FastDateFormat.getInstance("]9ioz");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FastDateFormat.getInstance("j:]-)Z");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FastDateFormat.getInstance("sl~$o6&JH7u/p++l");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FastDateFormat.getInstance("-3:nKX6rkz`U(=");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FastDateFormat.getInstance("^p%v<+w*[lp0%u");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FastDateFormat.getInstance("#?t1Wv.*<t),ce");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FastDateFormat.getInstance("EE MMuM , yyyyh:3m5 a");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FastDateFormat.getInstance("_/vc#Fr");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FastDateFormat.getInstance("1<k7Mx70+S Jw");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate(1, (-550), (-4014), (-4014), 0, 0);
      String string0 = fastDateFormat0.format((Object) mockDate0);
      assertEquals("9/17/43 6:00 PM", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        fastDateFormat0.format(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("HH' h 'mz");
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      MockDate mockDate0 = new MockDate(1);
      boolean boolean0 = fastDateFormat0.equals(mockDate0);
      assertFalse(boolean0);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 0);
      fastDateFormat1.equals(fastDateFormat0);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("MMM d, yyyy h:mm:ss a z", fastDateFormat1.getPattern());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("HH' h 'mm z", locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "HH' h 'mm z");
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("HH' h 'mm z", (TimeZone) simpleTimeZone0, locale0);
      fastDateFormat0.equals(fastDateFormat1);
      assertEquals(17, fastDateFormat1.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("HH' h 'mz");
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance("HH' h 'mz", locale0);
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-19), "hhG:F-SZ");
      Locale locale0 = Locale.CANADA;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("hhG:F-SZ", (TimeZone) simpleTimeZone0, locale0);
      String string0 = fastDateFormat0.format((long) (-19));
      assertEquals("11AD:5-962-0000", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.format((-2L));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("Hy MMayyyyh34s@  z");
      MockDate mockDate0 = new MockDate((-2676), 1965, 0);
      fastDateFormat0.format((Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(826, "?k");
      FastDateFormat fastDateFormat0 = new FastDateFormat("?k", simpleTimeZone0, locale0);
      fastDateFormat0.format((-1293L));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "qk", 2, 2, 2, 2, 2, 2, 2, 2, 2);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 0, (TimeZone) simpleTimeZone0);
      fastDateFormat0.format((long) 196);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("ZZ@");
      fastDateFormat0.format(3090L);
  }
}
