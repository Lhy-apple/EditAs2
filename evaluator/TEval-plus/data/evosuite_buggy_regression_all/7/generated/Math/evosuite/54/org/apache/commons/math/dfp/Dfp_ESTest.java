/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:56:40 GMT 2023
 */

package org.apache.commons.math.dfp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.dfp.Dfp;
import org.apache.commons.math.dfp.DfpField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Dfp_ESTest extends Dfp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Dfp dfp0 = null;
      try {
        dfp0 = new Dfp((DfpField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.dfp.Dfp", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DfpField dfpField0 = new DfpField((-1853));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Dfp dfp0 = null;
      try {
        dfp0 = new Dfp((DfpField) null, (byte)124, (byte) (-95));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.dfp.Dfp", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Dfp dfp0 = null;
      try {
        dfp0 = new Dfp((DfpField) null, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.dfp.Dfp", e);
      }
  }
}
