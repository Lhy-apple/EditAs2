/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:59:24 GMT 2023
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayRealVector_ESTest extends ArrayRealVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      double[] doubleArray1 = arrayRealVector0.toArray();
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      double[] doubleArray1 = arrayRealVector0.getData();
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      String string0 = arrayRealVector0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      RealVector realVector0 = arrayRealVector0.mapAcos();
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
      assertEquals(25.132741228718352, realVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      double double0 = arrayRealVector0.getL1Distance((RealVector) arrayRealVector0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.projection(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, realVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      double double0 = arrayRealVector0.getDistance((RealVector) arrayRealVector0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      double double0 = arrayRealVector0.getLInfDistance((RealVector) arrayRealVector0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = arrayRealVector0.append(arrayRealVector0);
      assertEquals(0, arrayRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      double[] doubleArray1 = arrayRealVector0.getDataRef();
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) arrayRealVector0, arrayRealVector0);
      assertEquals(34, arrayRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, (ArrayRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertEquals(0, arrayRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      try { 
        arrayRealVector0.set(119, arrayRealVector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index 119 out of allowed range [0, -1]
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      try { 
        arrayRealVector0.ebeDivide((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector must have at least one element
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(3092);
      // Undeclared exception!
      try { 
        arrayRealVector0.getSubVector(3092, 3092);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index 3,092 out of allowed range [0, 3,091]
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.append(doubleArray0);
      assertEquals(28, realVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1842);
      // Undeclared exception!
      arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      RealVector realVector0 = arrayRealVector0.projection((RealVector) openMapRealVector0);
      assertTrue(realVector0.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      // Undeclared exception!
      try { 
        arrayRealVector0.setEntry(4, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index 4 out of allowed range [0, -1]
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      RealVector realVector0 = arrayRealVector0.append((-1829.2545));
      assertEquals(1829.2545, realVector0.getLInfNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      RealVector realVector0 = arrayRealVector0.append((RealVector) arrayRealVector0);
      assertNotSame(realVector0, arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.add((RealVector) arrayRealVector0);
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.subtract((RealVector) arrayRealVector0);
      assertFalse(realVector0.isNaN());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      arrayRealVector0.set(863.2364);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector((double[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, (-5032), (-5032));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, 9, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // position 9 and size 9 dont fit to the size of the input array {2}
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, 20, 149);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // position 20 and size 149 dont fit to the size of the input array {2}
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, false);
      assertFalse(arrayRealVector1.isNaN());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(4264);
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      assertEquals(8528, arrayRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-929.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.add((RealVector) openMapRealVector0);
      assertEquals(1858.0, realVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      RealVector realVector0 = arrayRealVector0.mapAdd(1.0);
      assertEquals(2.449489742783178, realVector0.getNorm(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.mapSubtract(1.0E-12);
      assertFalse(realVector0.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (-929.130133999);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.unitVector();
      assertEquals(929.130133999, arrayRealVector0.getNorm(), 0.01);
      assertEquals(1.0, realVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.mapPow(1.0E-12);
      assertFalse(realVector0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.mapExp();
      assertFalse(realVector0.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.mapExpm1();
      assertEquals(14, realVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(28);
      RealVector realVector0 = arrayRealVector0.mapLog10();
      assertEquals(28, realVector0.getDimension());
      assertFalse(realVector0.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1441);
      RealVector realVector0 = arrayRealVector0.mapLog1p();
      assertEquals(1441, realVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.mapCosh();
      assertEquals(3.7416573867739413, realVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1200);
      RealVector realVector0 = arrayRealVector0.mapSinh();
      assertEquals(1200, realVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      RealVector realVector0 = arrayRealVector0.mapTanh();
      assertEquals(6, realVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(28);
      RealVector realVector0 = arrayRealVector0.mapCos();
      assertEquals(5.291502622129181, realVector0.getNorm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.mapSin();
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.mapTan();
      assertTrue(realVector0.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(576);
      RealVector realVector0 = arrayRealVector0.mapAsin();
      assertEquals(576, realVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.mapAtan();
      assertEquals(1, realVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.mapInv();
      assertEquals(Double.POSITIVE_INFINITY, realVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1842);
      RealVector realVector0 = arrayRealVector0.mapAbs();
      assertEquals(1842, realVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.mapSqrt();
      assertEquals(0.0, realVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(576);
      RealVector realVector0 = arrayRealVector0.mapCbrt();
      assertEquals(576, realVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.mapCeil();
      assertFalse(realVector0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.mapFloor();
      assertEquals(0.0, realVector0.getLInfNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(576);
      RealVector realVector0 = arrayRealVector0.mapRint();
      assertEquals(576, realVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.mapSignum();
      assertNotSame(realVector0, arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(1441);
      RealVector realVector0 = arrayRealVector0.mapUlp();
      assertEquals(7.12E-321, realVector0.getL1Norm(), 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertFalse(realVector0.isNaN());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      try { 
        arrayRealVector0.ebeMultiply((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector must have at least one element
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.ebeMultiply(doubleArray0);
      assertEquals(0.0, realVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.ebeDivide((RealVector) openMapRealVector0);
      assertTrue(realVector0.isNaN());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.ebeDivide(doubleArray0);
      assertEquals(Double.NaN, realVector0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      double double0 = arrayRealVector0.dotProduct((RealVector) arrayRealVector0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-929.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double double0 = arrayRealVector0.dotProduct((RealVector) openMapRealVector0);
      assertEquals(863041.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      double double0 = arrayRealVector0.getL1Norm();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      double double0 = arrayRealVector0.getLInfNorm();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      double double0 = arrayRealVector0.getDistance((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      double double0 = arrayRealVector0.getDistance(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[] doubleArray0 = new double[32];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      double double0 = arrayRealVector0.getL1Distance((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      double double0 = arrayRealVector0.getLInfDistance((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      double double0 = arrayRealVector0.getLInfDistance(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      try { 
        arrayRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      arrayRealVector0.unitize();
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      try { 
        arrayRealVector0.unitize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // cannot normalize a zero norm vector
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertEquals(17, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealMatrix realMatrix0 = arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(18, realMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      arrayRealVector0.setSubVector(7, (RealVector) openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        arrayRealVector0.setSubVector(40, (RealVector) openMapRealVector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index 40 out of allowed range [0, 0]
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      Double[] doubleArray1 = new Double[2];
      doubleArray1[1] = (Double) (-929.130133999);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1, 1, 1);
      try { 
        arrayRealVector0.subtract((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 1 but expected 8
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      boolean boolean0 = arrayRealVector0.isInfinite();
      assertFalse(arrayRealVector0.isNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1074.8922509918325);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      RealVector realVector0 = arrayRealVector0.mapLog();
      boolean boolean0 = arrayRealVector0.equals(realVector0);
      assertFalse(realVector0.equals((Object)arrayRealVector0));
      assertFalse(realVector0.isInfinite());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = Double.NaN;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      boolean boolean0 = arrayRealVector0.isInfinite();
      assertTrue(arrayRealVector0.isNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, true);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      openMapRealVector0.mapInvToSelf();
      RealVector realVector0 = arrayRealVector0.subtract((RealVector) openMapRealVector0);
      boolean boolean0 = realVector0.isInfinite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(89, 89);
      boolean boolean0 = arrayRealVector0.equals(arrayRealVector0);
      assertTrue(boolean0);
      assertEquals(2.754416587409971E28, arrayRealVector0.getLInfNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, false);
      boolean boolean0 = arrayRealVector0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(28);
      Object object0 = new Object();
      boolean boolean0 = arrayRealVector0.equals(object0);
      assertEquals(28, arrayRealVector0.getDimension());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      boolean boolean0 = arrayRealVector0.equals(openMapRealVector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      boolean boolean0 = arrayRealVector0.equals(openMapRealVector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      openMapRealVector0.set(1.0E-12);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      boolean boolean0 = arrayRealVector0.equals(openMapRealVector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(28);
      arrayRealVector0.hashCode();
      assertFalse(arrayRealVector0.isNaN());
      assertEquals(28, arrayRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      openMapRealVector0.set(Double.NaN);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(openMapRealVector0);
      arrayRealVector0.hashCode();
      assertTrue(arrayRealVector0.isNaN());
  }
}
