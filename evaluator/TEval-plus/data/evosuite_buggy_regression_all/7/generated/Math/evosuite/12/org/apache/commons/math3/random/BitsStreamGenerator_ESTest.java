/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:47:13 GMT 2023
 */

package org.apache.commons.math3.random;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BitsStreamGenerator_ESTest extends BitsStreamGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(16);
      long long0 = well44497a0.nextLong();
      assertEquals((-5252987908091821301L), long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[4];
      Well512a well512a0 = new Well512a(intArray0);
      boolean boolean0 = well512a0.nextBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(16);
      boolean boolean0 = well44497a0.nextBoolean();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-175L));
      byte[] byteArray0 = new byte[7];
      well19937c0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)111, (byte) (-106), (byte) (-128), (byte) (-76), (byte)62, (byte)76}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-516));
      double double0 = well44497a0.nextGaussian();
      assertEquals((-1.101911105396174), double0, 0.01);
      
      double double1 = well44497a0.nextGaussian();
      assertEquals((-0.6787620141217239), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      try { 
        well19937c0.nextInt(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(16);
      int int0 = well44497a0.nextInt(8);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-516));
      double double0 = well44497a0.nextGaussian();
      assertEquals((-1.101911105396174), double0, 0.01);
      
      well44497a0.nextFloat();
      int int0 = well44497a0.nextInt(1960);
      assertEquals(443, int0);
      
      float float0 = well44497a0.nextFloat();
      assertEquals(0.24883187F, float0, 0.01F);
      
      well44497a0.nextInt();
      well44497a0.next(380509402);
      well44497a0.next(380509402);
      int int1 = well44497a0.nextInt(1618634679);
      assertEquals(1074269928, int1);
  }
}
