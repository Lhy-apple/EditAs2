/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 29 19:46:18 GMT 2023
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Segment;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SubLine_ESTest extends SubLine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D((-0.1), vector3D0, (-0.1), vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      List<Segment> list0 = subLine0.getSegments();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = Vector3D.PLUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      Segment segment0 = new Segment(vector3D1, (Vector3D) null, line0);
      SubLine subLine0 = null;
      try {
        subLine0 = new SubLine(segment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D((-0.1), vector3D0, (-0.1), vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, false);
      assertEquals(8.765121169122353E-34, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D((-0.1), vector3D0, (-0.1), vector3D0);
      Vector3D vector3D2 = Vector3D.PLUS_K;
      Vector3D vector3D3 = new Vector3D((-0.1), vector3D1, (-0.1), vector3D0, (-3517.7793796804244), vector3D2, (-348.46233115), vector3D2);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      SubLine subLine1 = new SubLine(vector3D2, vector3D3);
      Vector3D vector3D4 = subLine0.intersection(subLine1, true);
      assertNotNull(vector3D4);
      
      SubLine subLine2 = new SubLine(vector3D3, vector3D4);
      Vector3D vector3D5 = subLine2.intersection(subLine1, true);
      assertNull(vector3D5);
      assertEquals((-2.0686578699220063E-5), vector3D4.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = new Vector3D((-0.1), vector3D0, (-0.1), vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      IntervalsSet intervalsSet0 = new IntervalsSet(9.755392680573412E-9, (-348.46233115));
      SubLine subLine1 = new SubLine(line0, intervalsSet0);
      Vector3D vector3D2 = subLine0.intersection(subLine1, true);
      assertNull(vector3D2);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-3851.6942), 498.0664230109315, 1496.48705041);
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      SubLine subLine0 = line0.wholeLine();
      SubLine subLine1 = new SubLine(vector3D2, vector3D0);
      Vector3D vector3D3 = subLine1.intersection(subLine0, false);
      assertNull(vector3D3);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-3851.6942), 498.0664230109315, 1496.48705041);
      Vector3D vector3D1 = Vector3D.MINUS_K;
      Line line0 = new Line(vector3D0, vector3D1);
      Vector3D vector3D2 = line0.intersection(line0);
      SubLine subLine0 = line0.wholeLine();
      SubLine subLine1 = new SubLine(vector3D2, vector3D0);
      Vector3D vector3D3 = subLine0.intersection(subLine1, false);
      assertNull(vector3D3);
  }
}
