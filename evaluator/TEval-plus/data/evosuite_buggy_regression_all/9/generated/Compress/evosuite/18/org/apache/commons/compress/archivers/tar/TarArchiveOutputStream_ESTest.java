/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:22:58 GMT 2023
 */

package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.time.ZoneId;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TarArchiveOutputStream_ESTest extends TarArchiveOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      int int0 = tarArchiveOutputStream0.getCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = MockFile.createTempFile("r\"Dqi(!>", "r\"Dqi(!>", (File) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, 3286);
      tarArchiveOutputStream0.close();
      try { 
        tarArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      int int0 = tarArchiveOutputStream0.getRecordSize();
      assertEquals(512, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      TarArchiveOutputStream tarArchiveOutputStream1 = null;
      try {
        tarArchiveOutputStream1 = new TarArchiveOutputStream(tarArchiveOutputStream0, (byte)49, "ZIP compression method can not be negative: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ZIP compression method can not be negative: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, (String) null);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      tarArchiveOutputStream0.setAddPaxHeadersForNonAsciiNames(true);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("5$\"S#7yDTX4D", (byte)49);
      tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        tarArchiveOutputStream0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("5|et2M^c2E");
      tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
      try { 
        tarArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archives contains unclosed entries.
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = MockFile.createTempFile("r\"Dqi(!>", "r\"Dqi(!>", (File) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, 3286);
      tarArchiveOutputStream0.close();
      tarArchiveOutputStream0.close();
      assertEquals(3286, tarArchiveOutputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
      tarArchiveOutputStream0.close();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      try { 
        tarArchiveOutputStream0.writePaxHeaders("' bytes specified in the header were written", map0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      MockFile mockFile0 = new MockFile("org.apac+e.commons.compress.archivers.zip.UnicodePathExtraFie(d", "org.apac+e.commons.compress.archivers.zip.UnicodePathExtraFie(d");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      // Undeclared exception!
      try { 
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // file name 'data/swf/zenodo_replication_package_new/org.apac+e.commons.compress.archivers.zip.UnicodePathExtraFie(d/org.apac+e.commons.compress.archivers.zip.UnicodePathExtraFie(d' is too long ( > 100 bytes)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      MockFile mockFile0 = new MockFile("org.apac+e.commons.compress.archivers.zip.UnicodePathExtraFie(d", "org.apac+e.commons.compress.archivers.zip.UnicodePathExtraFie(d");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveOutputStream0.setLongFileMode(1);
      tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
      assertTrue(tarArchiveEntry0.isFile());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      tarArchiveOutputStream0.setBigNumberMode(1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      tarArchiveOutputStream0.writePaxHeaders("Zip64 extended information must contain both size values in the local file header.", hashMap0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      MockFile mockFile0 = new MockFile("org.apac+e.commons.compress.archivers.zip.UnicodePathExtraFie(d", "org.apac+e.commons.compress.archivers.zip.UnicodePathExtraFie(d");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveOutputStream0.setAddPaxHeadersForNonAsciiNames(true);
      tarArchiveOutputStream0.setLongFileMode(3);
      tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
      assertEquals(0, tarArchiveEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      tarArchiveOutputStream0.setAddPaxHeadersForNonAsciiNames(true);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("K5N", (byte)50);
      tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
      assertEquals(0, tarArchiveEntry0.getDevMinor());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("org.apac+e.commons.compress.archivers.zip.UnicodePathExtraFie(d/org.apac+e.commons.compress.archivers.zip.UnicodePathExtraFie(d");
      FileSystemHandling.createFolder(evoSuiteFile0);
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      MockFile mockFile0 = new MockFile("org.apac+e.commons.compress.archivers.zip.UnicodePathExtraFie(d", "org.apac+e.commons.compress.archivers.zip.UnicodePathExtraFie(d");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      tarArchiveOutputStream0.setLongFileMode(2);
      tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(byteArrayOutputStream0);
      tarArchiveOutputStream0.close();
      try { 
        tarArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      try { 
        tarArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No current entry to close
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte) (-38));
      tarArchiveEntry0.setSize(1);
      tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
      try { 
        tarArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // entry '' closed at '0' before the '1' bytes specified in the header were written
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      try { 
        tarArchiveOutputStream0.writePaxHeaders("", map0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // request to write '637' bytes exceeds size in header of '0' bytes for entry './PaxHeaders.X/'
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      tarArchiveOutputStream0.writePaxHeaders("0\u0000", map0);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      File file0 = MockFile.createTempFile("minor device number", "minor device number");
      TarArchiveEntry tarArchiveEntry0 = (TarArchiveEntry)tarArchiveOutputStream0.createArchiveEntry(file0, "minor device number");
      assertEquals(33188, tarArchiveEntry0.getMode());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      File file0 = MockFile.createTempFile("r\"Dqi(!>", "r\"Dqi(!>", (File) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, 3286);
      tarArchiveOutputStream0.close();
      try { 
        tarArchiveOutputStream0.createArchiveEntry(file0, "r\"Dqi(!>");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      tarArchiveOutputStream0.setBigNumberMode(2);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("ZIP compression method can not be negative: ", (byte)1);
      tarArchiveEntry0.setIds((-1162), 25461);
      tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      tarArchiveOutputStream0.setBigNumberMode(2);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("*Y$RJ'$]wB{z>", (byte)49);
      MockDate mockDate0 = new MockDate(1, 16877, 33188, 0, (-1560), 1);
      tarArchiveEntry0.setModTime((Date) mockDate0);
      tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      System.setCurrentTimeMillis((-1066L));
      File file0 = MockFile.createTempFile("J/o1S", "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      // Undeclared exception!
      try { 
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // last modification time '-1' is too big ( > 8589934591 )
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("*Y$RJ'$]wB{z>", (byte)49);
      tarArchiveEntry0.setDevMinor(2147356412);
      // Undeclared exception!
      try { 
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // minor device number '2147356412' is too big ( > 2097151 )
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }
}
