/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 12 05:25:15 GMT 2023
 */

package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TarArchiveOutputStream_ESTest extends TarArchiveOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("major device number");
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      tarArchiveOutputStream0.getCount();
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("majrdvice umer");
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      MockFile mockFile0 = new MockFile("majrdvice umer", "majrdvice umer");
      TarArchiveEntry tarArchiveEntry0 = (TarArchiveEntry)tarArchiveOutputStream0.createArchiveEntry(mockFile0, "majrdvice umer");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "majrdvice umer", map0);
      assertEquals(1536, tarArchiveOutputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, 152);
      tarArchiveOutputStream0.setLongFileMode(152);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("major device number");
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      int int0 = tarArchiveOutputStream0.getRecordSize();
      assertEquals(512, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("entry '");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(dataOutputStream0, 908, "windows");
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null, (String) null);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("major device number");
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      tarArchiveOutputStream0.setAddPaxHeadersForNonAsciiNames(true);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("n+qGcg|*n", (byte)1);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder", map0);
      assertEquals(1536, tarArchiveOutputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("major device number");
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      tarArchiveOutputStream0.flush();
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'ncd5d9bXDvj");
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      tarArchiveOutputStream0.finish();
      try { 
        tarArchiveOutputStream0.finish();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archive has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("F35iLDi4G}{t");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("F35iLDi4G}{t");
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
      try { 
        tarArchiveOutputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // This archives contains unclosed entries.
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("././@LongLink");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      tarArchiveOutputStream0.close();
      tarArchiveOutputStream0.close();
      assertEquals(10240, tarArchiveOutputStream0.getCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("H[>4l`I2~g[3oR(;");
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      tarArchiveOutputStream0.finish();
      ArjArchiveEntry arjArchiveEntry0 = new ArjArchiveEntry();
      try { 
        tarArchiveOutputStream0.putArchiveEntry(arjArchiveEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("majrdvice umer");
      assertNotNull(mockFileOutputStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertNotNull(tarArchiveOutputStream0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("majrdvice umer");
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("majrdvice umer", tarArchiveEntry0.getName());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setLinkName((String) null);
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("majrdvice umer", tarArchiveEntry0.getName());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertNull(tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      
      // Undeclared exception!
      try { 
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("major device number");
      assertNotNull(mockFileOutputStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertNotNull(tarArchiveOutputStream0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("n+qGcg|*n", (byte)1);
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals("n+qGcg|*n", tarArchiveEntry0.getName());
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setLinkName("O4o$bpuYb");
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals("O4o$bpuYb", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals("n+qGcg|*n", tarArchiveEntry0.getName());
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      
      tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
      assertEquals(512, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(512L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals("O4o$bpuYb", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals("n+qGcg|*n", tarArchiveEntry0.getName());
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("major device number");
      assertNotNull(mockFileOutputStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertNotNull(tarArchiveOutputStream0);
      
      tarArchiveOutputStream0.setBigNumberMode(1);
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("major device number");
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals("major device number", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
      assertEquals(512L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(512, tarArchiveOutputStream0.getCount());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals("major device number", tarArchiveEntry0.getName());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("major device number");
      assertNotNull(mockFileOutputStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertNotNull(tarArchiveOutputStream0);
      
      tarArchiveOutputStream0.setBigNumberMode(2);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("n+qGcg|*n", (byte)1);
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals("n+qGcg|*n", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setUserId(1952257861);
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals("n+qGcg|*n", tarArchiveEntry0.getName());
      assertEquals(1952257861, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      
      tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(1536, tarArchiveOutputStream0.getCount());
      assertEquals(1536L, tarArchiveOutputStream0.getBytesWritten());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals("n+qGcg|*n", tarArchiveEntry0.getName());
      assertEquals(1952257861, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("H[>4l`I2~g[3oR(;");
      assertNotNull(mockFileOutputStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertNotNull(tarArchiveOutputStream0);
      
      tarArchiveOutputStream0.finish();
      assertEquals(10240L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(10240, tarArchiveOutputStream0.getCount());
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      
      try { 
        tarArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("major device numer");
      assertNotNull(mockFileOutputStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertNotNull(tarArchiveOutputStream0);
      
      try { 
        tarArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No current entry to close
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("major device number");
      assertNotNull(mockFileOutputStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertNotNull(tarArchiveOutputStream0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("major device number");
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals("major device number", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setSize(8L);
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals("major device number", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(8L, tarArchiveEntry0.getSize());
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      
      tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(512, tarArchiveOutputStream0.getCount());
      assertEquals(512L, tarArchiveOutputStream0.getBytesWritten());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals("major device number", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(8L, tarArchiveEntry0.getSize());
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      
      try { 
        tarArchiveOutputStream0.closeArchiveEntry();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // entry 'major device number' closed at '0' before the '8' bytes specified in the header were written
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("major device number");
      assertNotNull(mockFileOutputStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertNotNull(tarArchiveOutputStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream1 = new TarArchiveOutputStream(tarArchiveOutputStream0);
      assertFalse(tarArchiveOutputStream1.equals((Object)tarArchiveOutputStream0));
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream1.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream1.getRecordSize());
      assertEquals(0, tarArchiveOutputStream1.getCount());
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertNotNull(tarArchiveOutputStream1);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("major device number");
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals("major device number", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertNotNull(tarArchiveEntry0);
      
      // Undeclared exception!
      try { 
        tarArchiveOutputStream1.putArchiveEntry(tarArchiveEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No current tar entry
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("major deaice number");
      assertNotNull(mockFileOutputStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertNotNull(tarArchiveOutputStream0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals("", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertNotNull(tarArchiveEntry0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      try { 
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "", map0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // request to write '637' bytes exceeds size in header of '0' bytes for entry './PaxHeaders.X/'
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("majord5vic Ynme");
      assertNotNull(mockFileOutputStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertNotNull(tarArchiveOutputStream0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("majord5vic Ynme");
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("majord5vic Ynme", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertNotNull(tarArchiveEntry0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder", "record has length '");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "org.apache.commons.compress.archivers.zip.ZipEncodingHelper$SimpleEncodingHolder", hashMap0);
      assertEquals(1024, tarArchiveOutputStream0.getCount());
      assertEquals(1024L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals("majord5vic Ynme", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("major device numer");
      assertNotNull(mockFileOutputStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertNotNull(tarArchiveOutputStream0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("major device numer");
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("major device numer", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertNotNull(tarArchiveEntry0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, " \u0000", hashMap0);
      assertEquals(512L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertEquals("major device numer", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream((OutputStream) null);
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertNotNull(tarArchiveOutputStream0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("j/)JHE`-ciY0!3S");
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertFalse(tarArchiveEntry0.isExtended());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals("j/)JHE`-ciY0!3S", tarArchiveEntry0.getName());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertFalse(tarArchiveEntry0.isLink());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertNotNull(tarArchiveEntry0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        tarArchiveOutputStream0.writePaxHeaders(tarArchiveEntry0, "j/)JHE`-ciY0!3S", hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.CountingOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ibm850", "ibm850");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0, (-3725));
      assertEquals("ibm850", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("/data/swf/zenodo_replication_package_new/ibm850/ibm850", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("/data/swf/zenodo_replication_package_new/ibm850", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertNotNull(tarArchiveOutputStream0);
      
      tarArchiveOutputStream0.close();
      assertEquals("ibm850", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1024L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("/data/swf/zenodo_replication_package_new/ibm850/ibm850", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("/data/swf/zenodo_replication_package_new/ibm850", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(1024, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(1024L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      
      try { 
        tarArchiveOutputStream0.createArchiveEntry(mockFile0, "' bytes exceeds size in header of '");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream has already been finished
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("H[>4l`I2~g[3oR(;");
      assertNotNull(mockFileOutputStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0, 371, 371);
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(371, tarArchiveOutputStream0.getRecordSize());
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertNotNull(tarArchiveOutputStream0);
      
      tarArchiveOutputStream0.finish();
      assertEquals(742L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(742, tarArchiveOutputStream0.getCount());
      assertEquals(371, tarArchiveOutputStream0.getRecordSize());
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("major device number");
      assertNotNull(mockFileOutputStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertNotNull(tarArchiveOutputStream0);
      
      tarArchiveOutputStream0.setBigNumberMode(2);
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("n+qGcg|*n", true);
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals("n+qGcg|*n", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setModTime((-2008L));
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals("n+qGcg|*n", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      
      tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
      assertEquals(1536, tarArchiveOutputStream0.getCount());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(1536L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertTrue(tarArchiveEntry0.isFile());
      assertEquals("n+qGcg|*n", tarArchiveEntry0.getName());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertFalse(tarArchiveEntry0.isExtended());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("major device number");
      assertNotNull(mockFileOutputStream0);
      
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockFileOutputStream0);
      assertEquals(0, tarArchiveOutputStream0.getCount());
      assertEquals(0L, tarArchiveOutputStream0.getBytesWritten());
      assertEquals(512, tarArchiveOutputStream0.getRecordSize());
      assertEquals(2, TarArchiveOutputStream.BIGNUMBER_POSIX);
      assertEquals(1, TarArchiveOutputStream.LONGFILE_TRUNCATE);
      assertEquals(2, TarArchiveOutputStream.LONGFILE_GNU);
      assertEquals(1, TarArchiveOutputStream.BIGNUMBER_STAR);
      assertEquals(0, TarArchiveOutputStream.LONGFILE_ERROR);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
      assertEquals(0, TarArchiveOutputStream.BIGNUMBER_ERROR);
      assertNotNull(tarArchiveOutputStream0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("major device number");
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("major device number", tarArchiveEntry0.getName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isExtended());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      assertNotNull(tarArchiveEntry0);
      
      tarArchiveEntry0.setModTime((-2529L));
      assertEquals(0, tarArchiveEntry0.getDevMinor());
      assertFalse(tarArchiveEntry0.isCharacterDevice());
      assertEquals("major device number", tarArchiveEntry0.getName());
      assertEquals("", tarArchiveEntry0.getUserName());
      assertEquals("", tarArchiveEntry0.getLinkName());
      assertFalse(tarArchiveEntry0.isBlockDevice());
      assertEquals(0, tarArchiveEntry0.getUserId());
      assertEquals(0L, tarArchiveEntry0.getRealSize());
      assertFalse(tarArchiveEntry0.isGNULongLinkEntry());
      assertEquals(0, tarArchiveEntry0.getDevMajor());
      assertEquals(33188, tarArchiveEntry0.getMode());
      assertFalse(tarArchiveEntry0.isCheckSumOK());
      assertFalse(tarArchiveEntry0.isGlobalPaxHeader());
      assertFalse(tarArchiveEntry0.isGNULongNameEntry());
      assertFalse(tarArchiveEntry0.isLink());
      assertFalse(tarArchiveEntry0.isExtended());
      assertTrue(tarArchiveEntry0.isFile());
      assertFalse(tarArchiveEntry0.isGNUSparse());
      assertFalse(tarArchiveEntry0.isFIFO());
      assertFalse(tarArchiveEntry0.isSymbolicLink());
      assertFalse(tarArchiveEntry0.isPaxHeader());
      assertEquals(0, tarArchiveEntry0.getGroupId());
      assertEquals(0L, tarArchiveEntry0.getSize());
      assertEquals("", tarArchiveEntry0.getGroupName());
      assertFalse(tarArchiveEntry0.isDirectory());
      assertEquals(1000, TarArchiveEntry.MILLIS_PER_SECOND);
      assertEquals(16877, TarArchiveEntry.DEFAULT_DIR_MODE);
      assertEquals(33188, TarArchiveEntry.DEFAULT_FILE_MODE);
      assertEquals(31, TarArchiveEntry.MAX_NAMELEN);
      
      // Undeclared exception!
      try { 
        tarArchiveOutputStream0.putArchiveEntry(tarArchiveEntry0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // last modification time '-2' is too big ( > 8589934591 ).
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarArchiveOutputStream", e);
      }
  }
}
